1 Code: print <sep> { out . print ( x ) ; out . flush ( ) ; }
  Tgt: print a double to standard output and flush standard output
  Pred: print an int to standard output and flush standard output
2 Code: evaluate <sep> { return variable . getValue ( ) ; }
  Tgt: return the value of the variable
  Pred: same as a double
3 Code: to Collection <sep> { return ( iterable instanceof Collection ) ? ( Collection < E > ) iterable : Lists . newArrayList ( iterable . iterator ( ) ) ; }
  Tgt: convert an iterable into a collection
  Pred: convert the object to a collection
4 Code: Values <sep> { this . table = fromParent . table . clone ( ) ; this . mask = fromParent . mask ; this . size = fromParent . size ; this . tombstones = fromParent . tombstones ; this . maximumLoad = fromParent . maximumLoad ; this . clean = fromParent . clean ; inheritValues ( fromParent ) ; }
  Tgt: use for inheritable thread locals
  Pred: copy the objects for values
5 Code: write Window <sep> { synchronized ( this ) { writeBuffer = pattern ; } mHandler . sendEmptyMessage ( MSG_WRITE ) ; }
  Tgt: update the refreshable display with the given dot pattern
  Pred: write all the data
6 Code: set External Schema URL <sep> { xr . setFeature ( NAMESPACES_SAXF , true ) ; if ( namespace != null && namespace . length ( ) > 0 ) { xr . setProperty ( EXTERNAL_SCHEMA_LOC_XERCESP , namespace + "-" + u ) ; } else { xr . setProperty ( EXTERNAL_SCHEMA_NNS_LOC_XERCESP , u ) ; } xr . setFeature ( VALIDATION_SAXF , true ) ; xr . setFeature ( SCHEMA_V_XERCESF , true ) ; }
  Tgt: specify an external schema location and turn on validation via setting features and properties
  Pred: set the storage url for a specific file
7 Code: append To <sep> { builder . append ( SEPARATOR ) ; builder . append ( jtIdentifier ) ; builder . append ( SEPARATOR ) ; builder . append ( idFormat . format ( id ) ) ; return builder ; }
  Tgt: add the stuff after the job prefix to the given builder
  Pred: append the name to of of another buffer
8 Code: set Style <sep> { native_setStyle ( mNativePaint , style . nativeInt ) ; }
  Tgt: set the paints style, used for controlling how primitives geometries are interpreted
  Pred: set the value for the style
9 Code: get External Storage Public Directory <sep> { return new File ( getExternalStorageDirectory ( ) , type ) ; }
  Tgt: get a top level public external storage directory for placing files of a particular type
  Pred: return the criterion of the external storage storage
10 Code: find Class <sep> { return ( JavaClass ) _loadedClasses . get ( className ) ; }
  Tgt: find an already defined java class object by name
  Pred: find the class for the same class
11 Code: register <sep> { mBasicHandlers . put ( command , handler ) ; }
  Tgt: register a basic command handler
  Pred: register a basic command handler
12 Code: to String <sep> { try { Iterator keys = keys ( ) ; StringBuffer sb = new StringBuffer ( "{" ) ; while ( keys . hasNext ( ) ) { if ( sb . length ( ) > 1 ) { sb . append ( ',' ) ; } Object o = keys . next ( ) ; sb . append ( quote ( o . toString ( ) ) ) ; sb . append ( ':' ) ; sb . append ( valueToString ( this . map . get ( o ) ) ) ; } sb . append ( '}' ) ; return sb . toString ( ) ; } catch ( Exception e ) { return null ; } }
  Tgt: make a json text of this json object
  Pred: make a json text of this json object
13 Code: validate <sep> { this . schema . validate ( this ) ; }
  Tgt: validate the contents of this struct against its schema
  Pred: check that the class is valid
14 Code: get Splits <sep> { setFormat ( job ) ; job . setLong ( "mapred.min.split.size" , Long . MAX_VALUE ) ; return root . getSplits ( job , numSplits ) ; }
  Tgt: build a composite input split from the child input formats by assigning the ith split from each child to the ith composite split
  Pred: return the flat colors, or null if none found
15 Code: add Modification <sep> { mods . add ( mod ) ; }
  Tgt: add a modification to the list of modification included in this fake operation
  Pred: add auditory feedback to this utterance
16 Code: delete Template <sep> { final UUID locationId = UUID . fromString ( "e884571e-7f92-4d6a-9274-3f5649900835" ) ; final ApiResourceVersion apiVersion = new ApiResourceVersion ( "2.1" ) ; final Map < String , Object > routeValues = new HashMap < String , Object > ( ) ; routeValues . put ( "project" , project ) ; routeValues . put ( "templateId" , templateId ) ; final Object httpRequest = super . createRequest ( HttpMethod . DELETE , locationId , routeValues , apiVersion , APPLICATION_JSON_TYPE ) ; super . sendRequest ( httpRequest ) ; }
  Tgt: delete a definition template
  Pred: delete a property
17 Code: hash Code <sep> { return numberFormat . hashCode ( ) ; }
  Tgt: override hash code
  Pred: define the hashcode
18 Code: from Map <sep> { if ( pckg == null ) { throw new IllegalArgumentException ( "Package-identifier-must-not-be-null." ) ; } String module = null ; String release = null ; String timestamp = null ; if ( info != null ) { module = ( String ) info . get ( PROPERTY_MODULE ) ; if ( ( module != null ) && ( module . length ( ) < 1 ) ) module = null ; release = ( String ) info . get ( PROPERTY_RELEASE ) ; if ( ( release != null ) && ( ( release . length ( ) < 1 ) || ( release . equals ( "${pom.version}" ) ) ) ) release = null ; timestamp = ( String ) info . get ( PROPERTY_TIMESTAMP ) ; if ( ( timestamp != null ) && ( ( timestamp . length ( ) < 1 ) || ( timestamp . equals ( "${mvn.timestamp}" ) ) ) ) timestamp = null ; } String clsldrstr = null ; if ( clsldr != null ) clsldrstr = clsldr . toString ( ) ; return new VersionInfo ( pckg , module , release , timestamp , clsldrstr ) ; }
  Tgt: instantiate version information from properties
  Pred: construct a sorted map of a quaternion with specified names
19 Code: Access Timeout <sep> { try { Thread . sleep ( PROCESSING_TIME / 2 ) ; } catch ( InterruptedException e ) { } return value ; }
  Tgt: unable to serialize calls on this bean
  Pred: determine whether the given timeout represents an awt value
20 Code: add Vertex Type <sep> { if ( mVertexTypeCount >= mVertexTypes . length ) { throw new IllegalStateException ( "Max-vertex-types-exceeded." ) ; } mVertexTypes [ mVertexTypeCount ] = new Entry ( ) ; mVertexTypes [ mVertexTypeCount ] . t = t ; mVertexTypes [ mVertexTypeCount ] . e = null ; mVertexTypeCount ++ ; return this ; }
  Tgt: add a vertex data type to the builder object
  Pred: add a dependency to this polygon
21 Code: transform <sep> { try { Constructor con = input . getConstructor ( iParamTypes ) ; return con . newInstance ( iArgs ) ; } catch ( NoSuchMethodException ex ) { throw new FunctorException ( "InstantiateTransformer:-The-constructor-must-exist-and-be-public-" ) ; } catch ( InstantiationException ex ) { throw new FunctorException ( "InstantiateTransformer:-InstantiationException" , ex ) ; } catch ( IllegalAccessException ex ) { throw new FunctorException ( "InstantiateTransformer:-Constructor-must-be-public" , ex ) ; } catch ( InvocationTargetException ex ) { throw new FunctorException ( "InstantiateTransformer:-Constructor-threw-an-exception" , ex ) ; } }
  Tgt: transform the input class object to a result by instantiation
  Pred: return the new rectangle of this graphics using a particular rectangle
22 Code: encode To File <sep> { if ( dataToEncode == null ) { throw new NullPointerException ( "Data-to-encode-was-null." ) ; } Base64 . OutputStream bos = null ; try { bos = new Base64 . OutputStream ( new java . io . FileOutputStream ( filename ) , Base64 . ENCODE ) ; bos . write ( dataToEncode ) ; } catch ( java . io . IOException e ) { throw e ; } finally { try { bos . close ( ) ; } catch ( Exception e ) { } } }
  Tgt: encode data to a file
  Pred: encode data to a file
23 Code: test Plus Negative <sep> { String a = "-92948782094488478231212478987482988429808779810457634781384756794987" ; int aScale = 41 ; String c = "-92948782094488478231212478987482988429808779810457634781384756794987" ; int cScale = 41 ; BigDecimal aNumber = new BigDecimal ( new BigInteger ( a ) , aScale ) ; BigDecimal cNumber = new BigDecimal ( new BigInteger ( c ) , cScale ) ; assertEquals ( "incorrect-value" , cNumber , aNumber . plus ( ) ) ; }
  Tgt: plus for a negative big decimal
  Pred: take a positive value to use object
24 Code: reformat Date String <sep> { DateFormat df = new SimpleDateFormat ( oldFormat ) ; Date date = new Date ( ) ; DateFormat eventFormat = new SimpleDateFormat ( PropertyResourceBundle . getBundle ( "myProperties" ) . getString ( "dateFormat" ) ) ; try { date = df . parse ( info ) ; } catch ( ParseException e ) { System . out . println ( info ) ; System . out . println ( oldFormat ) ; e . printStackTrace ( ) ; throw new TivooSystemError ( "reformatDateString-failed" ) ; } return eventFormat . format ( date ) ; }
  Tgt: take in a string and an oldformat and transforms the date string into a lexigraphical one
  Pred: send a string representation of the date
25 Code: write Attribute <sep> { if ( xmlWriter . getPrefix ( namespace ) == null ) { xmlWriter . writeNamespace ( prefix , namespace ) ; xmlWriter . setPrefix ( prefix , namespace ) ; } xmlWriter . writeAttribute ( namespace , attName , attValue ) ; }
  Tgt: write an attribute with the ns prefix
  Pred: write an attribute with the ns prefix
26 Code: get Instance <sep> { if ( o instanceof Attribute ) { return ( Attribute ) o ; } if ( o != null ) { return new Attribute ( ASN1Sequence . getInstance ( o ) ) ; } return null ; }
  Tgt: return an attribute object from the given object
  Pred: get a formatter instance using the specified pattern, time zone
27 Code: reload <sep> { StringWriter stringWriter = new StringWriter ( ) ; PrintWriter printWriter = new PrintWriter ( stringWriter ) ; super . reload ( printWriter , cn , smClient ) ; return stringWriter . toString ( ) ; }
  Tgt: reload the web application at the specified context path
  Pred: return the intersection of this vector and its subgroups
28 Code: receive From Data Socket <sep> { int bytesRead ; if ( dataSocket == null ) { myLog . l ( Log . INFO , "Can't-receive-from-null-dataSocket" ) ; return - 2 ; } if ( ! dataSocket . isConnected ( ) ) { myLog . l ( Log . INFO , "Can't-receive-from-unconnected-socket" ) ; return - 2 ; } InputStream in ; try { in = dataSocket . getInputStream ( ) ; while ( ( bytesRead = in . read ( buf , 0 , buf . length ) ) == 0 ) { } if ( bytesRead == - 1 ) { return - 1 ; } } catch ( IOException e ) { myLog . l ( Log . INFO , "Error-reading-data-socket" ) ; return 0 ; } dataSocketFactory . reportTraffic ( bytesRead ) ; return bytesRead ; }
  Tgt: receive some bytes from the data socket, which is assumed to already be connected
  Pred: notify all sessions in the current process using the given path
29 Code: query All Songs <sep> { sAllSongsIdx = 0 ; sRandomCacheEnd = - 1 ; Uri media = MediaStore . Audio . Media . EXTERNAL_CONTENT_URI ; String selection = MediaStore . Audio . Media . IS_MUSIC + "!=0" ; Cursor cursor = resolver . query ( media , Song . EMPTY_PROJECTION , selection , null , null ) ; if ( cursor == null || cursor . getCount ( ) == 0 ) { sSongCount = 0 ; return null ; } int count = cursor . getCount ( ) ; long [ ] ids = new long [ count ] ; for ( int i = 0 ; i != count ; ++ i ) { if ( ! cursor . moveToNext ( ) ) return null ; ids [ i ] = cursor . getLong ( 0 ) ; } sSongCount = count ; cursor . close ( ) ; shuffle ( ids ) ; return ids ; }
  Tgt: return a shuffled array contaning the ids of all the songs on the devices library
  Pred: bind all result from an object and returns them to retrieved
30 Code: Xml Element Decl <sep> { return new JAXBElement < String > ( _CitizenshipStatus_QNAME , String . class , EmploymentHistory . class , value ) ; }
  Tgt: create an instance of jaxb element
  Pred: create an instance of jaxb element
31 Code: to String <sep> { StringBuilder sb = new StringBuilder ( "User-username="" ) ; sb . append ( RequestUtil . filter ( username ) ) ; sb . append ( """ ) ; if ( fullName != null ) { sb . append ( ",-fullName="" ) ; sb . append ( RequestUtil . filter ( fullName ) ) ; sb . append ( """ ) ; } synchronized ( groups ) { if ( groups . size ( ) > 0 ) { sb . append ( ",-groups="" ) ; int n = 0 ; Iterator < Group > values = groups . iterator ( ) ; while ( values . hasNext ( ) ) { if ( n > 0 ) { sb . append ( ',' ) ; } n ++ ; sb . append ( RequestUtil . filter ( values . next ( ) . getGroupname ( ) ) ) ; } sb . append ( """ ) ; } } synchronized ( roles ) { if ( roles . size ( ) > 0 ) { sb . append ( ",-roles="" ) ; int n = 0 ; Iterator < Role > values = roles . iterator ( ) ; while ( values . hasNext ( ) ) { if ( n > 0 ) { sb . append ( ',' ) ; } n ++ ; sb . append ( RequestUtil . filter ( values . next ( ) . getRolename ( ) ) ) ; } sb . append ( """ ) ; } } return ( sb . toString ( ) ) ; }
  Tgt: return a string representation of this user
  Pred: return a string representation of the tree
32 Code: merge Sort <sep> { int length = high - low ; if ( length < INSERTIONSORT_THRESHOLD ) { for ( int i = low ; i < high ; i ++ ) for ( int j = i ; j > low && c . compare ( dest [ j - 1 ] , dest [ j ] ) > 0 ; j -- ) swap ( dest , j , j - 1 ) ; return ; } int destLow = low ; int destHigh = high ; low += off ; high += off ; int mid = ( low + high ) >>> 1 ; mergeSort ( dest , src , low , mid , - off , c ) ; mergeSort ( dest , src , mid , high , - off , c ) ; if ( c . compare ( src [ mid - 1 ] , src [ mid ] ) <= 0 ) { System . arraycopy ( src , low , dest , destLow , length ) ; return ; } for ( int i = destLow , p = low , q = mid ; i < destHigh ; i ++ ) { if ( q >= high || p < mid && c . compare ( src [ p ] , src [ q ] ) <= 0 ) dest [ i ] = src [ p ++ ] ; else dest [ i ] = src [ q ++ ] ; } }
  Tgt: src is the source array that starts at index 0 dest is the array destination with a possible offset low is the index in dest to start sorting high is the end index in dest to end sorting off is the offset into src corresponding to low in dest
  Pred: return the euclidean distance in a new array
33 Code: get Accessible State Set <sep> { AccessibleStateSet states = new AccessibleStateSet ( ) ; return states ; }
  Tgt: get the state of this object
  Pred: get the state of this object
34 Code: get Secure Data Directory <sep> { if ( isEncryptedFilesystemEnabled ( ) ) { return SECURE_DATA_DIRECTORY ; } else { return DATA_DIRECTORY ; } }
  Tgt: get the data directory for secure storage
  Pred: get the context with the specified name
35 Code: set Texture <sep> { setTexture ( texture , 1 , 1 , true ) ; }
  Tgt: set the texture of this image component by giving an instance of a texture
  Pred: set the receivers texture
36 Code: check First Pending Role Request Cookie <sep> { LinkedList < PendingRoleRequestEntry > pendingRoleRequests = pendingRequestMap . get ( sw ) ; if ( pendingRoleRequests == null ) { return null ; } synchronized ( pendingRoleRequests ) { PendingRoleRequestEntry head = pendingRoleRequests . peek ( ) ; if ( head == null ) return null ; if ( head . cookie == cookie ) { return pendingRoleRequests . poll ( ) ; } } return null ; }
  Tgt: check whether the given request cookie matches the cookie of the first pending request
  Pred: check if an ip request is configured to perform outstanding android
37 Code: put All <sep> { for ( Iterator it = map . entrySet ( ) . iterator ( ) ; it . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) it . next ( ) ; if ( entry . getKey ( ) == null || entry . getValue ( ) == null ) { throw new NullPointerException ( "null-entities-and-copies-are-not-supported-by-" + getClass ( ) . getName ( ) ) ; } entityToCopyMap . put ( entry . getKey ( ) , entry . getValue ( ) ) ; entityToOperatedOnFlagMap . put ( entry . getKey ( ) , Boolean . FALSE ) ; } }
  Tgt: copy all of the mappings from the specified map to this event cache
  Pred: copy the key value mappings in map into this map
38 Code: ensure File Exists <sep> { File file = new File ( path ) ; if ( file . exists ( ) ) { return true ; } else { int secondSlash = path . indexOf ( '/' , 1 ) ; if ( secondSlash < 1 ) return false ; String directoryPath = path . substring ( 0 , secondSlash ) ; File directory = new File ( directoryPath ) ; if ( ! directory . exists ( ) ) return false ; file . getParentFile ( ) . mkdirs ( ) ; try { return file . createNewFile ( ) ; } catch ( IOException ioe ) { Log . w ( TAG , "File-creation-failed" , ioe ) ; } return false ; } }
  Tgt: ensure that the specified file exists on the sd card, creating it if necessary
  Pred: close a directory to ensure that the file exists
39 Code: stop Game <sep> { timer . stop ( ) ; gameActive = false ; }
  Tgt: stop the game, stopping the timer and setting the game active flag to false
  Pred: destroy the game
40 Code: set Pixel <sep> { if ( ( x < 0 ) || ( y < 0 ) || ( x >= width ) || ( y >= height ) ) { throw new ArrayIndexOutOfBoundsException ( "Coordinate-out-of-bounds!" ) ; } int pixelOffset = y * scanlineStride + x ; for ( int i = 0 ; i < numBands ; i ++ ) { data . setElem ( bankIndices [ i ] , pixelOffset + bandOffsets [ i ] , iArray [ i ] ) ; } }
  Tgt: set a pixel in the data buffer using an int array of samples for input
  Pred: set the value of the specified pixel for the specified pixel object
41 Code: clear <sep> { sRefreshables . clear ( ) ; sRefreshables . trimToSize ( ) ; }
  Tgt: remove all elements, leaving it empty, and trim to size for to free up memory
  Pred: clear the collection
42 Code: dispatch Collect View Attributes <sep> { performCollectViewAttributes ( attachInfo , visibility ) ; }
  Tgt: aggregate all per view attributes in to the view root
  Pred: send all the view of the given view
43 Code: deregister Driver <sep> { if ( driver == null ) { return ; } println ( "DriverManager.deregisterDriver:-" + driver ) ; DriverInfo aDriver = new DriverInfo ( driver ) ; if ( registeredDrivers . contains ( aDriver ) ) { if ( isDriverAllowed ( driver , Reflection . getCallerClass ( ) ) ) { registeredDrivers . remove ( aDriver ) ; } else { throw new SecurityException ( ) ; } } else { println ( "-couldn't-find-driver-to-unload" ) ; } }
  Tgt: drop a driver from the driver managers list
  Pred: construct a new object with the specified orientation of the given object
44 Code: copy <sep> { ObjectOutputStream oos = null ; ObjectInputStream ois = null ; Configuration copyConfiguration = null ; ByteArrayOutputStream bos = new ByteArrayOutputStream ( ) ; try { oos = new ObjectOutputStream ( bos ) ; oos . writeObject ( this ) ; oos . flush ( ) ; ByteArrayInputStream bin = new ByteArrayInputStream ( bos . toByteArray ( ) ) ; ois = new ObjectInputStream ( bin ) ; copyConfiguration = ( Configuration ) ois . readObject ( ) ; } catch ( Exception e ) { throw new DigiDoc4JException ( e ) ; } finally { IOUtils . closeQuietly ( oos ) ; IOUtils . closeQuietly ( ois ) ; IOUtils . closeQuietly ( bos ) ; } return copyConfiguration ; }
  Tgt: clone configuration
  Pred: copy the result of another object to an output stream
45 Code: p Declarators$1 <sep> { Result yyResult ; Node yyValue ; ParseError yyError = ParseError . DUMMY ; yyResult = pDeclarator ( yyStart ) ; yyError = yyResult . select ( yyError ) ; if ( yyResult . hasValue ( ) ) { final Node v$g$1 = yyResult . semanticValue ( ) ; yyResult = pDeclarators$$Star1 ( yyResult . index ) ; yyError = yyResult . select ( yyError ) ; if ( yyResult . hasValue ( ) ) { final Pair < Node > v$g$2 = yyResult . semanticValue ( ) ; yyValue = GNode . createFromPair ( "Declarators" , v$g$1 , v$g$2 ) ; yyValue . setLocation ( location ( yyStart ) ) ; return yyResult . createValue ( yyValue , yyError ) ; } } return yyError ; }
  Tgt: actually parse xtc
  Pred: actually parse xtc
46 Code: close <sep> { try { closeable . close ( ) ; } catch ( IOException e ) { return e ; } return null ; }
  Tgt: close an object, returning any thrown exception
  Pred: safely close a closeable object, like an input stream
47 Code: check Parameter <sep> { final Object obj = map . get ( key ) ; if ( null == obj ) { errorHolder . append ( "Parameter-" + key + "-could-not-be-found-in-settings-map,-or-is-null.-" ) ; return false ; } if ( ! expectedClass . isInstance ( obj ) ) { errorHolder . append ( "Value-for-parameter-" + key + "-is-not-of-the-right-class.-Expected-" + expectedClass . getName ( ) + ",-got-" + obj . getClass ( ) . getName ( ) + ".-" ) ; return false ; } return true ; }
  Tgt: check the presence and the validity of a key in a map, and test it is of the desired class
  Pred: check whether the given string is allowed to be included
48 Code: err <sep> { errorCount ++ ; indent ( indentLevel + 1 ) ; log . print ( message ) ; log . flush ( ) ; if ( ! nothrow ) { throw new RuntimeException ( message ) ; } }
  Tgt: report an error
  Pred: construct an error message
49 Code: send Empty Message Delayed <sep> { Message msg = Message . obtain ( ) ; msg . what = what ; return sendMessageDelayed ( msg , delayMillis ) ; }
  Tgt: send a message containing only the what value, to be delivered after the specified amount of time elapses
  Pred: send the input stream but does not occur
50 Code: key Pressed <sep> { int keyCode = evt . getKeyCode ( ) ; int modifiers = evt . getModifiers ( ) ; if ( keyCode == KeyEvent . VK_CONTROL || keyCode == KeyEvent . VK_SHIFT || keyCode == KeyEvent . VK_ALT || keyCode == KeyEvent . VK_META ) return ; if ( ( modifiers & ~ KeyEvent . SHIFT_MASK ) != 0 || evt . isActionKey ( ) || keyCode == KeyEvent . VK_BACK_SPACE || keyCode == KeyEvent . VK_DELETE || keyCode == KeyEvent . VK_ENTER || keyCode == KeyEvent . VK_TAB || keyCode == KeyEvent . VK_ESCAPE ) { if ( grabAction != null ) { handleGrabAction ( evt ) ; return ; } KeyStroke keyStroke = KeyStroke . getKeyStroke ( keyCode , modifiers ) ; Object o = currentBindings . get ( keyStroke ) ; if ( o == null ) { if ( currentBindings != bindings ) { Toolkit . getDefaultToolkit ( ) . beep ( ) ; repeatCount = 0 ; repeat = false ; evt . consume ( ) ; } currentBindings = bindings ; return ; } else if ( o instanceof ActionListener ) { currentBindings = bindings ; executeAction ( ( ( ActionListener ) o ) , evt . getSource ( ) , null ) ; evt . consume ( ) ; return ; } else if ( o instanceof Hashtable ) { currentBindings = ( Hashtable ) o ; evt . consume ( ) ; return ; } } }
  Tgt: handle a key pressed event
  Pred: utility method takes
51 Code: get <sep> { return stringCollection . get ( code ) ; }
  Tgt: return the string that belongs to the given code
  Pred: return an element at the specified index in the list
52 Code: get Focus Owner <sep> { return ( isFocused ( ) ) ? KeyboardFocusManager . getCurrentKeyboardFocusManager ( ) . getFocusOwner ( ) : null ; }
  Tgt: return the child component of this window that has focus if this window is focused; returns null otherwise
  Pred: return the focus owner
53 Code: alloc <sep> { BigInteger result = new BigInteger ( ) ; if ( nwords > 1 ) result . words = new int [ nwords ] ; return result ; }
  Tgt: allocate a new non shared big integer
  Pred: return the final mean of a dom template
54 Code: equals <sep> { if ( a == a2 ) return true ; if ( a == null || a2 == null ) return false ; int length = a . length ; if ( a2 . length != length ) return false ; for ( int i = 0 ; i < length ; i ++ ) { Object o1 = a [ i ] ; Object o2 = a2 [ i ] ; if ( ! ( o1 == null ? o2 == null : o1 . equals ( o2 ) ) ) return false ; } return true ; }
  Tgt: check if the two specified arrays of objects are equal to one another
  Pred: check if the two specified arrays of objects are equal to one another
55 Code: retrieve Email List <sep> { LOGGER . log ( Level . INFO , "Retrieving-email-list-'" + emailList + "'." ) ; URL retrieveUrl = new URL ( domainUrlBase + "emailList/" + SERVICE_VERSION + "/" + emailList ) ; return emailListService . getEntry ( retrieveUrl , EmailListEntry . class ) ; }
  Tgt: retrieve an email list
  Pred: construct a mutable, linked list for the givenimplementation
56 Code: set Color Buffer <sep> { colorBuffer . clear ( ) ; colorBuffer . put ( par0 ) . put ( par1 ) . put ( par2 ) . put ( par3 ) ; colorBuffer . flip ( ) ; return colorBuffer ; }
  Tgt: update and return color buffer with the rgba values passed as arguments
  Pred: set the string object for the specified double object
57 Code: signal Not Empty <sep> { final ReentrantLock takeLock = this . takeLock ; takeLock . lock ( ) ; try { notEmpty . signal ( ) ; } finally { takeLock . unlock ( ) ; } }
  Tgt: signal a waiting take
  Pred: throw a collection of number files
58 Code: Request Mapping <sep> { logger . info ( "Welcome-home!-The-client-locale-is-{}." , locale ) ; Date date = new Date ( ) ; DateFormat dateFormat = DateFormat . getDateTimeInstance ( DateFormat . LONG , DateFormat . LONG , locale ) ; String formattedDate = dateFormat . format ( date ) ; List < DmSex > list = testService . getDmSexAll ( ) ; model . addAttribute ( "serverTime" , formattedDate ) ; return "home" ; }
  Tgt: simply selects the home view to render by returning its name
  Pred: simply selects the home view to render by returning its name
59 Code: convert Name <sep> { return ( name . indexOf ( WM_EXT ) < 0 ) ? name : name . substring ( 0 , name . indexOf ( WM_EXT ) ) + VM_EXT ; }
  Tgt: simple extension conversion of
  Pred: parse a qualified name string
60 Code: remove <sep> { return factories . remove ( functionURI ) ; }
  Tgt: remove a registered function factory
  Pred: delete a component from this compound name
61 Code: write Back Cache <sep> { try { AccessController . doPrivileged ( new PrivilegedExceptionAction < Void > ( ) { public Void run ( ) throws BackingStoreException { try { if ( ! dir . exists ( ) && ! dir . mkdirs ( ) ) throw new BackingStoreException ( dir + "-create-failed." ) ; try ( FileOutputStream fos = new FileOutputStream ( tmpFile ) ) { XmlSupport . exportMap ( fos , prefsCache ) ; } if ( ! tmpFile . renameTo ( prefsFile ) ) throw new BackingStoreException ( "Can't-rename-" + tmpFile + "-to-" + prefsFile ) ; } catch ( Exception e ) { if ( e instanceof BackingStoreException ) throw ( BackingStoreException ) e ; throw new BackingStoreException ( e ) ; } return null ; } } ) ; } catch ( PrivilegedActionException e ) { throw ( BackingStoreException ) e . getException ( ) ; } }
  Tgt: attempt to write back prefs cache to the backing store
  Pred: extend out
62 Code: compare <sep> { int rc = 0 ; if ( b1 [ s1 ] == 0 && b2 [ s2 ] == 0 ) { rc = mWrappedComp . compare ( b1 , s1 + 1 , l1 - 2 , b2 , s2 + 1 , l2 - 2 ) ; } else { if ( b1 [ s1 ] != 0 && b2 [ s2 ] != 0 ) { rc = b1 [ s1 + 1 ] - b2 [ s2 + 1 ] ; } else if ( b1 [ s1 ] != 0 ) rc = - 1 ; else rc = 1 ; } if ( ! mAsc [ 0 ] ) rc *= - 1 ; return rc ; }
  Tgt: compare two nullable int writables as raw bytes
  Pred: compare a char array of characters
63 Code: find By Parent As List <sep> { log . debug ( "getting-Address-instances-by-userId-" + parentId ) ; Session session = sessionFactory . getCurrentSession ( ) ; Query qry = session . createQuery ( "from-org.openiam.idm.srvc.continfo.dto.Address-a-" + "-where-a.parentId-=-:parentId-and-" + "-a.parentType-=-:parentType" ) ; qry . setString ( "parentId" , parentId ) ; qry . setString ( "parentType" , parentType ) ; List < Address > result = ( List < Address > ) qry . list ( ) ; if ( result == null || result . size ( ) == 0 ) return null ; return result ; }
  Tgt: return a list of address objects for the parent id and parent type combination
  Pred: check if the node is a child of this document
64 Code: process Drm Info <sep> { if ( null == drmInfo || ! drmInfo . isValid ( ) ) { throw new IllegalArgumentException ( "Given-drmInfo-is-invalid/null" ) ; } int result = ERROR_UNKNOWN ; if ( null != mEventHandler ) { Message msg = mEventHandler . obtainMessage ( ACTION_PROCESS_DRM_INFO , drmInfo ) ; result = ( mEventHandler . sendMessage ( msg ) ) ? ERROR_NONE : result ; } return result ; }
  Tgt: execute given drm information based on its type
  Pred: process cookies threads, on target exception
65 Code: get Reference <sep> { return getRequest ( ) == null ? null : getRequest ( ) . getResourceRef ( ) ; }
  Tgt: return the uri reference
  Pred: retrieve the reference reference to the reference object
66 Code: is Valid <sep> { if ( array == null ) { return true ; } int length = Array . getLength ( array ) ; return length >= min && length <= max ; }
  Tgt: check the number of entries in an array
  Pred: check if the string has a valid name
67 Code: get Instance <sep> { if ( transformer == null ) { throw new IllegalArgumentException ( "The-transformer-to-call-must-not-be-null" ) ; } if ( predicate == null ) { throw new IllegalArgumentException ( "The-predicate-to-call-must-not-be-null" ) ; } return new TransformedPredicate < I , O > ( transformer , predicate ) ; }
  Tgt: factory to create the predicate
  Pred: return a new instance of secure random that utilizes thespecified algorithm
68 Code: array Copy From <sep> { System . arraycopy ( a , startingArrayLocation , values , 0 , values . length ) ; return startingArrayLocation + values . length ; }
  Tgt: copy values from an array starting at a particular location into this vector
  Pred: copy the contents of this vector into an array starting at a particular location
69 Code: encode <sep> { final StringBuffer out = new StringBuffer ( s . length ( ) ) ; final ByteArrayOutputStream buf = new ByteArrayOutputStream ( 32 ) ; final OutputStreamWriter writer = new OutputStreamWriter ( buf ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { int c = s . charAt ( i ) ; if ( CHARACHTERS_DONT_NEED_ECNODING . get ( c ) ) { out . append ( ( char ) c ) ; } else { try { writer . write ( c ) ; writer . flush ( ) ; } catch ( IOException e ) { buf . reset ( ) ; continue ; } byte [ ] ba = buf . toByteArray ( ) ; for ( int j = 0 ; j < ba . length ; j ++ ) { out . append ( '%' ) ; char ch = Character . forDigit ( ( ba [ j ] >> 4 ) & 0xF , 16 ) ; if ( Character . isLetter ( ch ) ) { ch -= CHARACTER_CASE_DIFF ; } out . append ( ch ) ; ch = Character . forDigit ( ba [ j ] & 0xF , 16 ) ; if ( Character . isLetter ( ch ) ) { ch -= CHARACTER_CASE_DIFF ; } out . append ( ch ) ; } buf . reset ( ) ; } } return out . toString ( ) ; }
  Tgt: translate a string into x www form urlencoded format
  Pred: encode a given string s in a x www form urlencoded string usingthe specified encoding scheme enc
70 Code: subdivide <sep> { subdivide ( this , left , right ) ; }
  Tgt: subdivide this QuadCurve2D and stores the resulting two subdivided curves into the left and right curve parameters
  Pred: damages the program
71 Code: get And Decrement <sep> { return myValue . getAndDecrement ( ) ; }
  Tgt: subtract one from this reduction variable and return the previous value
  Pred: atomically decrements by one the element at index i
72 Code: get Return <sep> { if ( _return == null ) { _return = new ArrayList < AtomTreePositionDTO > ( ) ; } return this . _return ; }
  Tgt: get the value of the return property
  Pred: get the value of the return property
73 Code: before <sep> { Node node = mNodeMap . get ( anim ) ; if ( node == null ) { node = new Node ( anim ) ; mNodeMap . put ( anim , node ) ; mNodes . add ( node ) ; } Dependency dependency = new Dependency ( mCurrentNode , Dependency . AFTER ) ; node . addDependency ( dependency ) ; return this ; }
  Tgt: set up the given animation to play when the animation supplied in the animator setplay call that created this builder objectends
  Pred: set up the given animation to play when the animation supplied in the animator setplay call that created this builder objectends
74 Code: new Builder <sep> { return new AvroBSPMessageBundle . Builder ( ) ; }
  Tgt: create a new avro bsp message record builder
  Pred: create a new target record builder
75 Code: fire Popup Menu Will Become Invisible <sep> { Object [ ] listeners = listenerList . getListenerList ( ) ; PopupMenuEvent e = null ; for ( int i = listeners . length - 2 ; i >= 0 ; i -= 2 ) { if ( listeners [ i ] == PopupMenuListener . class ) { if ( e == null ) e = new PopupMenuEvent ( this ) ; ( ( PopupMenuListener ) listeners [ i + 1 ] ) . popupMenuWillBecomeInvisible ( e ) ; } } }
  Tgt: notify popup menu listeners that the popup portion of the combo box has become invisible
  Pred: notify all listeners that have registered interest for a given value
76 Code: get Elapsed Nanos <sep> { switch ( status ) { case INITIALIZED : throw new IllegalStateException ( "Timer-has-not-been-started" ) ; case RUNNING : return snapshotTime ? System . nanoTime ( ) - startTimeNanos : - 1 ; default : return stopTimeNanos - startTimeNanos ; } }
  Tgt: return the elapsed time for this task in nanoseconds
  Pred: return the childs in bytes, of the delimiter
77 Code: freeze <sep> { if ( treeSet instanceof TreeSet < ? > ) { treeSet = Collections . unmodifiableSortedSet ( treeSet ) ; } }
  Tgt: prevent further modification of the the artifact set
  Pred: perform the worker
78 Code: store <sep> { buf . put ( m00 ) ; buf . put ( m01 ) ; buf . put ( m02 ) ; buf . put ( m10 ) ; buf . put ( m11 ) ; buf . put ( m12 ) ; buf . put ( m20 ) ; buf . put ( m21 ) ; buf . put ( m22 ) ; return this ; }
  Tgt: store this matrix in a float buffer
  Pred: store the given target string to the specified output stream
79 Code: get Current Stack Frame Size <sep> { return m_variableNames . size ( ) ; }
  Tgt: get the current size of the stack frame
  Pred: return the number of u frames
80 Code: get Instance <sep> { if ( ( provider == null ) || ( provider . length ( ) == 0 ) ) { throw new IllegalArgumentException ( "Provider-is-null-oe-empty" ) ; } Provider impProvider = Security . getProvider ( provider ) ; if ( impProvider == null ) { throw new NoSuchProviderException ( provider ) ; } return getInstance ( algorithm , impProvider ) ; }
  Tgt: create a new trust manager factory instance for the specifiedtrust management algorithm from the specified provider
  Pred: create a new cert store instance from the specified provider withthe specified type and initialized with the specified parameters
81 Code: get A D_ P Instance_ I D <sep> { Integer ii = ( Integer ) get_Value ( "AD_PInstance_ID" ) ; if ( ii == null ) return 0 ; return ii . intValue ( ) ; }
  Tgt: get process instance
  Pred: get system
82 Code: tree Expanded <sep> { getHandler ( ) . treeExpanded ( event ) ; }
  Tgt: call whenever an item in the tree has been expanded
  Pred: tree collapsed node
83 Code: is Managed Class <sep> { return managedClasses . containsKey ( className . replace ( '/' , '.' ) ) ; }
  Tgt: check if a classname os a part of an entity map
  Pred: determine if a class is solaris
84 Code: encode Base64 Chunked <sep> { return encodeBase64 ( binaryData , true ) ; }
  Tgt: encode binary data using the base64 algorithm and chunks the encoded output into 76 character blocks
  Pred: encode binary data using the base64 algorithm but does not chunk the output
85 Code: get Font <sep> { final Resource value = getResource ( key ) ; if ( value instanceof Font ) { return ( Font ) value ; } else { return null ; } }
  Tgt: return the font for the given key
  Pred: return the font
86 Code: get Section <sep> { return questions . get ( i ) . section ; }
  Tgt: return the section for a particular question
  Pred: get the expanded flags
87 Code: get <sep> { synchronized ( lock ) { while ( size == 0 ) lock . wait ( ) ; Object o = elements [ head ] ; elements [ head ] = null ; if ( ++ head == maxSize ) head = 0 ; if ( size == maxSize ) lock . notifyAll ( ) ; size -- ; return o ; } }
  Tgt: get object from queue
  Pred: obtain a state
88 Code: get Declared Prefixes <sep> { return ( declarations == null ) ? EMPTY_ENUMERATION : Collections . enumeration ( declarations ) ; }
  Tgt: return an enumeration of prefixes declared in this context
  Pred: return all of prefixes declared in this context
89 Code: write <sep> { int readCount = 0 ; int inBufferPos = count - filledBufferSum ; int n = in . read ( currentBuffer , inBufferPos , currentBuffer . length - inBufferPos ) ; while ( n != - 1 ) { readCount += n ; inBufferPos += n ; count += n ; if ( inBufferPos == currentBuffer . length ) { needNewBuffer ( currentBuffer . length ) ; inBufferPos = 0 ; } n = in . read ( currentBuffer , inBufferPos , currentBuffer . length - inBufferPos ) ; } return readCount ; }
  Tgt: write the entire contents of the specified input stream to this byte stream
  Pred: write the bytes between the given array to the end of a buffer
90 Code: clear Pipeline <sep> { pipelines = new ArrayList < Pipeline > ( ) ; return this ; }
  Tgt: clear the pipelines set
  Pred: clear all existing queries value
91 Code: flush <sep> { SoftReference s = soft ; if ( s != null ) s . clear ( ) ; soft = null ; }
  Tgt: flush the cached object
  Pred: flush the monitoring of all nodes in the input stream
92 Code: close <sep> { for ( Partition partition : mPartitions ) { Cursor cursor = partition . cursor ; if ( cursor != null && ! cursor . isClosed ( ) ) { cursor . close ( ) ; } } mPartitions . clear ( ) ; invalidate ( ) ; notifyDataSetChanged ( ) ; }
  Tgt: close all cursors and removes all partitions
  Pred: close this cache
93 Code: close <sep> { cache . clear ( ) ; super . close ( ) ; }
  Tgt: close data access controller by clearing the cache first
  Pred: close the stream and immediately afterward closes the referenced socket
94 Code: serialize <sep> { Serializer . serialize ( this , buff , outSyntax ) ; }
  Tgt: format the query
  Pred: serialize an array of string
95 Code: write <sep> { OutputStreamHook hook = ( OutputStreamHook ) out ; ObjectStreamField [ ] osfields = hook . getFieldsNoCopy ( ) ; for ( int i = 0 ; i < osfields . length ; i ++ ) { Object value = fields . get ( osfields [ i ] . getName ( ) ) ; hook . writeField ( osfields [ i ] , value ) ; } }
  Tgt: write the data and fields to the specified object output stream
  Pred: write the string to the specified stream
96 Code: ignorable Whitespace <sep> { if ( documentHandler != null ) documentHandler . ignorableWhitespace ( ch , start , length ) ; }
  Tgt: adapt a SAX2 ignorable whitespace event
  Pred: adapter implementation method; do not call
97 Code: write Attribute <sep> { if ( xmlWriter . getPrefix ( namespace ) == null ) { xmlWriter . writeNamespace ( prefix , namespace ) ; xmlWriter . setPrefix ( prefix , namespace ) ; } xmlWriter . writeAttribute ( namespace , attName , attValue ) ; }
  Tgt: write an attribute with the ns prefix
  Pred: write an attribute with the ns prefix
98 Code: get String <sep> { return getString ( msg , new Object [ ] { arg } ) ; }
  Tgt: retrieve a message which takes one argument
  Pred: get the string associated with an index
99 Code: autoclick <sep> { clickThread = new Thread ( new Runnable ( ) { public void run ( ) { try { robot = new Robot ( ) ; robot . mouseMove ( xcoord , ycoord ) ; while ( running ) { robot . mousePress ( InputEvent . BUTTON1_MASK ) ; robot . mouseRelease ( InputEvent . BUTTON1_MASK ) ; robot . delay ( clickDelay ) ; } } catch ( Exception e2 ) { e2 . printStackTrace ( ) ; } } } ) ; clickThread . start ( ) ; }
  Tgt: move the mouse to the user specified location and left click
  Pred: construct a condition of the screen, conference class
100 Code: do Acquire Interruptibly <sep> { final Node node = addWaiter ( Node . EXCLUSIVE ) ; boolean failed = true ; try { for ( ; ; ) { final Node p = node . predecessor ( ) ; if ( p == head && tryAcquire ( arg ) ) { setHead ( node ) ; p . next = null ; failed = false ; return ; } if ( shouldParkAfterFailedAcquire ( p , node ) && parkAndCheckInterrupt ( ) ) throw new InterruptedException ( ) ; } } finally { if ( failed ) cancelAcquire ( node ) ; } }
  Tgt: acquire in exclusive interruptible mode
  Pred: acquire in shared uninterruptible mode
101 Code: load Walkers <sep> { int stepType ; AxesWalker firstWalker = null ; AxesWalker walker , prevWalker = null ; int analysis = analyze ( compiler , stepOpCodePos , stepIndex ) ; while ( OpCodes . ENDOP != ( stepType = compiler . getOp ( stepOpCodePos ) ) ) { walker = createDefaultWalker ( compiler , stepOpCodePos , lpi , analysis ) ; walker . init ( compiler , stepOpCodePos , stepType ) ; walker . exprSetParent ( lpi ) ; if ( null == firstWalker ) { firstWalker = walker ; } else { prevWalker . setNextWalker ( walker ) ; walker . setPrevWalker ( prevWalker ) ; } prevWalker = walker ; stepOpCodePos = compiler . getNextStepPos ( stepOpCodePos ) ; if ( stepOpCodePos < 0 ) break ; } return firstWalker ; }
  Tgt: this method is for building an array of possible levels where the target element could be found for a match
  Pred: load the schema in the database and loads the old packages
102 Code: to Timestamp <sep> { java . util . Date newDate = toDate ( monthStr , dayStr , yearStr , hourStr , minuteStr , secondStr ) ; if ( newDate != null ) { return new java . sql . Timestamp ( newDate . getTime ( ) ) ; } else { return null ; } }
  Tgt: make a timestamp from separate strings for month, day, year, hour, minute, and second
  Pred: return a list of formatting on the specified calendar
103 Code: remove <sep> { return doRemove ( key , null ) ; }
  Tgt: remove the mapping for the specified key from this map if present
  Pred: remove the
104 Code: start Delete <sep> { Message msg = mWorkerThreadHandler . obtainMessage ( token ) ; msg . arg1 = EVENT_ARG_DELETE ; WorkerArgs args = new WorkerArgs ( ) ; args . handler = this ; args . uri = uri ; args . cookie = cookie ; args . selection = selection ; args . selectionArgs = selectionArgs ; msg . obj = args ; mWorkerThreadHandler . sendMessage ( msg ) ; }
  Tgt: this method begins an asynchronous delete
  Pred: start the background
105 Code: set Column Label <sep> { checkColRange ( columnIndex ) ; if ( label != null ) { colInfo [ columnIndex ] . columnLabel = label ; } else { colInfo [ columnIndex ] . columnLabel = "" ; } }
  Tgt: set the suggested column label for use in printouts and displays, if any, to label
  Pred: set the column of the column
106 Code: get Count <sep> { if ( recursionLevel >= m_counts . size ( ) ) { return 0 ; } else { return m_counts . get ( recursionLevel ) ; } }
  Tgt: get the count at the specified recursion depth
  Pred: get the number of elements registered with the given start
107 Code: show Exception <sep> { final Dialog dialog = new Dialog ( ) ; dialog . setTitle ( ResourceManager . getLabel ( ResourceManager . EXCEPTION ) ) ; final String msg = exception . getMessage ( ) ; final String className = exception . getClass ( ) . getName ( ) ; final boolean noMessage = msg == null || msg . trim ( ) . length ( ) == 0 ; dialog . getMessageArea ( ) . setTitle ( noMessage ? className : msg ) . setText ( noMessage ? "" : className ) . setIcon ( Display . getCurrent ( ) . getSystemImage ( SWT . ICON_ERROR ) ) . setException ( exception ) ; dialog . getFooterArea ( ) . setExpanded ( true ) ; dialog . setButtonType ( OpalDialogType . CLOSE ) ; dialog . show ( ) ; }
  Tgt: display a dialog box with an exception
  Pred: show the exception
108 Code: p Element Value$1 <sep> { Result yyResult ; Node yyValue ; ParseError yyError = ParseError . DUMMY ; yyResult = pExpression ( yyStart ) ; yyError = yyResult . select ( yyError ) ; if ( yyResult . hasValue ( ) ) { yyValue = yyResult . semanticValue ( ) ; return yyResult . createValue ( yyValue , yyError ) ; } yyResult = pAnnotation ( yyStart ) ; yyError = yyResult . select ( yyError ) ; if ( yyResult . hasValue ( ) ) { yyValue = yyResult . semanticValue ( ) ; return yyResult . createValue ( yyValue , yyError ) ; } yyResult = pElementArrayInitializer ( yyStart ) ; yyError = yyResult . select ( yyError ) ; if ( yyResult . hasValue ( ) ) { yyValue = yyResult . semanticValue ( ) ; return yyResult . createValue ( yyValue , yyError ) ; } return yyError ; }
  Tgt: actually parse xtc
  Pred: actually parse xtc
109 Code: generate Report <sep> LOG . debug ( "generateReport()-started" ) ; List transactions = new ArrayList ( ) ; if ( reportErrors != null ) { transactions . addAll ( reportErrors . keySet ( ) ) ; } generateReport ( transactions , reportErrors , reportSummary , runDate , title , fileprefix , destinationDirectory ) ; }
  Tgt: generate transaction report
  Pred: helper report report
110 Code: learn Word <sep> { if ( ! learnedList . contains ( word ) ) { learnedList . add ( word ) ; checker . learnWord ( word ) ; synchronized ( this ) { incorrectWordsCache . remove ( word ) ; correctWordsCache . add ( word ) ; } } }
  Tgt: add a word to the list of correct words
  Pred: this ist tests the substring
111 Code: close <sep> { if ( mIsClosing ) return ; mIsClosing = true ; for ( WeakReference < MenuPresenter > ref : mPresenters ) { final MenuPresenter presenter = ref . get ( ) ; if ( presenter == null ) { mPresenters . remove ( ref ) ; } else { presenter . onCloseMenu ( this , allMenusAreClosing ) ; } } mIsClosing = false ; }
  Tgt: close the visible menu
  Pred: close the visible menu
112 Code: remove Notification Listener <sep> { broadcaster . removeNotificationListener ( listener , filter , handback ) ; }
  Tgt: the wrapped notification broadcaster support object
  Pred: remove the specified item listener so that the cursor listener no longer receives longer events
113 Code: remove Element At <sep> { System . arraycopy ( m_Objects , index + 1 , m_Objects , index , m_Size - index - 1 ) ; m_Size -- ; }
  Tgt: delete an element from this vector
  Pred: remove the specified element into the specified array
114 Code: w <sep> { if ( LOG . WARN >= LOGLEVEL ) Log . w ( tag , String . format ( s , args ) ) ; }
  Tgt: warn log message with printf formatting
  Pred: warn log message with printf formatting
115 Code: get Decoded Length <sep> { if ( encoded . hasArray ( ) ) { int numChars = encoded . limit ( ) - encoded . arrayOffset ( ) - 1 ; if ( numChars <= 0 ) { return 0 ; } else { int numFullBytesInFinalChar = encoded . charAt ( encoded . limit ( ) - 1 ) ; int numEncodedChars = numChars - 1 ; return ( numEncodedChars * 15 + 7 ) / 8 + numFullBytesInFinalChar ; } } else { throw new IllegalArgumentException ( "encoded-argument-must-have-a-backing-array" ) ; } }
  Tgt: return the number of bytes required to decode the given char sequence
  Pred: return the encoded ber bytes of the specified string
116 Code: set Qryrtn Time <sep> { this . qryrtnTime = qryrtnTime == null ? null : qryrtnTime . trim ( ) ; }
  Tgt: this method was generated by my batis generator
  Pred: this method was generated by my batis generator
117 Code: find Element For Type <sep> { synchronized ( this ) { StringBuilder keyb = ( packageName == null ) ? new StringBuilder ( ) : new StringBuilder ( packageName ) ; keyb . append ( "." ) . append ( typeName ) ; String key = keyb . toString ( ) ; IProgramElement cachedValue = typeMap . get ( key ) ; if ( cachedValue != null ) { return cachedValue ; } List < IProgramElement > packageNodes = findMatchingPackages ( packageName ) ; for ( IProgramElement pkg : packageNodes ) { for ( IProgramElement fileNode : pkg . getChildren ( ) ) { IProgramElement cNode = findClassInNodes ( fileNode . getChildren ( ) , typeName , typeName ) ; if ( cNode != null ) { typeMap . put ( key , cNode ) ; return cNode ; } } } } return null ; }
  Tgt: find the entry in the model that represents a particular type
  Pred: find a descriptor using the specified name
118 Code: generate Unique Prefix <sep> { String prefix = NAMESPACE_PREFIX + namespaceSuffix ++ ; while ( nsCtxt . getNamespaceURI ( prefix ) != null ) { prefix = NAMESPACE_PREFIX + namespaceSuffix ++ ; } return prefix ; }
  Tgt: generate a unique namespace prefix that is not in the scope of the namespace context
  Pred: generate the given prefix prefix
119 Code: write Q Name <sep> { java . lang . String namespaceURI = qname . getNamespaceURI ( ) ; if ( namespaceURI != null ) { java . lang . String prefix = xmlWriter . getPrefix ( namespaceURI ) ; if ( prefix == null ) { prefix = generatePrefix ( namespaceURI ) ; xmlWriter . writeNamespace ( prefix , namespaceURI ) ; xmlWriter . setPrefix ( prefix , namespaceURI ) ; } if ( prefix . trim ( ) . length ( ) > 0 ) { xmlWriter . writeCharacters ( prefix + ":" + org . apache . axis2 . databinding . utils . ConverterUtil . convertToString ( qname ) ) ; } else { xmlWriter . writeCharacters ( org . apache . axis2 . databinding . utils . ConverterUtil . convertToString ( qname ) ) ; } } else { xmlWriter . writeCharacters ( org . apache . axis2 . databinding . utils . ConverterUtil . convertToString ( qname ) ) ; } }
  Tgt: handle qnames
  Pred: handle qnames
120 Code: is Visible To User <sep> { return isVisibleToUser ( null ) ; }
  Tgt: compute whether this view is visible to the user
  Pred: check if the user name is in the output window
121 Code: remove Manager <sep> { ObjectName oname = new ObjectName ( name ) ; String type = oname . getKeyProperty ( "type" ) ; String serviceName = oname . getKeyProperty ( "service" ) ; Server server = ServerFactory . getServer ( ) ; Service service = server . findService ( serviceName ) ; Engine engine = ( Engine ) service . getContainer ( ) ; String hostName = oname . getKeyProperty ( "host" ) ; if ( ( type != null ) && ( type . equals ( "Manager" ) ) ) { String contextName = getPathStr ( oname . getKeyProperty ( "path" ) ) ; Host host = ( Host ) engine . findChild ( hostName ) ; Context context = ( Context ) host . findChild ( contextName ) ; context . setManager ( null ) ; } else if ( ( type != null ) && ( type . equals ( "DefaultManager" ) ) ) { DefaultContext defaultContext = null ; if ( hostName == null ) { defaultContext = engine . getDefaultContext ( ) ; } else { Host host = ( Host ) engine . findChild ( hostName ) ; defaultContext = host . getDefaultContext ( ) ; } if ( defaultContext != null ) { defaultContext . setManager ( null ) ; } } }
  Tgt: remove an existing manager
  Pred: a job which is not a hole
122 Code: initialize <sep> { if ( ! mRootDirectory . exists ( ) ) { if ( ! mRootDirectory . mkdirs ( ) ) { VolleyLog . e ( "Unable-to-create-cache-dir-%s" , mRootDirectory . getAbsolutePath ( ) ) ; } return ; } File [ ] files = mRootDirectory . listFiles ( ) ; if ( files == null ) { return ; } for ( File file : files ) { FileInputStream fis = null ; try { fis = new FileInputStream ( file ) ; CacheHeader entry = CacheHeader . readHeader ( fis ) ; entry . size = file . length ( ) ; putEntry ( entry . key , entry ) ; } catch ( IOException e ) { if ( file != null ) { file . delete ( ) ; } } finally { try { if ( fis != null ) { fis . close ( ) ; } } catch ( IOException ignored ) { } } } }
  Tgt: initialize the disk based cache by scanning for all files currently in the specified root directory
  Pred: initialize the disk based cache by scanning for all files currently in the specified root directory
123 Code: colocar Panel <sep> { jPanel . removeAll ( ) ; javax . swing . GroupLayout jPanelLayout = new javax . swing . GroupLayout ( jPanel ) ; jPanel . setLayout ( jPanelLayout ) ; jPanelLayout . setHorizontalGroup ( jPanelLayout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addComponent ( panel , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , Short . MAX_VALUE ) ) ; jPanelLayout . setVerticalGroup ( jPanelLayout . createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) . addComponent ( panel , javax . swing . GroupLayout . DEFAULT_SIZE , javax . swing . GroupLayout . DEFAULT_SIZE , Short . MAX_VALUE ) ) ; }
  Tgt: funcao que faz retornar para a tela normal de batalha
  Pred: erzeugt das panel
124 Code: get Bytes <sep> { byte [ ] buf = null ; if ( bb . hasArray ( ) ) { byte [ ] tmp = bb . array ( ) ; if ( ( tmp . length == bb . capacity ( ) ) && ( tmp . length == bb . remaining ( ) ) ) { buf = tmp ; bb . position ( bb . limit ( ) ) ; } } if ( buf == null ) { buf = new byte [ bb . remaining ( ) ] ; bb . get ( buf ) ; } return buf ; }
  Tgt: return a byte array from the remaining bytes in this byte buffer
  Pred: put a bunch of writables as bytes all into the one byte array
125 Code: args To Expression <sep> { StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < args . length ; i ++ ) builder . append ( args [ i ] ) ; return builder . toString ( ) ; }
  Tgt: convert arguments to mathematical expression
  Pred: convert to a point
126 Code: get Bytes <sep> { for ( int i = 0 ; embedded_jars != null && i < embedded_jars . size ( ) ; i ++ ) { String libjar_name = ( String ) embedded_jars . get ( i ) ; InputStream in = getJarAsStream ( libjar_name ) ; byte [ ] bytes = getBytes ( in , resource ) ; if ( bytes != null ) { return bytes ; } } return null ; }
  Tgt: access the jars file one by one , then for each one create a zip input stream and check to see whether there is any entry eith given name
  Pred: return a string object to the last value
127 Code: get Connection Count <sep> { return connections . size ( ) ; }
  Tgt: return total number of connections in the pool
  Pred: return total number of connections in the pool
128 Code: find Stylesheet <sep> { if ( root == null ) return null ; if ( root instanceof Stylesheet ) { String id = root . getAttribute ( "id" ) ; if ( id . equals ( href ) ) return root ; } Vector children = root . getContents ( ) ; if ( children != null ) { final int count = children . size ( ) ; for ( int i = 0 ; i < count ; i ++ ) { SyntaxTreeNode child = ( SyntaxTreeNode ) children . elementAt ( i ) ; SyntaxTreeNode node = findStylesheet ( child , href ) ; if ( node != null ) return node ; } } return null ; }
  Tgt: find a stylesheet element with a specific id attribute value
  Pred: find a type, find and checks for the given variable
129 Code: uninstall U I <sep> { Iterator iterator = uis . iterator ( ) ; while ( iterator . hasNext ( ) ) { ComponentUI ui = ( ComponentUI ) iterator . next ( ) ; ui . uninstallUI ( c ) ; } }
  Tgt: call the component u iuninstall ui method for allthe ui delegates managed by this multi list ui
  Pred: call the component u iuninstall ui method for all the ui delegates managed by this multi popup menu ui
130 Code: add Rule <sep> { rules . add ( rule ) ; NonTerm lhs = rule . getLHS ( ) ; List < Rule > lhsRules = ruleMap . get ( lhs ) ; if ( lhsRules == null ) { ruleMap . put ( lhs , lhsRules = new ArrayList < > ( ) ) ; nonTermMap . put ( lhs . getName ( ) , lhs ) ; } lhsRules . add ( rule ) ; for ( Symbol symbol : rule . getRHS ( ) ) { if ( symbol instanceof Term ) { Term term = ( Term ) symbol ; terminals . add ( term ) ; int tokenType = term . getTokenType ( ) ; if ( tokenType != 0 ) { while ( termList . size ( ) <= tokenType ) { termList . add ( null ) ; } Term oldTerm = termList . set ( tokenType , term ) ; assert oldTerm == null || oldTerm . equals ( term ) : String . format ( "Duplicate-token-'%s'-and-'%s'-with-type-%d" , oldTerm , term , tokenType ) ; } } } }
  Tgt: add a pre constructed rule to this grammar
  Pred: add an actual rule
131 Code: Get Field Impl <sep> { this . desc = desc ; primVals = new byte [ desc . getPrimDataSize ( ) ] ; objVals = new Object [ desc . getNumObjFields ( ) ] ; objHandles = new int [ objVals . length ] ; }
  Tgt: create get field impl object for reading fields defined in given class descriptor
  Pred: this method creates the specified field field to a action
132 Code: attach <sep> { for ( Simulation . Node node : nodes ) { if ( panelMap . containsKey ( nodes ) ) continue ; MonitorPanel p = AvroraGui . instance . createMonitorPanel ( monitorName + "---" + node . id ) ; SingleNodePanel snp = newPanel ( node , p ) ; panelMap . put ( node , snp ) ; node . addGuiMonitor ( this ) ; } }
  Tgt: this actually informs our data structure that the list of nodes passed to this function want this monitor
  Pred: let the regular multimap i
133 Code: pow <sep> { if ( exp < 0 ) { throw new ArithmeticException ( "exp-<-0:-" + exp ) ; } return new BigInteger ( BigInt . exp ( getBigInt ( ) , exp ) ) ; }
  Tgt: return a big integer whose value is pow
  Pred: return a non fatal based on the supplied version of the arg
134 Code: add Exceptions <sep> { for ( Iterator iter = exceptionList . iterator ( ) ; iter . hasNext ( ) ; ) { addException ( ( Date ) iter . next ( ) ) ; } }
  Tgt: add a list of dates as segment exceptions
  Pred: add a new pair to the list of deployed snippet class
135 Code: get Photo Bytes <sep> { ByteArrayOutputStream buffer = new ByteArrayOutputStream ( ) ; try { int bytesRead = 0 ; long totalBytesRead = 0 ; byte [ ] data = new byte [ 8192 ] ; InputStream in = getPathFromUri ( filename ) ; while ( ( bytesRead = in . read ( data , 0 , data . length ) ) != - 1 && totalBytesRead <= MAX_PHOTO_SIZE ) { buffer . write ( data , 0 , bytesRead ) ; totalBytesRead += bytesRead ; } in . close ( ) ; buffer . flush ( ) ; } catch ( FileNotFoundException e ) { Log . e ( LOG_TAG , e . getMessage ( ) , e ) ; } catch ( IOException e ) { Log . e ( LOG_TAG , e . getMessage ( ) , e ) ; } return buffer . toByteArray ( ) ; }
  Tgt: get the raw bytes from the supplied filename
  Pred: get the raw bytes from the supplied filename
136 Code: to String <sep> { return ReflectionToStringBuilder . reflectionToString ( this ) ; }
  Tgt: generic to string implementation
  Pred: return a string representation of this Chromosome, useful for debugging purposes
137 Code: add Enable Control <sep> { JCheckBox enableControl = new JCheckBox ( "Enable-" + text ) ; enableControl . setBounds ( 10 , offset , 200 , 20 ) ; enableControl . addItemListener ( listener ) ; add ( enableControl ) ; controlToValueName . put ( enableControl , text ) ; valueNameToControl . put ( text , enableControl ) ; offset += 25 ; }
  Tgt: add a control for enablement
  Pred: add the specified action to the authorizing process
138 Code: get T8 <sep> { if ( t8 == null ) { t8 = new TextField ( ) ; t8 . setBounds ( new Rectangle ( 330 , 70 , 40 , 25 ) ) ; } return t8 ; }
  Tgt: this method initializes t8
  Pred: this method initializes b
139 Code: get File Extension <sep> { int fsIndex = getLastSeparatorIndex ( path ) ; int index = path . lastIndexOf ( '.' ) ; if ( index == - 1 || index < fsIndex ) return "" ; else return path . substring ( index ) ; }
  Tgt: return the extension of the specified filename, starting with the last dot
  Pred: get the file of a characters
140 Code: add Point <sep> { if ( Float . isNaN ( value ) || Float . isInfinite ( value ) ) { throw new IllegalArgumentException ( "value-is-NaN-or-Infinite:-" + value + "-for-metric=" + metric + "-timestamp=" + timestamp ) ; } final short flags = Const . FLAG_FLOAT | 0x3 ; return addPointInternal ( metric , timestamp , Bytes . fromInt ( Float . floatToRawIntBits ( value ) ) , tags , flags ) ; }
  Tgt: add a single floating point value data point in the tsdb
  Pred: add a point to the polygon
141 Code: get First <sep> { AtomicReferenceArray < ReferenceEntry < K , V >> table = this . table ; return table . get ( hash & ( table . length ( ) - 1 ) ) ; }
  Tgt: return first entry of bin for given hash
  Pred: return list of first arrays of elements
142 Code: get Ontology Access <sep> { return ontologies . get ( ontologyID ) ; }
  Tgt: return the ontology for the specified id
  Pred: retrieve a collection of goodness accounts
143 Code: get Security Context <sep> { return AccessController . getContext ( ) ; }
  Tgt: return an object which encapsulates the security state of the current point in the execution
  Pred: return the topmost context in this table
144 Code: save File <sep> { String path = ( new File ( "" ) ) . getPath ( ) ; File file = new File ( path + "/" + filename ) ; FileWriter output = null ; try { output = new FileWriter ( file ) ; output . write ( stringBuffer . toString ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } finally { try { output . close ( ) ; } catch ( IOException e ) { } } }
  Tgt: save the string buffer into a file
  Pred: call when a file selects save
145 Code: problems Size <sep> { return problems . size ( ) ; }
  Tgt: return the current number of problems that were registered during validation
  Pred: return the number of contributions in this keystore
146 Code: clone <sep> { return new MultiMap < K , V > ( this ) ; }
  Tgt: create a copy of the map that contains the exact same key and value set
  Pred: create a new date of the same class as this object
147 Code: size <sep> { return questions . size ( ) ; }
  Tgt: return the number of questions in vote chart
  Pred: return the number of elements value pairs in this object
148 Code: on Window Focus Changed <sep> { if ( aHasFocus ) { View lContent = mActivity . getWindow ( ) . findViewById ( Window . ID_ANDROID_CONTENT ) ; mScreenWidth = lContent . getWidth ( ) ; mScreenHeight = lContent . getHeight ( ) ; } }
  Tgt: call when activity window focus changes
  Pred: call from the window down to the window window listener
149 Code: get Grip Axes <sep> { double minX = Double . MAX_VALUE ; double maxX = Double . MIN_VALUE ; double minY = Double . MAX_VALUE ; double maxY = Double . MIN_VALUE ; for ( double [ ] p : points ) { minX = Math . min ( minX , p [ 0 ] ) ; maxX = Math . max ( maxX , p [ 0 ] ) ; minY = Math . min ( minY , p [ 1 ] ) ; maxY = Math . max ( maxY , p [ 1 ] ) ; } double equalityThresh = 0.01 ; double dx = maxX - minX ; double dy = maxY - minY ; if ( Math . abs ( dx - dy ) < equalityThresh ) { return new double [ ] [ ] { { 1.0 , 0 } , { 0 , 1.0 } } ; } else if ( dx > dy ) { return new double [ ] [ ] { { 1.0 , 0 } , { 0 , 1.0 } } ; } else { return new double [ ] [ ] { { 0 , 1.0 } , { 1.0 , 0 } } ; } }
  Tgt: return the axis aligned vectors in the major and minor directions
  Pred: return the rank of a book array using the specified period
150 Code: draw <sep> { if ( this . width <= 0 ) return ; if ( this . height <= 0 ) return ; if ( color == null ) color = new Color ( 0 , 0 , 0 ) ; Paint oldPaint = g . getPaint ( ) ; g . setPaint ( color ) ; g . draw ( new Rectangle2D . Double ( this . pinhole . x - this . width / 2 , this . pinhole . y - this . height / 2 , this . width , this . height ) ) ; g . setPaint ( oldPaint ) ; }
  Tgt: draw this image in the provided Graphics2D context
  Pred: draw the current thread
151 Code: is Leap Year <sep> { return Math . floorMod ( prolepticYear , 4 ) == 3 ; }
  Tgt: check if the specified year is a leap year
  Pred: return whether the specified year represents a leap year
152 Code: state Changed <sep> { ftf . setValue ( spinner . getValue ( ) ) ; }
  Tgt: receive notification of changes in the state of the j spinnerthat the editor belongs to the content of the text field is updated accordingly
  Pred: asynchronous this view for changed
153 Code: elements <sep> { return perms . elements ( ) ; }
  Tgt: return an enumeration of the permissions in the receiver
  Pred: return an enumeration of all the permission objects in the container
154 Code: ensure Capacity <sep> { if ( capacity > buffer . length ) { final char [ ] old = buffer ; buffer = new char [ capacity * 2 ] ; System . arraycopy ( old , 0 , buffer , 0 , size ) ; } return this ; }
  Tgt: check the capacity and ensures that it is at least the size specified
  Pred: ensure that this cursor has enough capacity
155 Code: send Traversal Request Locked <sep> { mHandler . post ( new Runnable ( ) { @ Override public void run ( ) { mListener . onTraversalRequested ( ) ; } } ) ; }
  Tgt: send a request to perform traversals
  Pred: send a request to perform traversals
156 Code: mouse Entered <sep> { Component source = ( Component ) e . getSource ( ) ; if ( source . getParent ( ) instanceof MenuElement ) { MenuSelectionManager manager = MenuSelectionManager . defaultManager ( ) ; manager . setSelectedPath ( getPath ( ) ) ; manager . processMouseEvent ( e ) ; } }
  Tgt: this method is called when mouse enters menu item
  Pred: mouse from the mouse window
157 Code: getstc Lbl Employee Id <sep> { if ( ivjstcLblEmployeeId == null ) { try { ivjstcLblEmployeeId = new JLabel ( ) ; ivjstcLblEmployeeId . setName ( "stcLblEmployeeId" ) ; ivjstcLblEmployeeId . setText ( EMP_ID ) ; ivjstcLblEmployeeId . setMaximumSize ( new Dimension ( 71 , 14 ) ) ; ivjstcLblEmployeeId . setMinimumSize ( new Dimension ( 71 , 14 ) ) ; ivjstcLblEmployeeId . setBounds ( 33 , 8 , 83 , 18 ) ; } catch ( Throwable aeIVJEx ) { handleException ( aeIVJEx ) ; } } return ivjstcLblEmployeeId ; }
  Tgt: return the stc lbl employee id property value
  Pred: return the appropriate proxy value for the given preference identity id
158 Code: write To <sep> { DataOutputStream dos = new DataOutputStream ( os ) ; dos . writeInt ( N ) ; dos . writeInt ( q ) ; dos . writeInt ( d ) ; dos . writeInt ( d1 ) ; dos . writeInt ( d2 ) ; dos . writeInt ( d3 ) ; dos . writeInt ( B ) ; dos . writeDouble ( beta ) ; dos . writeDouble ( normBound ) ; dos . writeInt ( signFailTolerance ) ; dos . writeInt ( bitsF ) ; dos . writeUTF ( hashAlg . getAlgorithmName ( ) ) ; }
  Tgt: write the parameter set to an output stream
  Pred: serialize the given object to the specified stream
159 Code: complement Of <sep> checkNotNull ( collection ) ; return ( collection instanceof EnumSet ) ? EnumSet . complementOf ( ( EnumSet < E > ) collection ) : makeComplementByHand ( collection , type ) ; }
  Tgt: create an enum set consisting of all enum values that are not inthe specified collection
  Pred: return an observable which emits the results of a given combiner function that is bigger
160 Code: synthesize To File <sep> { ArrayList < String > speakingParams = new ArrayList < String > ( ) ; if ( params != null ) { speakingParams = new ArrayList < String > ( Arrays . asList ( params ) ) ; } boolean success = mSelf . synthesizeToFile ( "DEPRECATED" , text , speakingParams , filename ) ; if ( success ) { deprecatedKeepBlockingFlag = true ; while ( deprecatedKeepBlockingFlag ) try { Thread . sleep ( 500 ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } } return success ; }
  Tgt: speak the given text using the specified queueing mode and parameters
  Pred: take a file to a file
161 Code: remove Non Space White Space <sep> { return string . replaceAll ( "[|t|r|n|f]" , "" ) ; }
  Tgt: return a new string with all non space whitespace removed
  Pred: find the index to the position of the given string
162 Code: state Changed <sep> { stateChange . release ( ) ; }
  Tgt: this should be called whenever state has changed that might cause the agent to do something
  Pred: ajoute when a specific event has changed
163 Code: dispatch <sep> { try { appContext = AppContext . getAppContext ( ) ; if ( getFirst ( ) != this ) { if ( EventQueue . isDispatchThread ( ) ) { EventDispatchThread edt = ( EventDispatchThread ) Thread . currentThread ( ) ; edt . pumpEvents ( SentEvent . ID , new Conditional ( ) { public boolean evaluate ( ) { return ! SequencedEvent . this . isFirstOrDisposed ( ) ; } } ) ; } else { while ( ! isFirstOrDisposed ( ) ) { synchronized ( SequencedEvent . class ) { try { SequencedEvent . class . wait ( 1000 ) ; } catch ( InterruptedException e ) { break ; } } } } } if ( ! disposed ) { Toolkit . getEventQueue ( ) . dispatchEvent ( nested ) ; } } finally { dispose ( ) ; } }
  Tgt: dispatch the nested event after all previous nested events have been dispatched or disposed
  Pred: dispatch a packet from this menu
164 Code: get Array Component Type <sep> { if ( type instanceof Class < ? > ) { Class < ? > clazz = ( Class < ? > ) type ; return clazz . isArray ( ) ? clazz . getComponentType ( ) : null ; } if ( type instanceof GenericArrayType ) { return ( ( GenericArrayType ) type ) . getGenericComponentType ( ) ; } return null ; }
  Tgt: get the array component type of type
  Pred: return the object type for the given component
165 Code: is Error I D <sep> { MediaEntry cur = head ; while ( cur != null ) { if ( cur . getID ( ) == id && ( cur . getStatus ( false , true ) & ERRORED ) != 0 ) { return true ; } cur = cur . next ; } return false ; }
  Tgt: check the error status of all of the images tracked by this media tracker with the specified identifier
  Pred: check if the filename is a error name
166 Code: cancel Long Press <sep> { removeLongPressCallback ( ) ; removeTapCallback ( ) ; }
  Tgt: cancel a pending long press
  Pred: construct a new animation
167 Code: stringify Exception <sep> { StringWriter stm = new StringWriter ( ) ; PrintWriter wrt = new PrintWriter ( stm ) ; e . printStackTrace ( wrt ) ; wrt . close ( ) ; return stm . toString ( ) ; }
  Tgt: make a string representation of the exception
  Pred: convert a json vector into an exception
168 Code: get Call Id <sep> { try { int index = name . indexOf ( "//" ) ; int firstIndex = name . indexOf ( "/" , index + 2 ) ; return name . substring ( firstIndex + 1 ) ; } catch ( Exception e ) { return name ; } }
  Tgt: get the call identifier for a given trace session
  Pred: return the id of the given class id
169 Code: remove Bookmarked Conference <sep> { bookmarkedConferences . remove ( bookmarkedConference ) ; }
  Tgt: remove a bookmarked conference
  Pred: remove a bookmarked bookmarked level
170 Code: rename Type As Type <sep> { if ( type == null ) { return null ; } if ( type . getSort ( ) == Type . OBJECT ) { String in = type . getInternalName ( ) ; String newIn = renameInternalType ( in ) ; if ( newIn != in ) { return Type . getType ( "L" + newIn + ";" ) ; } } else if ( type . getSort ( ) == Type . ARRAY ) { StringBuilder sb = new StringBuilder ( ) ; for ( int n = type . getDimensions ( ) ; n > 0 ; n -- ) { sb . append ( '[' ) ; } sb . append ( renameType ( type . getElementType ( ) ) ) ; return Type . getType ( sb . toString ( ) ) ; } return type ; }
  Tgt: rename an object type, e
  Pred: make a string into a type
171 Code: get Draw Area Left <sep> { return Math . round ( mViewArea . left ) ; }
  Tgt: return the position of the left edge of the view area content is drawn in
  Pred: return the text to be used
172 Code: get Constraint Path <sep> { if ( constraintPath == null ) { constraintPath = new HashSet ( ) ; } else { constraintPath . clear ( ) ; } return constraintPath ; }
  Tgt: for cascade operations
  Pred: return the path associated with the drop
173 Code: main <sep> { System . out . println ( "dyn4j-v" + Version . getVersion ( ) ) ; }
  Tgt: main class to print the version to the console
  Pred: for the input format
174 Code: get Query <sep> { return queries2 . get ( queryUuid ) ; }
  Tgt: get a running query by internal query id
  Pred: return the query query for the given query
175 Code: get Encryption Type <sep> { lock . lock ( ) ; try { if ( keyCrypter == null ) { return EncryptionType . UNENCRYPTED ; } else { return keyCrypter . getUnderstoodEncryptionType ( ) ; } } finally { lock . unlock ( ) ; } }
  Tgt: get the type of encryption used for this wallet
  Pred: get the buffer type for the given class
176 Code: get Class Name <sep> { int i = classname . lastIndexOf ( "." ) ; if ( i == - 1 ) { return classname . toLowerCase ( ) ; } else { return classname . substring ( i + 1 , classname . length ( ) ) . toLowerCase ( ) ; } }
  Tgt: internal utility to get the name of the class without the package name
  Pred: return the class name of the property
177 Code: remove All <sep> { mParts . clear ( ) ; }
  Tgt: remove all of the parts
  Pred: remove all of the parts
178 Code: gl Get Object Ptr Label <sep> { if ( LWJGLUtil . CHECKS ) if ( length != null ) checkBuffer ( length , 1 ) ; nglGetObjectPtrLabel ( ptr , label . remaining ( ) , memAddressSafe ( length ) , memAddress ( label ) ) ; }
  Tgt: alternative version of: gl get object ptr label get object ptr label
  Pred: create a new instance of a json object
179 Code: clone <sep> { CharArrayIterator c = new CharArrayIterator ( chars , begin ) ; c . pos = this . pos ; return c ; }
  Tgt: create a copy of this iterator
  Pred: clone the snmp variable
180 Code: type Index From Field Index <sep> { checkBounds ( fieldIndex , tableOfContents . fieldIds . size ) ; int position = tableOfContents . fieldIds . off + ( SizeOf . MEMBER_ID_ITEM * fieldIndex ) ; position += SizeOf . USHORT ; return data . getShort ( position ) & 0xFFFF ; }
  Tgt: look up a field id type index from a field index
  Pred: return one index with the index of the given segment
181 Code: to Object Map <sep> { Map < String , CmsProperty > result = new LinkedHashMap < String , CmsProperty > ( ) ; for ( CmsProperty property : properties ) { result . put ( property . getName ( ) , property ) ; } return result ; }
  Tgt: store a collection of properties in a map, with the property names as keys
  Pred: implement wrapper representation
182 Code: get Object Id <sep> { return String . format ( "id:%s:%ss:%s" , provider , objectType , objectId ) ; }
  Tgt: get a formatted object id
  Pred: return a new object object for the given class id
183 Code: get Screen Size <sep> { return Toolkit . getDefaultToolkit ( ) . getScreenSize ( ) ; }
  Tgt: return the screens size in pixels
  Pred: return the current size of the current location
184 Code: set Text Area <sep> { if ( l == null ) { l = new Listener ( ) ; } if ( this . textArea != null ) { l . uninstall ( textArea ) ; } super . setTextArea ( textArea ) ; if ( textArea != null ) { l . install ( textArea ) ; updateCellHeights ( ) ; updateCellWidths ( ) ; } }
  Tgt: set the text area being displayed
  Pred: set the gregorian text height, and add to text
185 Code: parse Math M L Document String <sep> { ConstraintUtilities . ensureNotNull ( mathmlDocument , "mathmlDocument" ) ; return XMLUtilities . createNSAwareDocumentBuilder ( ) . parse ( new InputSource ( new StringReader ( mathmlDocument ) ) ) ; }
  Tgt: parse a math ml document specified as a utf 8 encoded string
  Pred: parse a string following a datetime
186 Code: schedule Fade <sep> { mHandler . sendMessageDelayed ( mHandler . obtainMessage ( MSG_FADE ) , FADE_DELAY ) ; }
  Tgt: schedule a fade message for later
  Pred: schedule a runnable task to be executed after the given delay
187 Code: sin <sep> { return new Complex ( Math . sin ( re ) * Math . cosh ( im ) , Math . cos ( re ) * Math . sinh ( im ) ) ; }
  Tgt: return the complex sine of this complex number
  Pred: this method was called by my batis generator
188 Code: mark Optional <sep> { return type . annotate ( ) . attribute ( Constants . ATT_OPTIONAL ) ; }
  Tgt: mark the specified type as optional
  Pred: show the slider on
189 Code: get Panels <sep> { return wavePanels . iterator ( ) ; }
  Tgt: return an iterator over the panel in this window
  Pred: return the unmodifiable version of this object
190 Code: managed Commit Updates <sep> { synchronized ( mManagedCursors ) { final int N = mManagedCursors . size ( ) ; for ( int i = 0 ; i < N ; i ++ ) { ManagedCursor mc = mManagedCursors . get ( i ) ; if ( mc . mCursor == c ) { c . commitUpdates ( ) ; mc . mUpdated = true ; return ; } } throw new RuntimeException ( "Cursor-" + c + "-is-not-currently-managed" ) ; } }
  Tgt: wrapper around cursorcommit updates that takes care of notingthat the cursor needs to be requeried
  Pred: remove all document from the given diagram
191 Code: reset <sep> { map . clear ( ) ; members = EMPTY_MEMBERS ; }
  Tgt: reset the membership and start over fresh
  Pred: reset the membership and start over fresh
192 Code: now Date String <sep> { SimpleDateFormat df = new SimpleDateFormat ( format ) ; return df . format ( new Date ( ) ) ; }
  Tgt: return a string formatted as format
  Pred: construct a date object from a date object
193 Code: enumerate Requests <sep> { Vector newVector = new Vector ( 0 ) ; if ( m_evaluateThread != null ) { newVector . addElement ( "Stop" ) ; } return newVector . elements ( ) ; }
  Tgt: return an enumeration of user activated requests for this bean
  Pred: return an enumeration of requests that can be made by the user
194 Code: set Rendering Hints <sep> { if ( hints == null ) { throw new NullPointerException ( "Null-'hints'-argument." ) ; } this . hints = new RenderingHints ( hints ) ; }
  Tgt: replace the existing hints with those contained in the specified map
  Pred: set the number of algorithms objects
195 Code: parse To Node <sep> { try { Object xowner = xctxt . getOwnerObject ( ) ; DTM dtm ; if ( null != xowner && xowner instanceof org . apache . xml . dtm . DTMWSFilter ) { dtm = xctxt . getDTM ( source , false , ( org . apache . xml . dtm . DTMWSFilter ) xowner , false , true ) ; } else { dtm = xctxt . getDTM ( source , false , null , false , true ) ; } return dtm . getDocument ( ) ; } catch ( Exception e ) { throw new TransformerException ( e . getMessage ( ) , locator , e ) ; } }
  Tgt: create a dom source tree from the input source
  Pred: parse a node
196 Code: Caller Info Async Query Handler <sep> { super ( context . getContentResolver ( ) ) ; }
  Tgt: asynchronous query handler class for the contact callerinfo object
  Pred: asynchronous query handler class for the contact callerinfo object
197 Code: create Document Fragment <sep> { try { DocumentBuilderFactory dbf = DocumentBuilderFactory . newInstance ( ) ; dbf . setNamespaceAware ( true ) ; DocumentBuilder db = dbf . newDocumentBuilder ( ) ; Document doc = db . newDocument ( ) ; Node df = doc . createDocumentFragment ( ) ; return getDTM ( new DOMSource ( df ) , true , null , false , false ) ; } catch ( Exception e ) { throw new DTMException ( e ) ; } }
  Tgt: method create document fragment needsdoc @return
  Pred: create a new text group instance
198 Code: set Action <sep> { this . action = ( action == null ? null : new ShareOpenGraphAction . Builder ( ) . readFrom ( action ) . build ( ) ) ; return this ; }
  Tgt: set the open graph action for the content
  Pred: set the actions to use for this component
199 Code: get Xdr Encoding Stream <sep> { throw ( new Error ( "OncRpcTcpServerTransport.getXdrEncodingStream()-is-abstract-" + "and-can-not-be-called." ) ) ; }
  Tgt: do not call
  Pred: return the previous data for the specified stream
200 Code: on Click <sep> { switch ( v . getId ( ) ) { case R . id . btnbildurl : mAddLocAppLogic . changeToFilechooser ( ) ; break ; case R . id . btnAddLocationCoordination : mAddLocAppLogic . setCoordination ( ) ; break ; case R . id . btnAnlegen : mAddLocAppLogic . setOrt ( ) ; break ; } }
  Tgt: call the appropriate method when an event occurs
  Pred: call corresponding to this view is called
201 Code: find View With Tag <sep> { if ( tag == null ) { return null ; } return findViewWithTagTraversal ( tag ) ; }
  Tgt: look for a child view with the given tag
  Pred: look if a view has been set
202 Code: is Command Key <sep> { return cmdKeys . contains ( key ) ; }
  Tgt: check if given key is a command key
  Pred: check if the given string is already included
203 Code: is Focus Cycle Root <sep> { if ( isFocusCycleRoot ( ) && container == this ) { return true ; } else { return super . isFocusCycleRoot ( container ) ; } }
  Tgt: return whether the specified container is the focus cycle root of this containers focus traversal cycle
  Pred: return whether the parent window is considered to be removed
204 Code: put <sep> { Arrays . checkOffsetAndCount ( src . length , srcOffset , doubleCount ) ; if ( doubleCount > remaining ( ) ) { throw new BufferOverflowException ( ) ; } for ( int i = srcOffset ; i < srcOffset + doubleCount ; ++ i ) { put ( src [ i ] ) ; } return this ; }
  Tgt: write doubles from the given double array, starting from the specified offset, to the current position and increases the position by the number of doubles written
  Pred: write shorts from the given int array, starting from the specified offset, to the current position and increases the position by the number of shorts written
205 Code: set Origin Flag <sep> { this . originFlag = originFlag == null ? null : originFlag . trim ( ) ; }
  Tgt: this method was generated by my batis generator
  Pred: this method was generated by my batis generator
206 Code: parse <sep> { Matcher typeSubtype = TYPE_SUBTYPE . matcher ( string ) ; if ( ! typeSubtype . lookingAt ( ) ) return null ; String type = typeSubtype . group ( 1 ) . toLowerCase ( Locale . US ) ; String subtype = typeSubtype . group ( 2 ) . toLowerCase ( Locale . US ) ; String charset = null ; Matcher parameter = PARAMETER . matcher ( string ) ; for ( int s = typeSubtype . end ( ) ; s < string . length ( ) ; s = parameter . end ( ) ) { parameter . region ( s , string . length ( ) ) ; if ( ! parameter . lookingAt ( ) ) return null ; String name = parameter . group ( 1 ) ; if ( name == null || ! name . equalsIgnoreCase ( "charset" ) ) continue ; if ( charset != null ) throw new IllegalArgumentException ( "Multiple-charsets:-" + string ) ; charset = parameter . group ( 2 ) != null ? parameter . group ( 2 ) : parameter . group ( 3 ) ; } return new MediaType ( string , type , subtype , charset ) ; }
  Tgt: return a media type for string, or null if string is not awell formed media type
  Pred: return a media type for string, or null if string is not awell formed media type
207 Code: check URL <sep> { if ( url . indexOf ( '?' ) > - 1 ) { return true ; } return false ; }
  Tgt: check the string to make sure it has path file?name=value format
  Pred: check to see if a url is a directory
208 Code: is Varargs <sep> { return testAllFlags ( VARARGS ) && isInvocable ( ) ; }
  Tgt: query the modifier flags of this member; returns false if the member is not a method
  Pred: check if the argument consumer is legal
209 Code: write <sep> { write ( buf , 0 , buf . length ) ; }
  Tgt: write the entire character buffer buf to the target
  Pred: write an array of characters
210 Code: clear <sep> { entries . clear ( ) ; mainAttributes . clear ( ) ; }
  Tgt: reset the both the main attributes as well as the entry attributes associated with this manifest
  Pred: clear the collection
211 Code: acquire Shared Interruptibly <sep> { if ( Thread . interrupted ( ) ) throw new InterruptedException ( ) ; if ( tryAcquireShared ( arg ) < 0 ) doAcquireSharedInterruptibly ( arg ) ; }
  Tgt: acquire in shared mode, aborting if interrupted
  Pred: attempt a in mode to try
212 Code: is Parent Window Focused <sep> { Window window = SwingUtilities . getWindowAncestor ( component ) ; return window != null && window . isFocused ( ) ; }
  Tgt: true if the given components parent window iscurrently active
  Pred: check if the window is in the closed window
213 Code: extract Substitution <sep> { NFSubstitution result ; int subStart ; int subEnd ; subStart = indexOfAny ( ruleText , RULE_PREFIXES ) ; if ( subStart == - 1 ) { return NFSubstitution . makeSubstitution ( ruleText . length ( ) , this , predecessor , owner , this . formatter , "" ) ; } if ( ruleText . substring ( subStart ) . startsWith ( ">>>" ) ) { subEnd = subStart + 2 ; } else { char c = ruleText . charAt ( subStart ) ; subEnd = ruleText . indexOf ( c , subStart + 1 ) ; if ( c == '<' && subEnd != - 1 && subEnd < ruleText . length ( ) - 1 && ruleText . charAt ( subEnd + 1 ) == c ) { ++ subEnd ; } } if ( subEnd == - 1 ) { return NFSubstitution . makeSubstitution ( ruleText . length ( ) , this , predecessor , owner , this . formatter , "" ) ; } result = NFSubstitution . makeSubstitution ( subStart , this , predecessor , owner , this . formatter , ruleText . substring ( subStart , subEnd + 1 ) ) ; ruleText = ruleText . substring ( 0 , subStart ) + ruleText . substring ( subEnd + 1 ) ; return result ; }
  Tgt: search the rules rule text for the first substitution token, creates a substitution based on it, and removes the token from the rules rule text
  Pred: extract an external query
214 Code: get Token <sep> { synchronized ( mLock ) { return mTokensByHandle . get ( inMarketDataHandle ) ; } }
  Tgt: return the token associated with the given handle
  Pred: get the token token value for the given token
215 Code: unload <sep> { setEstimatedMajorSpan ( true ) ; removeAll ( ) ; }
  Tgt: remove the child views and returns to a state of unloaded
  Pred: construct a new reaper
216 Code: generate Bridge Secret <sep> { SecureRandom randGen = new SecureRandom ( ) ; expectedBridgeSecret = randGen . nextInt ( Integer . MAX_VALUE ) ; return expectedBridgeSecret ; }
  Tgt: call by cordova
  Pred: generate the specified exceptions
217 Code: get Undefined Attributes <sep> { if ( undefinedAttr . size ( ) == 0 ) return null ; Attribute [ ] attr = new Attribute [ undefinedAttr . size ( ) ] ; for ( int i = 0 ; i < attr . length ; i ++ ) { attr [ i ] = ( Attribute ) undefinedAttr . elementAt ( i ) ; } return attr ; }
  Tgt: it does return all the undefined attributes
  Pred: return an array of pairs: attributes of a particular object
218 Code: Value <sep> { try { readObj ( new DataInputStream ( is ) ) ; } catch ( EOFException e ) { throw new KettleEOFException ( "End-of-file-reached" , e ) ; } catch ( Exception e ) { throw new KettleFileException ( "Error-reading-from-data-input-stream" , e ) ; } }
  Tgt: read the Value, including meta data from a data input stream
  Pred: parameter value
219 Code: read Float Buffer <sep> { if ( columnMajor ) { m00 = fb . get ( ) ; m10 = fb . get ( ) ; m20 = fb . get ( ) ; m30 = fb . get ( ) ; m01 = fb . get ( ) ; m11 = fb . get ( ) ; m21 = fb . get ( ) ; m31 = fb . get ( ) ; m02 = fb . get ( ) ; m12 = fb . get ( ) ; m22 = fb . get ( ) ; m32 = fb . get ( ) ; m03 = fb . get ( ) ; m13 = fb . get ( ) ; m23 = fb . get ( ) ; m33 = fb . get ( ) ; } else { m00 = fb . get ( ) ; m01 = fb . get ( ) ; m02 = fb . get ( ) ; m03 = fb . get ( ) ; m10 = fb . get ( ) ; m11 = fb . get ( ) ; m12 = fb . get ( ) ; m13 = fb . get ( ) ; m20 = fb . get ( ) ; m21 = fb . get ( ) ; m22 = fb . get ( ) ; m23 = fb . get ( ) ; m30 = fb . get ( ) ; m31 = fb . get ( ) ; m32 = fb . get ( ) ; m33 = fb . get ( ) ; } return this ; }
  Tgt: readfloatbuffer reads value for this matrix from a float buffer
  Pred: readfloatbuffer reads value for this matrix from a float buffer
220 Code: get Section Count <sep> { return sections . size ( ) ; }
  Tgt: return the number of sections in the property set
  Pred: return the number of contributions in this manifest
221 Code: write Attribute <sep> { if ( xmlWriter . getPrefix ( namespace ) == null ) { xmlWriter . writeNamespace ( prefix , namespace ) ; xmlWriter . setPrefix ( prefix , namespace ) ; } xmlWriter . writeAttribute ( namespace , attName , attValue ) ; }
  Tgt: write an attribute with the ns prefix
  Pred: write an attribute with the ns prefix
222 Code: request Path <sep> { String fileOnly = url . getFile ( ) ; if ( fileOnly == null ) { return "/" ; } else if ( ! fileOnly . startsWith ( "/" ) ) { return "/" + fileOnly ; } else { return fileOnly ; } }
  Tgt: return the path to request, like the in get http 1
  Pred: return the path to request, like the in get http 1
223 Code: drag Over <sep> { System . out . println ( "[Source]-dragOver" ) ; changeCursor ( dsde . getDragSourceContext ( ) , dsde . getUserAction ( ) & dsde . getDropAction ( ) ) ; dropAction = dsde . getUserAction ( ) & dsde . getDropAction ( ) ; System . out . println ( "dropAction-=-" + dropAction ) ; }
  Tgt: as the hotspot moves over a platform dependent drop site
  Pred: this to edit edit player
224 Code: get Usages <sep> { Vector temp = new Vector ( ) ; for ( Enumeration it = usageTable . elements ( ) ; it . hasMoreElements ( ) ; ) { temp . addElement ( it . nextElement ( ) ) ; } return temp ; }
  Tgt: return all extended key usages
  Pred: return the username
225 Code: put Oid <sep> { putOidValue ( s ) ; putTag ( tag ) ; }
  Tgt: put an object identifier with a specified tag
  Pred: put any of key for the given value
226 Code: get Participant <sep> { if ( participant == null ) { participant = new ArrayList < TParticipant > ( ) ; } return this . participant ; }
  Tgt: get the value of the participant property
  Pred: get the value of the neuron property
227 Code: get Axis Path <sep> { for ( Axis axis : this . getAxes ( ) ) { if ( axis . equals ( givenAxis ) ) { continue ; } if ( axis . getStepfunction ( ) . equals ( Stepfunctions . FILE ) ) { int lastSeperatorIndex = axis . getFile ( ) . getAbsolutePath ( ) . lastIndexOf ( File . separatorChar ) ; return axis . getFile ( ) . getAbsolutePath ( ) . substring ( 0 , lastSeperatorIndex + 1 ) ; } } return null ; }
  Tgt: return the first found path of an axis with step function file or null if none
  Pred: get the map that takes a list of path
228 Code: replace Stream <sep> { if ( ! isRecoverable ( ) ) { throw new IllegalStateException ( ) ; } if ( this . out == replacementStream ) { return ; } replayBuffer . writeTo ( replacementStream ) ; Util . closeQuietly ( out ) ; out = replacementStream ; }
  Tgt: replace the current output stream with replacementStream, writing any replay bytes to it if they exist
  Pred: replace the current output stream with replacementStream, writing any replay bytes to it if they exist
229 Code: update Frame Set <sep> { try { int startOffset = element . getStartOffset ( ) ; int endOffset = Math . min ( getLength ( ) , element . getEndOffset ( ) ) ; String html = "<frame" ; if ( url != null ) { html += "-src="" + url + """ ; } html += ">" ; installParserIfNecessary ( ) ; setOuterHTML ( element , html ) ; } catch ( BadLocationException e1 ) { } catch ( IOException ioe ) { } }
  Tgt: replace a frameset branch element with a frame leaf element
  Pred: update the position at the position of the row is axis
230 Code: get C R S Index <sep> { int i = Arrays . binarySearch ( colInd , rowPtr [ row ] , rowPtr [ row + 1 ] , col ) ; if ( i >= 0 && colInd [ i ] == col ) return i ; else throw new IndexOutOfBoundsException ( "Entry-(" + ( row + 1 ) + ",-" + ( col + 1 ) + ")-is-not-in-the-matrix-structure" ) ; }
  Tgt: find the insertion index of crs
  Pred: return the part of the first scheme part of the specified class
231 Code: deliver Error <sep> { if ( mErrorListener != null ) { mErrorListener . onErrorResponse ( error ) ; } }
  Tgt: deliver error message to the error listener that the request was initialized with
  Pred: deliver error message to the error listener that the request was initialized with
232 Code: write Q Name <sep> { java . lang . String namespaceURI = qname . getNamespaceURI ( ) ; if ( namespaceURI != null ) { java . lang . String prefix = xmlWriter . getPrefix ( namespaceURI ) ; if ( prefix == null ) { prefix = generatePrefix ( namespaceURI ) ; xmlWriter . writeNamespace ( prefix , namespaceURI ) ; xmlWriter . setPrefix ( prefix , namespaceURI ) ; } if ( prefix . trim ( ) . length ( ) > 0 ) { xmlWriter . writeCharacters ( prefix + ":" + org . apache . axis2 . databinding . utils . ConverterUtil . convertToString ( qname ) ) ; } else { xmlWriter . writeCharacters ( org . apache . axis2 . databinding . utils . ConverterUtil . convertToString ( qname ) ) ; } } else { xmlWriter . writeCharacters ( org . apache . axis2 . databinding . utils . ConverterUtil . convertToString ( qname ) ) ; } }
  Tgt: handle qnames
  Pred: handle qnames
233 Code: get Output Stream <sep> { return response . getOutputStream ( size ) ; }
  Tgt: use to write a message body with the response
  Pred: read the actual output stream
234 Code: delete Resolver <sep> { resolvers . removeElement ( r ) ; }
  Tgt: delete a resolver used by this extended resolver
  Pred: remove a persistent resolver
235 Code: remove Attribute <sep> { int i = names . indexOf ( name ) ; if ( i != - 1 ) { names . remove ( i ) ; types . remove ( i ) ; values . remove ( i ) ; } }
  Tgt: remove an attribute from the list
  Pred: remove an attribute value
236 Code: get Local Principal <sep> { Principal principal ; try { principal = session . getLocalPrincipal ( ) ; } catch ( AbstractMethodError e ) { principal = null ; java . security . cert . Certificate [ ] certs = session . getLocalCertificates ( ) ; if ( certs != null ) { principal = ( X500Principal ) ( ( X509Certificate ) certs [ 0 ] ) . getSubjectX500Principal ( ) ; } } return principal ; }
  Tgt: return the principal the client sent to the server, or null if the client did not authenticate
  Pred: return the internet path to the specified path
237 Code: analyze Agent <sep> { if ( agent . contains ( "Firefox" ) ) { return agent . substring ( agent . indexOf ( "Firefox" ) ) ; } else { return agent ; } }
  Tgt: analyze user agent name
  Pred: implement a url stream
238 Code: get Accessible Table <sep> { return ac . getAccessibleTable ( ) ; }
  Tgt: get the accessible table associated with an object
  Pred: return the accessible object in the table
239 Code: start <sep> { timer . schedule ( task , periodMs , periodMs ) ; }
  Tgt: warn does not check if already started
  Pred: start the data
240 Code: get Exclusive Queued Threads <sep> { ArrayList < Thread > list = new ArrayList < Thread > ( ) ; for ( Node p = tail ; p != null ; p = p . prev ) { if ( ! p . isShared ( ) ) { Thread t = p . thread ; if ( t != null ) list . add ( t ) ; } } return list ; }
  Tgt: return a collection containing threads that may be waiting to acquire in exclusive mode
  Pred: return a collection of threads that may be waiting to acquire out
241 Code: clear <sep> { storages . clear ( ) ; }
  Tgt: remove all storages from this storage
  Pred: clear watcher state
242 Code: set Createtime <sep> { this . createtime = createtime == null ? null : createtime . trim ( ) ; }
  Tgt: this method was generated by my batis generator
  Pred: this method was generated by my batis generator
243 Code: update Candidates <sep> { if ( ! mCompletionOn ) { if ( mComposing . length ( ) > 0 ) { ArrayList < String > list = new ArrayList < String > ( ) ; list . add ( mComposing . toString ( ) ) ; setSuggestions ( list , true , true ) ; } else { setSuggestions ( null , false , false ) ; } } }
  Tgt: update the list of available candidates from the current composing text
  Pred: update the regular expression
244 Code: fire Message Event <sep> { ArrayList < WeakReference < ? >> badReferences = new ArrayList < WeakReference < ? >> ( ) ; for ( WeakReference < InterfaceMessageEventReceiver > r : messageEventReceivers ) { InterfaceMessageEventReceiver receiver = r . get ( ) ; if ( receiver == null ) { badReferences . add ( r ) ; } else { receiver . onMessageEvent ( message ) ; } } messageEventReceivers . removeAll ( badReferences ) ; }
  Tgt: method executes all registered start token heads
  Pred: fire a single message event on this event
245 Code: read Int From XML <sep> { if ( DEBUG ) { trace ( new Throwable ( ) , node . getAttribute ( ATT_NAME ) ) ; } m_CurrentNode = node ; return ( ( Integer ) getPrimitive ( node ) ) . intValue ( ) ; }
  Tgt: build the primitive from the given dom node
  Pred: build the primitive from the given dom node
246 Code: success <sep> { return new Response < T > ( result , cacheEntry ) ; }
  Tgt: return a successful response containing the parsed result
  Pred: perform this instance
247 Code: is Supposed To Change Password <sep> { return Boolean . valueOf ( getProperties ( ) . get ( OpenmrsConstants . USER_PROPERTY_CHANGE_PASSWORD ) ) ; }
  Tgt: read the value of force password property
  Pred: helper if something
248 Code: get Message <sep> { StringBuffer buffer = new StringBuffer ( super . getMessage ( ) ) ; if ( querySQL != null ) { buffer . append ( ",-SQL:-[" ) . append ( querySQL . trim ( ) ) . append ( "]" ) ; } if ( ! qualifierSnapshot . isEmpty ( ) ) { buffer . append ( ",-WHERE-clause-bindings:-[" ) ; Iterator it = qualifierSnapshot . entrySet ( ) . iterator ( ) ; while ( it . hasNext ( ) ) { Map . Entry entry = ( Map . Entry ) it . next ( ) ; buffer . append ( entry . getKey ( ) ) . append ( "=" ) ; buffer . append ( entry . getValue ( ) ) ; if ( it . hasNext ( ) ) { buffer . append ( ",-" ) ; } } buffer . append ( "]" ) ; } return buffer . toString ( ) ; }
  Tgt: return descriptive message for this exception
  Pred: return the message
249 Code: non Null <sep> { return in -> { I out = f . apply ( in ) ; return out == null ? in : out ; } ; }
  Tgt: return function that never produces null, but returns its input instead
  Pred: return a string representation of the vector
250 Code: resolve <sep> { if ( baseURI == null ) { throw new IllegalArgumentException ( "Base-URI-may-nor-be-null" ) ; } if ( reference == null ) { throw new IllegalArgumentException ( "Reference-URI-may-nor-be-null" ) ; } String s = reference . toString ( ) ; if ( s . startsWith ( "?" ) ) { return resolveReferenceStartingWithQueryString ( baseURI , reference ) ; } boolean emptyReference = s . length ( ) == 0 ; if ( emptyReference ) { reference = URI . create ( "#" ) ; } URI resolved = baseURI . resolve ( reference ) ; if ( emptyReference ) { String resolvedString = resolved . toString ( ) ; resolved = URI . create ( resolvedString . substring ( 0 , resolvedString . indexOf ( '#' ) ) ) ; } return removeDotSegments ( resolved ) ; }
  Tgt: resolve a uri reference against a base uri
  Pred: create a datagram string from the given uri
251 Code: now Date <sep> { return new java . util . Date ( ) ; }
  Tgt: return a date for right now
  Pred: create a date object
252 Code: write Object <sep> { super . writeObjectBase ( out ) ; if ( out . getClass ( ) . getName ( ) . indexOf ( "xstream" ) == - 1 ) { out . writeObject ( URL ) ; } }
  Tgt: write this url input synapse object into the specified object stream
  Pred: write this big decimal object to the stream
253 Code: to String <sep> { StringBuilder sb = new StringBuilder ( longCount / 2 ) ; sb . append ( '{' ) ; boolean comma = false ; for ( int i = 0 ; i < longCount ; ++ i ) { if ( bits [ i ] != 0 ) { for ( int j = 0 ; j < 64 ; ++ j ) { if ( ( bits [ i ] & 1L << j ) != 0 ) { if ( comma ) { sb . append ( ",-" ) ; } else { comma = true ; } sb . append ( 64 * i + j ) ; } } } } sb . append ( '}' ) ; return sb . toString ( ) ; }
  Tgt: return a string containing a concise, human readable description of the receiver: a comma delimited list of the indexes of all set bits
  Pred: return a string representation of the tree
254 Code: _type <sep> { int info = _exptype ( identity ) ; if ( NULL != info ) return m_expandedNameTable . getType ( info ) ; else return NULL ; }
  Tgt: get the simple type id for the given node identity
  Pred: get the simple type code for the given node identity
255 Code: get Max <sep> { long max = - 1L ; try { Connection con = SWBUtils . DB . getConnection ( dbcon ) ; Statement st = con . createStatement ( ) ; ResultSet rs = st . executeQuery ( "SELECT-max(" + name + ")-FROM-" + tablename ) ; if ( rs . next ( ) ) max = rs . getLong ( 1 ) ; else max = 0L ; rs . close ( ) ; st . close ( ) ; con . close ( ) ; } catch ( Exception e ) { log . error ( SWBUtils . TEXT . getLocaleString ( "com.infotec.wb.resources.database.TableGeneric" , "error_TableGeneric_getMax_ReadMaxError" ) + name + SWBUtils . TEXT . getLocaleString ( "com.infotec.wb.resources.database.TableGeneric" , "error_TableGeneric_getMax_ReadMaxErrorTable" ) + "-" + tablename , e ) ; } return max ; }
  Tgt: obtiene el valor maximo en una columna de la tabla que lo llama
  Pred: obtain the maximum number of characters that are in the specified character
256 Code: to String <sep> { StringWriter sw = new StringWriter ( ) ; synchronized ( sw . getBuffer ( ) ) { return this . write ( sw , indentFactor , 0 ) . toString ( ) ; } }
  Tgt: make a prettyprinted json text of this json array
  Pred: make a prettyprinted json text of this json array
257 Code: read String <sep> { return scanner . next ( ) ; }
  Tgt: read and return the next string
  Pred: read a string from the stream
258 Code: control Free <sep> { logger . info ( "maxFree-was-=-" + maxFree . get ( ) ) ; maxFree . set ( Math . min ( Math . max ( 1 , maxFree . addAndGet ( num ) ) , totalMaxSimultanFreeDownload . get ( ) ) ) ; logger . info ( "maxFree-now-=-" + maxFree . get ( ) ) ; }
  Tgt: prevent more than one free download from starting at a given time
  Pred: prevent more than one free download from starting at a given time
259 Code: get Global Info <sep> { BeanInfo bi = Introspector . getBeanInfo ( clusterer . getClass ( ) ) ; MethodDescriptor [ ] methods ; methods = bi . getMethodDescriptors ( ) ; Object [ ] args = { } ; String result = "-Synopsis-for-" + clusterer . getClass ( ) . getName ( ) + ":-" ; for ( MethodDescriptor method : methods ) { String name = method . getDisplayName ( ) ; Method meth = method . getMethod ( ) ; if ( name . equals ( "globalInfo" ) ) { String globalInfo = ( String ) ( meth . invoke ( clusterer , args ) ) ; result += globalInfo ; break ; } } return result ; }
  Tgt: return the global info for the supplied clusterer
  Pred: return the record info property value
260 Code: clear Selection <sep> { if ( selection != null && selection . length > 0 ) { int selSize = selection . length ; boolean [ ] newness = new boolean [ selSize ] ; for ( int counter = 0 ; counter < selSize ; counter ++ ) newness [ counter ] = false ; TreeSelectionEvent event = new TreeSelectionEvent ( this , selection , newness , leadPath , null ) ; leadPath = null ; leadIndex = leadRow = - 1 ; uniquePaths . clear ( ) ; selection = null ; resetRowSelection ( ) ; fireValueChanged ( event ) ; } }
  Tgt: empty the current selection
  Pred: clear the selection
261 Code: the_ P O A Manager <sep> { try { lock ( ) ; return manager ; } finally { unlock ( ) ; } }
  Tgt: the poa manager section 3
  Pred: send common message from ip result
262 Code: pause <sep> { paused . set ( true ) ; }
  Tgt: pause engine
  Pred: mark the whole component
263 Code: set This Class <sep> { _thisClass = className ; if ( _isWrite ) getConstantPool ( ) . addClass ( className ) ; }
  Tgt: set this class
  Pred: set the activation class
264 Code: chi Squared Probability <sep> { double a , y = 0 , s , e , c , z , val ; boolean even ; if ( x <= 0 || df < 1 ) { return ( 1 ) ; } a = 0.5 * x ; even = ( ( ( int ) ( 2 * ( df / 2 ) ) ) == df ) ; if ( df > 1 ) { y = Math . exp ( - a ) ; } s = ( even ? y : ( 2.0 * normalProbability ( - Math . sqrt ( x ) ) ) ) ; if ( df > 2 ) { x = 0.5 * ( df - 1.0 ) ; z = ( even ? 1.0 : 0.5 ) ; if ( a > bigx ) { e = ( even ? 0.0 : logSqrtPi ) ; c = Math . log ( a ) ; while ( z <= x ) { e = Math . log ( z ) + e ; val = c * z - a - e ; s += Math . exp ( val ) ; z += 1.0 ; } return ( s ) ; } else { e = ( even ? 1.0 : ( rezSqrtPi / Math . sqrt ( a ) ) ) ; c = 0.0 ; while ( z <= x ) { e = e * ( a / z ) ; c = c + e ; z += 1.0 ; } return ( c * y + s ) ; } } else { return ( s ) ; } }
  Tgt: return chi squared probability for given value and degrees of freedom
  Pred: translate the various mean
265 Code: pre Align <sep> { assert padding != 0 ; BigDecimal big ; BigDecimal small ; if ( padding < 0 ) { big = lhs ; small = augend ; } else { big = augend ; small = lhs ; } long estResultUlpScale = ( long ) big . scale - big . precision ( ) + mc . precision ; long smallHighDigitPos = ( long ) small . scale - small . precision ( ) + 1 ; if ( smallHighDigitPos > big . scale + 2 && smallHighDigitPos > estResultUlpScale + 2 ) { small = BigDecimal . valueOf ( small . signum ( ) , this . checkScale ( Math . max ( big . scale , estResultUlpScale ) + 3 ) ) ; } BigDecimal [ ] result = { big , small } ; return result ; }
  Tgt: return an array of length two, the sum of whose entries is equal to the rounded sum of the big decimal arguments
  Pred: normalize a concatenation expression
266 Code: get Instance <sep> { final String lowerCaseName = name . toLowerCase ( Locale . ENGLISH ) ; if ( MULTIPART . getName ( ) . equals ( lowerCaseName ) ) { return MULTIPART ; } return URL_ENCODED ; }
  Tgt: return the constant that matches the specified name
  Pred: get a formatter instance for formatting and parsing datesand times in the specified style for the specified locale
267 Code: get Next Number <sep> { if ( numberField == null ) return - 1.0 ; TextField tf = ( TextField ) numberField . elementAt ( nfIndex ) ; String theText = tf . getText ( ) ; String label = null ; if ( macro ) { label = ( String ) labels . get ( ( Object ) tf ) ; theText = Macro . getValue ( macroOptions , label , theText ) ; } String originalText = ( String ) defaultText . elementAt ( nfIndex ) ; double defaultValue = ( ( Double ) ( defaultValues . elementAt ( nfIndex ) ) ) . doubleValue ( ) ; double value ; if ( theText . equals ( originalText ) ) value = defaultValue ; else { Double d = getValue ( theText ) ; if ( d != null ) value = d . doubleValue ( ) ; else { if ( theText . startsWith ( "&" ) ) theText = theText . substring ( 1 ) ; Interpreter interp = Interpreter . getInstance ( ) ; value = interp != null ? interp . getVariable2 ( theText ) : Double . NaN ; if ( Double . isNaN ( value ) ) { invalidNumber = true ; errorMessage = """ + theText + ""-is-an-invalid-number" ; value = Double . NaN ; if ( macro ) { IJ . error ( "Macro-Error" , "Numeric-value-expected-in-run()-function-" + "-Dialog-box-title:-"" + getTitle ( ) + ""-" + "-Key:-"" + label . toLowerCase ( Locale . US ) + ""-" + "-Value-or-variable-name:-"" + theText + """ ) ; } } } } if ( recorderOn ) recordOption ( tf , trim ( theText ) ) ; nfIndex ++ ; return value ; }
  Tgt: return the contents of the next numeric field, or na n if the field does not contain a number
  Pred: return the next number of bytes used by the xml document
268 Code: help Delete <sep> { if ( f == next && this == b . next ) { if ( f == null || f . value != f ) appendMarker ( f ) ; else b . casNext ( this , f . next ) ; } }
  Tgt: help out a deletion by appending marker or unlinking from predecessor
  Pred: remove the trailing trailing removes from this node
269 Code: handle Validator <sep> { Attributes attrs = validatorInfo . getAttributes ( ) ; String ln = validatorInfo . getLocalName ( ) ; boolean hasValidatorId = false ; boolean hasBinding = false ; for ( int i = 0 ; i < attrs . getLength ( ) ; i ++ ) { if ( attrs . getLocalName ( i ) . equals ( "validatorId" ) ) { hasValidatorId = true ; } if ( attrs . getLocalName ( i ) . equals ( "binding" ) ) { hasBinding = true ; } } if ( failed = ( ! hasBinding && ! hasValidatorId ) ) { Object [ ] obj = new Object [ 1 ] ; obj [ 0 ] = ln ; ResourceBundle rb = ResourceBundle . getBundle ( RIConstants . TLV_RESOURCE_LOCATION ) ; failureMessages . append ( MessageFormat . format ( rb . getString ( "TLV_VALIDATOR_ERROR" ) , obj ) ) ; failureMessages . append ( "-" ) ; } }
  Tgt: validator tag must have a validator id and or binding attribute
  Pred: call when the xml is received a
270 Code: get Parameter Spec <sep> { if ( ! initialized ) { throw new InvalidParameterSpecException ( "Parameter-has-not-been-initialized" ) ; } return spiImpl . engineGetParameterSpec ( paramSpec ) ; }
  Tgt: return the algorithm parameter spec for this algorithm parameters
  Pred: retrieve the set of parameter types
271 Code: is Title Case <sep> { return isTitleCaseImpl ( codePoint ) ; }
  Tgt: indicate whether the specified code point is a titlecase character
  Pred: this is used for our storage
272 Code: append_or_overwrite <sep> { try { File file = new File ( filename ) ; FileChannel channel = new FileOutputStream ( file , append ) . getChannel ( ) ; FileLock lock = channel . lock ( ) ; try { ByteBuffer bb = ByteBuffer . wrap ( data . getBytes ( ) ) ; int byte_written = channel . write ( bb ) ; channel . close ( ) ; } finally { lock . release ( ) ; } } catch ( Exception e ) { System . out . println ( e . getMessage ( ) ) ; } }
  Tgt: append or overwrite the specified file with the data
  Pred: resume the expression
273 Code: on Focus Changed <sep> { super . onFocusChanged ( focused , direction , previouslyFocusedRect ) ; if ( mIcon != null ) { mIcon . setVisibility ( focused ? View . VISIBLE : View . GONE ) ; } }
  Tgt: only show the icon view when focused, if there is one
  Pred: call when the history event is changed
274 Code: load Library <sep> { Runtime . getRuntime ( ) . loadLibrary ( libName , VMStack . getCallingClassLoader ( ) ) ; }
  Tgt: load and links the library with the specified name
  Pred: load library entrys from the library
275 Code: get XML Schema Type <sep> { boolean yearSet = isSet ( DatatypeConstants . YEARS ) ; boolean monthSet = isSet ( DatatypeConstants . MONTHS ) ; boolean daySet = isSet ( DatatypeConstants . DAYS ) ; boolean hourSet = isSet ( DatatypeConstants . HOURS ) ; boolean minuteSet = isSet ( DatatypeConstants . MINUTES ) ; boolean secondSet = isSet ( DatatypeConstants . SECONDS ) ; if ( yearSet && monthSet && daySet && hourSet && minuteSet && secondSet ) { return DatatypeConstants . DURATION ; } if ( ! yearSet && ! monthSet && daySet && hourSet && minuteSet && secondSet ) { return DatatypeConstants . DURATION_DAYTIME ; } if ( yearSet && monthSet && ! daySet && ! hourSet && ! minuteSet && ! secondSet ) { return DatatypeConstants . DURATION_YEARMONTH ; } throw new IllegalStateException ( "javax.xml.datatype.Duration#getXMLSchemaType():" + "-this-Duration-does-not-match-one-of-the-XML-Schema-date/time-datatypes:" + "-year-set-=-" + yearSet + "-month-set-=-" + monthSet + "-day-set-=-" + daySet + "-hour-set-=-" + hourSet + "-minute-set-=-" + minuteSet + "-second-set-=-" + secondSet ) ; }
  Tgt: return the name of the xml schema date time type that this instance maps to
  Pred: return the type of the resource type string
276 Code: get Config From XML <sep> { String xml = null ; FileInputStream stream = new FileInputStream ( new File ( file ) ) ; try { FileChannel fc = stream . getChannel ( ) ; MappedByteBuffer bb = fc . map ( FileChannel . MapMode . READ_ONLY , 0 , fc . size ( ) ) ; xml = Charset . defaultCharset ( ) . decode ( bb ) . toString ( ) ; } finally { stream . close ( ) ; } if ( xml == null || xml . isEmpty ( ) ) throw new NodeRegisterConfigurationException ( "Cannot-read-file,-XML-is-empty" ) ; XStream xstream = NodeRegisterConfigurationManager . getXstream ( ) ; NodeRegisterConfiguration newConfig = ( NodeRegisterConfiguration ) xstream . fromXML ( xml ) ; if ( newConfig == null ) throw new NodeRegisterConfigurationException ( "Cannot-read-configuration,-config-object-is-empty" ) ; return newConfig ; }
  Tgt: read xml configuration and tries to restore it
  Pred: get the configuration name of a dom cache
277 Code: get Provider Class <sep> { try { if ( cl == null ) { if ( useBSClsLoader ) { return Class . forName ( className , false , FactoryFinder . class . getClassLoader ( ) ) ; } else { cl = ss . getContextClassLoader ( ) ; if ( cl == null ) { throw new ClassNotFoundException ( ) ; } else { return Class . forName ( className , false , cl ) ; } } } else { return Class . forName ( className , false , cl ) ; } } catch ( ClassNotFoundException e1 ) { if ( doFallback ) { return Class . forName ( className , false , FactoryFinder . class . getClassLoader ( ) ) ; } else { throw e1 ; } } }
  Tgt: attempt to load a class using the class loader supplied
  Pred: return the class of the given class for the given class
278 Code: get Cursor Name <sep> { throw SQLError . createSQLException ( Messages . getString ( "ResultSet.Positioned_Update_not_supported" ) , SQLError . SQL_STATE_DRIVER_NOT_CAPABLE , getExceptionInterceptor ( ) ) ; }
  Tgt: get the name of the sql cursor used by this result set in SQL, a result table is retrieved though a cursor that is named
  Pred: get cursor name
279 Code: make P V Tab <sep> { Box view = new Box ( HORIZONTAL ) ; Box pvBox = new Box ( VERTICAL ) ; pvBox . add ( new JLabel ( "Connected-PVs:" ) ) ; _connectedPVList = new JList < > ( ) ; pvBox . add ( new JScrollPane ( _connectedPVList , VERTICAL_SCROLLBAR_ALWAYS , HORIZONTAL_SCROLLBAR_NEVER ) ) ; view . add ( pvBox ) ; pvBox = new Box ( VERTICAL ) ; pvBox . add ( new JLabel ( "Unconnected-PVs:" ) ) ; _unconnectedPVList = new JList < > ( ) ; pvBox . add ( new JScrollPane ( _unconnectedPVList , VERTICAL_SCROLLBAR_ALWAYS , HORIZONTAL_SCROLLBAR_NEVER ) ) ; view . add ( pvBox ) ; return view ; }
  Tgt: make a tab that displays the pvs being logged and distinguishes those that are connected from those that are not connected
  Pred: make a make button for a button to show the rmi and add to an rmi
280 Code: accept <sep> { v . visitExceptionThrower ( this ) ; v . visitTypedInstruction ( this ) ; v . visitStackConsumer ( this ) ; v . visitReturnInstruction ( this ) ; v . visitFRETURN ( this ) ; }
  Tgt: call corresponding visitor method
  Pred: call corresponding visitor method
281 Code: equals <sep> { if ( ! ( obj instanceof MediaType ) ) { return false ; } MediaType other = ( MediaType ) obj ; return ( this . type . equalsIgnoreCase ( other . type ) && this . subtype . equalsIgnoreCase ( other . subtype ) && this . parameters . equals ( other . parameters ) ) ; }
  Tgt: compare obj to this media type to see if they are the same by comparingtype, subtype and parameters
  Pred: determine the equality of two service permission objects
282 Code: approximately_equal <sep> { return ( Math . abs ( a - b ) <= epsilon ) ; }
  Tgt: check if a ~= b
  Pred: return the refererent between two cliques
283 Code: skip Whitespace <sep> { for ( ; pos < input . length ( ) ; pos ++ ) { char c = input . charAt ( pos ) ; if ( c != '-' && c != '|t' ) { break ; } } return pos ; }
  Tgt: return the next non whitespace character in input that is whitespace
  Pred: return the next non whitespace character in input that is whitespace
284 Code: mouse Released <sep> { dragging = false ; if ( SHAPE_TOOLS . contains ( currentTool ) ) { Graphics g = OSC . getGraphics ( ) ; g . setColor ( currentColor ) ; putCurrentShape ( g ) ; g . dispose ( ) ; repaint ( ) ; } }
  Tgt: finish a mouse drag operation
  Pred: mouse processing
285 Code: get Desc Recurso Aplicacion <sep> { if ( descRecursoAplicacion == null ) { descRecursoAplicacion = new ArrayList < DescRecursoAplicacion > ( ) ; } return this . descRecursoAplicacion ; }
  Tgt: get the value of the desc recurso aplicacion property
  Pred: get the value of the given type property
286 Code: get Extended Interfaces Count <sep> { if ( info == null || info . extendedInterfaces == null ) { return 0 ; } return info . extendedInterfaces . size ( ) ; }
  Tgt: get the number of extended interfaces specified
  Pred: return the number of entries in the list
287 Code: remove <sep> { final List v = ( List ) this . table . get ( key ) ; if ( v == null ) { return false ; } if ( ! v . remove ( value ) ) { return false ; } if ( v . size ( ) == 0 ) { this . table . remove ( key ) ; } return true ; }
  Tgt: remove the key value pair from the map
  Pred: drop the entry for key if it exists and can be removed
288 Code: remove Group Name <sep> { groupNames . remove ( groupName ) ; }
  Tgt: remove a group name
  Pred: add a service name
289 Code: obtener Tipo <sep> { return elemento . getAttribute ( Constants . TIPO_ATTR ) ; }
  Tgt: obtiene el valor del atributo tipo de un elemento
  Pred: create a predicate value
290 Code: await Until <sep> { if ( deadline == null ) throw new NullPointerException ( ) ; long abstime = deadline . getTime ( ) ; if ( Thread . interrupted ( ) ) throw new InterruptedException ( ) ; Node node = addConditionWaiter ( ) ; long savedState = fullyRelease ( node ) ; boolean timedout = false ; int interruptMode = 0 ; while ( ! isOnSyncQueue ( node ) ) { if ( System . currentTimeMillis ( ) > abstime ) { timedout = transferAfterCancelledWait ( node ) ; break ; } LockSupport . parkUntil ( this , abstime ) ; if ( ( interruptMode = checkInterruptWhileWaiting ( node ) ) != 0 ) break ; } if ( acquireQueued ( node , savedState ) && interruptMode != THROW_IE ) interruptMode = REINTERRUPT ; if ( node . nextWaiter != null ) unlinkCancelledWaiters ( ) ; if ( interruptMode != 0 ) reportInterruptAfterWait ( interruptMode ) ; return ! timedout ; }
  Tgt: implement absolute timed condition wait
  Pred: wait for the current time in seconds since it can be ignored
291 Code: get Input Type Field <sep> { if ( inputTypeField == null ) { inputTypeField = new JTextField ( ) ; } return inputTypeField ; }
  Tgt: this method initializes input type field
  Pred: return the type for this sequence
292 Code: token <sep> { return mTokens . get ( n ) ; }
  Tgt: return the token at the specified input position
  Pred: return the bit value of the specified key
293 Code: append <sep> { if ( tree . parent != null ) throw new IllegalArgumentException ( "Cannot-share-trees!" ) ; tree . edgeLength = edgeLength_ ; tree . parent = this ; children . add ( tree ) ; }
  Tgt: add a new tree as the rightmost child with given edge length
  Pred: append a single data to the coverage file
294 Code: close Stream <sep> { if ( stream != null ) { try { stream . close ( ) ; } catch ( IOException e ) { android . util . Log . e ( TAG , "Could-not-close-stream" , e ) ; } } }
  Tgt: close the specified stream
  Pred: close the specified stream
295 Code: get Length <sep> { return buffer . getLength ( ) ; }
  Tgt: return the length of the valid data currently in the buffer
  Pred: return the number of attributes in the list
296 Code: pop Current Doc <sep> { assert numSubsOnDoc == 0 ; assert docIDQueue . size ( ) > 0 ; subsOnDoc [ numSubsOnDoc ++ ] = docIDQueue . pop ( ) ; docID = subsOnDoc [ 0 ] . posEnum . docID ( ) ; while ( docIDQueue . size ( ) > 0 && docIDQueue . top ( ) . posEnum . docID ( ) == docID ) { subsOnDoc [ numSubsOnDoc ++ ] = docIDQueue . pop ( ) ; } }
  Tgt: pop all enums positioned on the current doc
  Pred: lock and called only
297 Code: unregister <sep> { toolkit . removeAWTEventListener ( this ) ; }
  Tgt: remove this listener from the toolkit this listener is attached to
  Pred: mark a component
298 Code: add Dwg Class <sep> { System . out . println ( "DwgFile.addDwgClass()-executed-..." ) ; dwgClasses . add ( dwgClass ) ; }
  Tgt: add a dwg class to the dwg classes vector
  Pred: update the class
299 Code: replace String <sep> { StringBuffer buff = new StringBuffer ( ) ; int oldStrLength = p_old . length ( ) ; int index = 0 ; int prevIndex = 0 ; while ( ( index = p_caseNormalized . indexOf ( p_old , prevIndex ) ) != - 1 ) { buff . append ( p_original . substring ( prevIndex , index ) ) ; buff . append ( p_new ) ; prevIndex = index + oldStrLength ; } buff . append ( p_original . substring ( prevIndex , p_original . length ( ) ) ) ; return buff . toString ( ) ; }
  Tgt: p case normalized is a case normalized p original
  Pred: replace an image with a single string
300 Code: cond <sep> { if ( instr . getCondition ( ) == Condition . AL ) return "" ; else return instr . getCondition ( ) . name ( ) ; }
  Tgt: extract the condition field from an instruction and provides a human readable assembly form of the condition
  Pred: return a collection of strings
301 Code: Spell Dictionary Hash Map <sep> { super ( ( File ) null ) ; createDictionary ( new BufferedReader ( wordList ) ) ; }
  Tgt: dictionary constructor
  Pred: parse a map of template
302 Code: Import Prefs <sep> { NodeList entries = map . getChildNodes ( ) ; for ( int i = 0 , numEntries = entries . getLength ( ) ; i < numEntries ; i ++ ) { Element entry = ( Element ) entries . item ( i ) ; prefsNode . put ( entry . getAttribute ( "key" ) , entry . getAttribute ( "value" ) ) ; } }
  Tgt: import the preferences described by the specified xml element into the specified preferences node
  Pred: perform a shuffled for contacts
303 Code: bind <sep> { ContextNamePair pair ; try { pair = getTargetNamespaceContextNamePair ( arg0 ) ; } catch ( IllegalArgumentException e ) { throw new OperationNotSupportedException ( ) ; } if ( pair . context instanceof DirContext ) { ( ( DirContext ) pair . context ) . bind ( pair . name , arg1 , arg2 ) ; } else { throw new NotContextException ( Messages . getString ( "jndi.4A" ) ) ; } }
  Tgt: this method is not supported
  Pred: send the given service and signals the result of the result into a byte
304 Code: create Field <sep> { Field f = new Field ( name , val , storage , index , vec ) ; if ( index . isIndexed ( ) ) { f . setOmitNorms ( omitNorms ) ; f . setIndexOptions ( options ) ; f . setBoost ( boost ) ; } return f ; }
  Tgt: create the field from native lucene parts
  Pred: create a new, data system
305 Code: get Operations <sep> { if ( operations == null ) { operations = new ArrayList < ExpressBusinessOperation > ( ) ; } return this . operations ; }
  Tgt: get the value of the operations property
  Pred: get the value of the annotates property
306 Code: get Instance <sep> { return getNumberInstance ( locale ) ; }
  Tgt: return a number format for formatting and parsing numbers for thespecified locale
  Pred: return a number format for formatting and parsing numbers for thedefault locale
307 Code: get Context <sep> { return window . get ( currentContext ) ; }
  Tgt: the context currently being examined
  Pred: return the topmost context in the given object
308 Code: proc Line <sep> { if ( s . length ( ) < 1 ) return true ; if ( s . startsWith ( MORRIGAN_EOF ) ) return false ; readStatusLine ( s ) ; return true ; }
  Tgt: return true to keep going
  Pred: retrieve the line of characters
309 Code: read Long <sep> { return primitiveTypes . readLong ( ) ; }
  Tgt: read and returns primitive data of type long read from the receiver
  Pred: read and return the next long
310 Code: read Float Number <sep> { workBuffer . setLength ( 0 ) ; while ( "0123456789-.Ee" . indexOf ( curChar ) >= 0 && readState >= 0 ) { workBuffer . append ( curChar ) ; nextChar ( ) ; } return Double . parseDouble ( workBuffer . toString ( ) ) ; }
  Tgt: parse a floating point number
  Pred: return a text number
311 Code: load <sep> { Model model = null ; FileInputStream file ; ObjectInputStream object ; try { file = new FileInputStream ( path ) ; object = new ObjectInputStream ( file ) ; model = ( Model ) object . readObject ( ) ; object . close ( ) ; file . close ( ) ; } catch ( FileNotFoundException e ) { e . printStackTrace ( ) ; } catch ( NotSerializableException e ) { System . out . println ( "!-could-not-serialize-" + path ) ; e . printStackTrace ( ) ; } catch ( IOException e ) { System . out . println ( "!-io-error-" + path ) ; } catch ( ClassNotFoundException e ) { e . printStackTrace ( ) ; } catch ( ClassCastException e ) { System . out . println ( "!-class-cast-trouble-" + path ) ; } return model ; }
  Tgt: load up a serialized model
  Pred: load the provider from the database
312 Code: property <sep> { return props . getProperty ( name ) ; }
  Tgt: return the given property from props
  Pred: determine whether the specified target is writable
313 Code: scan Now <sep> { if ( sReceiver != null ) { sReceiver . scanNow ( ) ; } }
  Tgt: initiate a scan right now
  Pred: directory hierarchy
314 Code: get C_ B Partner S R_ I D <sep> { Integer ii = ( Integer ) get_Value ( COLUMNNAME_C_BPartnerSR_ID ) ; if ( ii == null ) return 0 ; return ii . intValue ( ) ; }
  Tgt: get b partner
  Pred: get tax
315 Code: process Request <sep> { Throwable t = ( Throwable ) request . getAttribute ( "javax.servlet.error.exception" ) ; ServletException e = null ; try { e = ( ServletException ) request . getAttribute ( "javax.servlet.error.exception" ) ; } catch ( Exception e2 ) { } String s = "" ; boolean rootcausefound = false ; if ( t != null ) { s += t . toString ( ) + "-(" + ( String ) request . getAttribute ( "javax.servlet.error.request_uri" ) + ")" ; } if ( e != null ) { if ( e . getRootCause ( ) != null ) t = e . getRootCause ( ) ; s += "<h3>StackTrace-(RootCause)</h3>" ; s += "<pre>" ; StackTraceElement [ ] stes = t . getStackTrace ( ) ; for ( int i = 0 ; i < stes . length ; i ++ ) { StackTraceElement ste = stes [ i ] ; s += ste . toString ( ) + "-" ; } s += "</pre>" ; rootcausefound = true ; } if ( t != null && ! rootcausefound ) { while ( t . getCause ( ) != null ) t = t . getCause ( ) ; s += "<h3>StackTrace</h3>" ; s += "<pre>" ; StackTraceElement [ ] stes = t . getStackTrace ( ) ; for ( int i = 0 ; i < stes . length ; i ++ ) { StackTraceElement ste = stes [ i ] ; s += ste . toString ( ) + "-" ; } s += "</pre>" ; } errorPage ( request , response , s ) ; }
  Tgt: zentrale methode zur verarbeitung von requests
  Pred: process the specified request
316 Code: get O K E C <sep> { if ( okec == null ) { okec = new ArrayList < KodOkec > ( ) ; } return this . okec ; }
  Tgt: get the value of the okec property
  Pred: get the value of the values property
317 Code: handle Application Wtf <sep> { final int callingUid = Binder . getCallingUid ( ) ; final int callingPid = Binder . getCallingPid ( ) ; if ( system ) { mHandler . post ( new Runnable ( ) { @ Override public void run ( ) { handleApplicationWtfInner ( callingUid , callingPid , app , tag , crashInfo ) ; } } ) ; return false ; } final ProcessRecord r = handleApplicationWtfInner ( callingUid , callingPid , app , tag , crashInfo ) ; if ( r != null && r . pid != Process . myPid ( ) && Settings . Global . getInt ( mContext . getContentResolver ( ) , Settings . Global . WTF_IS_FATAL , 0 ) != 0 ) { crashApplication ( r , crashInfo ) ; return true ; } else { return false ; } }
  Tgt: use by log via com
  Pred: use by log via com
318 Code: is Tablet <sep> { return ( context . getResources ( ) . getConfiguration ( ) . screenLayout & Configuration . SCREENLAYOUT_SIZE_MASK ) >= Configuration . SCREENLAYOUT_SIZE_LARGE ; }
  Tgt: check if device is tablet
  Pred: check if the given partial string is a mailto modifier
319 Code: register Prefix <sep> { java . lang . String prefix = xmlWriter . getPrefix ( namespace ) ; if ( prefix == null ) { prefix = generatePrefix ( namespace ) ; while ( xmlWriter . getNamespaceContext ( ) . getNamespaceURI ( prefix ) != null ) { prefix = org . apache . axis2 . databinding . utils . BeanUtil . getUniquePrefix ( ) ; } xmlWriter . writeNamespace ( prefix , namespace ) ; xmlWriter . setPrefix ( prefix , namespace ) ; } return prefix ; }
  Tgt: register a namespace prefix
  Pred: register a namespace prefix
320 Code: pop Scope <sep> { Scope scope = ( Scope ) ( scopes . pop ( ) ) ; return scope ; }
  Tgt: pop a scope from the stack
  Pred: remove the first character from the message
321 Code: add No Redraw <sep> { c . executeCommand ( ) ; commands . add ( c ) ; if ( commands . size ( ) > Main . pref . getInteger ( "undo.max" , 1000 ) ) { commands . removeFirst ( ) ; } redoCommands . clear ( ) ; }
  Tgt: execute the command and add it to the intern command queue
  Pred: add a new conversation owned to the nfc file
322 Code: find Within Horizon <sep> { ensureOpen ( ) ; if ( pattern == null ) throw new NullPointerException ( ) ; if ( horizon < 0 ) throw new IllegalArgumentException ( "horizon-<-0" ) ; clearCaches ( ) ; while ( true ) { String token = findPatternInBuffer ( pattern , horizon ) ; if ( token != null ) { matchValid = true ; return token ; } if ( needInput ) readInput ( ) ; else break ; } return null ; }
  Tgt: attempt to find the next occurrence of the specified pattern
  Pred: attempt to find the next occurrence of the specified pattern
323 Code: get Elements <sep> { if ( elements == null ) { elements = new ArrayList < Integer > ( ) ; } return this . elements ; }
  Tgt: get the value of the elements property
  Pred: get the value of the elements property
324 Code: dom2 String <sep> { StringWriter sw = new StringWriter ( ) ; DOMUtil . printAsXML ( document , new PrintWriter ( sw ) ) ; return sw . toString ( ) ; }
  Tgt: print an xml dom
  Pred: normalize a string of the string
325 Code: unpack Body <sep> { String body = null ; switch ( encoding ) { case SmsConstants . ENCODING_7BIT : body = GsmAlphabet . gsm7BitPackedToString ( pdu , offset , length * 8 / 7 ) ; if ( hasLanguageIndicator && body != null && body . length ( ) > 2 ) { language = body . substring ( 0 , 2 ) ; body = body . substring ( 3 ) ; } break ; case SmsConstants . ENCODING_16BIT : if ( hasLanguageIndicator && pdu . length >= offset + 2 ) { language = GsmAlphabet . gsm7BitPackedToString ( pdu , offset , 2 ) ; offset += 2 ; length -= 2 ; } try { body = new String ( pdu , offset , ( length & 0xfffe ) , "utf-16" ) ; } catch ( UnsupportedEncodingException e ) { throw new IllegalArgumentException ( "Error-decoding-UTF-16-message" , e ) ; } break ; default : break ; } if ( body != null ) { for ( int i = body . length ( ) - 1 ; i >= 0 ; i -- ) { if ( body . charAt ( i ) != CARRIAGE_RETURN ) { body = body . substring ( 0 , i + 1 ) ; break ; } } } else { body = "" ; } return new Pair < String , String > ( language , body ) ; }
  Tgt: unpack body text from the pdu using the given encoding, position and length within the pdu
  Pred: convert the xml text name and initializes it
326 Code: get Variable Names <sep> { return m_envVars . keySet ( ) ; }
  Tgt: get the names of the variables stored in the internal map
  Pred: return the list of extensions names for this property
327 Code: Move Item <sep> { if ( orig == null ) { return null ; } List < X > ret = new ArrayList < X > ( ) ; X fromItem = orig . get ( from ) ; for ( int i = 0 ; i < orig . size ( ) ; i ++ ) { if ( i != from ) { if ( i == to && from > to ) { ret . add ( fromItem ) ; } ret . add ( orig . get ( i ) ) ; if ( i == to && from < to ) { ret . add ( fromItem ) ; } } } return ret ; }
  Tgt: move an item in a list to another location in a list
  Pred: this method takes a node to be selected item
328 Code: get New Commands <sep> { List < Command > commands = new ArrayList < > ( ) ; if ( idLastID . get ( id ) != null ) { int lastID = idLastID . get ( id ) ; Iterator it = queuedCommands . entrySet ( ) . iterator ( ) ; while ( it . hasNext ( ) ) { Entry < Integer , Command > entry = ( Entry ) it . next ( ) ; if ( entry . getKey ( ) > lastID && entry . getValue ( ) . getClientType ( ) == type ) { commands . add ( entry . getValue ( ) ) ; } } } idLastID . put ( id , getLastID ( ) ) ; return commands ; }
  Tgt: check wether there are new commands available for given id and app
  Pred: return a line object that will be used to localize any existing serialization
329 Code: and Then <sep> { Objects . requireNonNull ( after ) ; return ( T t ) -> { accept ( t ) ; after . accept ( t ) ; } ; }
  Tgt: return a composed consumer that performs, in sequence, thisoperation followed by the after operation
  Pred: return a new big decimal instance with the intersection of this divisor
330 Code: set Memory Pool <sep> { if ( ( pktSizes . length != initAlloc . length ) || ( pktSizes . length != maxAlloc . length ) ) throw new InvalidConfigurationException ( "Invalid-packet-size/allocation-lists,-lengths-do-not-match" ) ; if ( pktSizes . length > 1 ) { for ( int i = 1 ; i <= pktSizes . length - 1 ; i ++ ) if ( pktSizes [ i ] < pktSizes [ i - 1 ] ) throw new InvalidConfigurationException ( "Packet-size-list-is-not-in-ascending-order" ) ; } if ( m_memoryPool != null ) throw new InvalidConfigurationException ( "Memory-pool-already-configured" ) ; m_memoryPool = new ByteBufferPool ( pktSizes , initAlloc , maxAlloc ) ; }
  Tgt: set the memory pool packet sizes allocations
  Pred: set the secondary that to be applied
331 Code: is Equal Key <sep> { return ( key1 == key2 || ( ( key1 != null ) && key1 . equals ( key2 ) ) ) ; }
  Tgt: compare two keys, in internal converted form, to see if they are equal
  Pred: indicate whether a given key is equal to this one
332 Code: query <sep> { List < Commit > matchedCommits = new ArrayList < > ( ) ; List < Expression > expressions = query . getExpressions ( ) ; for ( Commit commit : commits . values ( ) ) { boolean matches = true ; for ( Expression expression : expressions ) { if ( ! matchesCommit ( expression , commit ) ) { matches = false ; break ; } } if ( matches ) { matchedCommits . add ( commit ) ; } } return matchedCommits ; }
  Tgt: return a list of commits matching the passed in query
  Pred: return a collection of keys for the specified parameters
333 Code: uninstall Border <sep> { LookAndFeel . uninstallBorder ( root ) ; }
  Tgt: remove any border that may have been installed
  Pred: paint the border
334 Code: replace Scheduler <sep> { scheduler . terminate ( ) ; scheduler = new Scheduler ( this ) ; scheduler . start ( ) ; }
  Tgt: replace the scheduler thread in the timer pool
  Pred: replace the current runs in the stack with the given pattern
335 Code: override <sep> { return compose ( OVERRIDE , expr ) ; }
  Tgt: return the relational override of this with the specified expression
  Pred: randomize the lattice of data using the specified probability
336 Code: Join All Threads <sep> { clockThread . join ( ) ; receiveThread . join ( ) ; }
  Tgt: join all running threads
  Pred: release all runs
337 Code: fill Round Rect <sep> { if ( cornerRadius < 0 ) throw new IllegalArgumentException ( "corner-radius-must-be->-0" ) ; if ( cornerRadius == 0 ) { fillRect ( x , y , width , height ) ; return ; } int mr = ( int ) Math . min ( width , height ) / 2 ; if ( cornerRadius > mr ) { cornerRadius = mr ; } float d = cornerRadius * 2 ; fillRect ( x + cornerRadius , y , width - d , cornerRadius ) ; fillRect ( x , y + cornerRadius , cornerRadius , height - d ) ; fillRect ( x + width - cornerRadius , y + cornerRadius , cornerRadius , height - d ) ; fillRect ( x + cornerRadius , y + height - cornerRadius , width - d , cornerRadius ) ; fillRect ( x + cornerRadius , y + cornerRadius , width - d , height - d ) ; fillArc ( x + width - d , y + height - d , d , d , segs , 0 , 90 ) ; fillArc ( x , y + height - d , d , d , segs , 90 , 180 ) ; fillArc ( x + width - d , y , d , d , segs , 270 , 360 ) ; fillArc ( x , y , d , d , segs , 180 , 270 ) ; }
  Tgt: fill a rounded rectangle
  Pred: give one of the specified range of the supplied length
338 Code: Suppress Warnings <sep> { try { LinkedList < E > l = ( LinkedList < E > ) super . clone ( ) ; l . size = 0 ; l . voidLink = new Link < E > ( null , null , null ) ; l . voidLink . previous = l . voidLink ; l . voidLink . next = l . voidLink ; l . addAll ( this ) ; return l ; } catch ( CloneNotSupportedException e ) { throw new AssertionError ( e ) ; } }
  Tgt: return a new linked list with the same elements and size as this linked list
  Pred: return a new vector with the same elements, size, capacity and capacity increment as this buffer
339 Code: interpolate X <sep> { double tempInterpolationXDimension ; double tempX = ( ( img . getHeight ( ) - col ) + 0 ) ; double tempY = ( ( farPixelWidth - nearPixelWidth ) / ( col - 0 ) ) ; tempInterpolationXDimension = nearPixelWidth + tempX + tempY ; return tempInterpolationXDimension ; }
  Tgt: perform the first interpolation
  Pred: this method turns the x axis
340 Code: fill Background <sep> { ParamChecks . nullNotPermitted ( orientation , "orientation" ) ; if ( this . backgroundPaint == null ) { return ; } Paint p = this . backgroundPaint ; if ( p instanceof GradientPaint ) { GradientPaint gp = ( GradientPaint ) p ; if ( orientation == PlotOrientation . VERTICAL ) { p = new GradientPaint ( ( float ) area . getCenterX ( ) , ( float ) area . getMaxY ( ) , gp . getColor1 ( ) , ( float ) area . getCenterX ( ) , ( float ) area . getMinY ( ) , gp . getColor2 ( ) ) ; } else if ( orientation == PlotOrientation . HORIZONTAL ) { p = new GradientPaint ( ( float ) area . getMinX ( ) , ( float ) area . getCenterY ( ) , gp . getColor1 ( ) , ( float ) area . getMaxX ( ) , ( float ) area . getCenterY ( ) , gp . getColor2 ( ) ) ; } } Composite originalComposite = g2 . getComposite ( ) ; g2 . setComposite ( AlphaComposite . getInstance ( AlphaComposite . SRC_OVER , this . backgroundAlpha ) ) ; g2 . setPaint ( p ) ; g2 . fill ( area ) ; g2 . setComposite ( originalComposite ) ; }
  Tgt: fill the specified area with the background paint
  Pred: show the background
341 Code: get Driver Names <sep> { String [ ] names = new String [ drivers . size ( ) ] ; for ( int i = 0 ; i < names . length ; i ++ ) { names [ i ] = ( drivers . get ( i ) ) . getName ( ) ; } return names ; }
  Tgt: return a string array containing all sound driver names
  Pred: return an array of field names for the methods instances
342 Code: set Max Iterations <sep> { if ( maxIterations < 5 ) throw new IllegalArgumentException ( Messages . getString ( "collision.continuous.conservativeAdvancement.invalidMaximumIterations" ) ) ; this . maxIterations = maxIterations ; }
  Tgt: set the maximum number of iterations that will be performed by the root finder
  Pred: set the maximum www font
343 Code: equals <sep> { if ( this == obj ) return true ; if ( obj instanceof ECFieldF2m ) { return ( ( m == ( ( ECFieldF2m ) obj ) . m ) && ( Arrays . equals ( ks , ( ( ECFieldF2m ) obj ) . ks ) ) ) ; } return false ; }
  Tgt: compare this finite field for equality with the specified object
  Pred: compare this object to the specified object
344 Code: byte2hex <sep> { String hs = "" ; String stmp ; for ( int n = 0 ; n < b . length ; n ++ ) { stmp = java . lang . Integer . toHexString ( b [ n ] & 0XFF ) ; if ( stmp . length ( ) == 1 ) { hs = hs + "0" + stmp ; } else { hs = hs + stmp ; } if ( n < b . length - 1 ) { hs = hs + "" ; } } return hs ; }
  Tgt: helper to convert a byte array to a hex encoded string
  Pred: return the child of the given string
345 Code: length_6 <sep> { double d = 0.0 ; d += x_6 * x_6 ; d += y_6 * y_6 ; return Math . sqrt ( d ) ; }
  Tgt: compute and return the length of vector 6
  Pred: put a special element
346 Code: usage <sep> { System . err . println ( "Usage:-java-" + Main . class . getName ( ) + "-[options]" ) ; System . err . println ( "--help-Shows-this-list-of-options" ) ; System . err . println ( "--config-configfile-Specifies-the-configuration-file-[conf/bot-config.xml]" ) ; System . exit ( - 1 ) ; }
  Tgt: print the usage information and exits
  Pred: print a usage message
347 Code: array Member Hash <sep> { if ( componentType . equals ( Byte . TYPE ) ) { return Arrays . hashCode ( ( byte [ ] ) o ) ; } if ( componentType . equals ( Short . TYPE ) ) { return Arrays . hashCode ( ( short [ ] ) o ) ; } if ( componentType . equals ( Integer . TYPE ) ) { return Arrays . hashCode ( ( int [ ] ) o ) ; } if ( componentType . equals ( Character . TYPE ) ) { return Arrays . hashCode ( ( char [ ] ) o ) ; } if ( componentType . equals ( Long . TYPE ) ) { return Arrays . hashCode ( ( long [ ] ) o ) ; } if ( componentType . equals ( Float . TYPE ) ) { return Arrays . hashCode ( ( float [ ] ) o ) ; } if ( componentType . equals ( Double . TYPE ) ) { return Arrays . hashCode ( ( double [ ] ) o ) ; } if ( componentType . equals ( Boolean . TYPE ) ) { return Arrays . hashCode ( ( boolean [ ] ) o ) ; } return Arrays . hashCode ( ( Object [ ] ) o ) ; }
  Tgt: generate a hash code for an array
  Pred: parse the number of detected zeros
348 Code: paint <sep> { this . paint ( g , this . getPosition ( ) ) ; }
  Tgt: dessine lellipse dans sa position originale
  Pred: paint the background
349 Code: is Partition A Equals To Partition B <sep> { return A . equals ( B ) ; }
  Tgt: determine if partition a represented as an add is equal to the partition b represented as another add
  Pred: determine whether the specified value is a subtype of this queue
350 Code: write Xref <sep> { out . write ( Util . htmlize ( content ) ) ; }
  Tgt: write a cross referenced html file
  Pred: write the tags to a href=DataInput
351 Code: get Image <sep> { if ( image == null ) { image = new ArrayList < Block . Images . Image > ( ) ; } return this . image ; }
  Tgt: get the value of the image property
  Pred: get the value of the image property
352 Code: set Dataset <sep> { if ( ! value . exists ( ) ) throw new IllegalArgumentException ( "Dataset-'" + value . getAbsolutePath ( ) + "'-does-not-exist!" ) ; else m_Dataset = value ; }
  Tgt: set the dataset to use for testing
  Pred: set the dataset to use for testing
353 Code: skip Until <sep> { for ( ; pos < input . length ( ) ; pos ++ ) { if ( characters . indexOf ( input . charAt ( pos ) ) != - 1 ) { break ; } } return pos ; }
  Tgt: return the next index in input at or after pos thatcontains a character from characters
  Pred: return the next index in input at or after pos thatcontains a character from characters
354 Code: compare To Ignore Case <sep> { int myLen = me . length ( ) , anotherLen = another . length ( ) ; int myPos = 0 , anotherPos = 0 , result ; int end = ( myLen < anotherLen ) ? myLen : anotherLen ; while ( myPos < end ) { if ( ( result = Character . toLowerCase ( me . charAt ( myPos ++ ) ) - Character . toLowerCase ( another . charAt ( anotherPos ++ ) ) ) != 0 ) { return result ; } } return myLen - anotherLen ; }
  Tgt: compare two character sequences with api like comparablecompare to
  Pred: compare a string to another representation
355 Code: key Set <sep> { return mValues . keySet ( ) ; }
  Tgt: return a set of all of the keys
  Pred: return an unmodifiable view of the keys in this map
356 Code: simplify <sep> { ast = ast . simplify ( ) ; }
  Tgt: simplify this regular expression
  Pred: agrega the job
357 Code: are Bounds Valid <sep> { Container cont = getContainer ( ) ; return cont == null || cont . isValid ( ) || cont . getLayout ( ) == null ; }
  Tgt: check whether we can trust the current bounds of the component
  Pred: check if the supplied image is in a different contexts
358 Code: parse Double <sep> { try { return Double . parseDouble ( text ) ; } catch ( NumberFormatException e ) { throw new DataParseException ( e ) ; } }
  Tgt: parse a double value from a text string
  Pred: parse the specified string representation
359 Code: get Row Name <sep> { List < ColumnName > result = new ArrayList < ColumnName > ( ) ; result . add ( row . head . name ) ; Node < ColumnName > node = row . right ; while ( node != row ) { result . add ( node . head . name ) ; node = node . right ; } return result ; }
  Tgt: get the name of a row by getting the list of column names that it satisfies
  Pred: this method initializes curve name
360 Code: e <sep> { if ( LOG . ERROR >= LOGLEVEL ) Log . e ( tag , String . format ( s , args ) ) ; }
  Tgt: error log message with printf formatting
  Pred: return the quantizer object
361 Code: create Temp File <sep> { return create ( dir , prefix , suffix , false , attrs ) ; }
  Tgt: create a temporary file in the given directory, or in in the temporary directory if dir is null
  Pred: create a new empty file in the specified directory, using the given prefix and suffix strings to generate its name
362 Code: add Codec <sep> { return REGISTERED . put ( name , c ) ; }
  Tgt: add a new codec implementation
  Pred: add a provided url to the learner
363 Code: Activity Chooser Model <sep> { mContext = context . getApplicationContext ( ) ; if ( ! TextUtils . isEmpty ( historyFileName ) && ! historyFileName . endsWith ( HISTORY_FILE_EXTENSION ) ) { mHistoryFileName = historyFileName + HISTORY_FILE_EXTENSION ; } else { mHistoryFileName = historyFileName ; } }
  Tgt: create a new instance
  Pred: create a new instance
364 Code: parse <sep> { CreateImageResponse object = new CreateImageResponse ( ) ; int event ; java . lang . String nillableValue = null ; java . lang . String prefix = "" ; java . lang . String namespaceuri = "" ; try { while ( ! reader . isStartElement ( ) && ! reader . isEndElement ( ) ) reader . next ( ) ; java . util . Vector handledAttributes = new java . util . Vector ( ) ; while ( ! reader . isEndElement ( ) ) { if ( reader . isStartElement ( ) ) { if ( reader . isStartElement ( ) && new javax . xml . namespace . QName ( "http://ec2.amazonaws.com/doc/2012-08-15/" , "CreateImageResponse" ) . equals ( reader . getName ( ) ) ) { object . setCreateImageResponse ( com . amazon . ec2 . CreateImageResponseType . Factory . parse ( reader ) ) ; } else { throw new org . apache . axis2 . databinding . ADBException ( "Unexpected-subelement-" + reader . getLocalName ( ) ) ; } } else { reader . next ( ) ; } } } catch ( javax . xml . stream . XMLStreamException e ) { throw new java . lang . Exception ( e ) ; } return object ; }
  Tgt: create the object
  Pred: create the object
365 Code: copy <sep> { return new Location ( this ) ; }
  Tgt: return a new location that has the same coordinate values as this location
  Pred: make a copy of this menu
366 Code: set Adjust View Bounds <sep> { mAdjustViewBounds = adjustViewBounds ; if ( adjustViewBounds ) { setScaleType ( ScaleType . FIT_CENTER ) ; } }
  Tgt: set this to true if you want the image view to adjust its bounds to preserve the aspect ratio of its drawable
  Pred: set the pen color panel
367 Code: build Ack Relay Forw <sep> { ByteArrayOutputStream boStream = new ByteArrayOutputStream ( ) ; DataOutputStream doStream = new DataOutputStream ( boStream ) ; String content = sequenceNumber + "_" + Parameters . ACK_RELAY_FORW + "_" + trasmissionPort + "_" + trasmissionCtrlPort ; doStream . writeUTF ( content ) ; doStream . flush ( ) ; byte [ ] data = boStream . toByteArray ( ) ; return new DatagramPacket ( data , data . length , addr , port ) ; }
  Tgt: messaggio ack relay forw
  Pred: build a new instance for the annotations from the latest cursors
368 Code: set Grid <sep> { currentLocation = new Location ( 0 , 0 ) ; JViewport vp = getEnclosingViewport ( ) ; if ( vp != null ) vp . setViewPosition ( new Point ( 0 , 0 ) ) ; grid = gr ; originRow = originCol = 0 ; if ( grid . getNumRows ( ) == - 1 && grid . getNumCols ( ) == - 1 ) { numRows = numCols = 2000 ; } else { numRows = grid . getNumRows ( ) ; numCols = grid . getNumCols ( ) ; } recalculateCellSize ( MIN_CELL_SIZE ) ; }
  Tgt: set the grid being displayed
  Pred: set whether the table is cancelable
369 Code: index Of <sep> { if ( x != null ) { if ( x instanceof ScheduledFutureTask ) { int i = ( ( ScheduledFutureTask ) x ) . heapIndex ; if ( i >= 0 && i < size && queue [ i ] == x ) return i ; } else { for ( int i = 0 ; i < size ; i ++ ) if ( x . equals ( queue [ i ] ) ) return i ; } } return - 1 ; }
  Tgt: find index of given object, or one if absent
  Pred: search backwards for the specified object, starting from the specified byte sequence
370 Code: update In Load Menu Items <sep> { if ( menu == null ) { return ; } MenuItem dest = menu . findItem ( R . id . stop_reload_menu_id ) ; MenuItem src = ( ( tab != null ) && tab . inPageLoad ( ) ) ? menu . findItem ( R . id . stop_menu_id ) : menu . findItem ( R . id . reload_menu_id ) ; if ( src != null ) { dest . setIcon ( src . getIcon ( ) ) ; dest . setTitle ( src . getTitle ( ) ) ; } }
  Tgt: as the menu can be open when loading state changes we must manually update the state of the stop reload menu item
  Pred: update the in all selected items in the container
371 Code: tags By Version <sep> Map < Long , Set < String >> result = new HashMap < Long , Set < String >> ( ) ; for ( Map . Entry < String , Long > entry : vtags . entrySet ( ) ) { Set < String > tags = result . get ( entry . getValue ( ) ) ; if ( tags == null ) { tags = new HashSet < String > ( ) ; result . put ( entry . getValue ( ) , tags ) ; } tags . add ( entry . getKey ( ) ) ; } return result ; }
  Tgt: invert a map containing version by tag to a map containing tags by version
  Pred: decrease function
372 Code: get Primary Key Column <sep> { logger . debug ( "getPrimaryKeyColumn(conn={},-table={})---start" , conn , table ) ; DatabaseMetaData metadata = conn . getMetaData ( ) ; ResultSet rs = metadata . getPrimaryKeys ( null , null , table ) ; rs . next ( ) ; String pkColumn = rs . getString ( 4 ) ; return pkColumn ; }
  Tgt: get the primary column for a table
  Pred: return the values of a highest column
373 Code: add <sep> { if ( name == null || out == null ) { throw new IllegalArgumentException ( ) ; } return ( OutputStream ) streams . put ( name , out ) ; }
  Tgt: add a given output stream to those contained by this multicaster
  Pred: insert the specified element at the specified position in this list
374 Code: add After <sep> { Preconditions . checkState ( inputs . contains ( other ) ) ; inputs . add ( inputs . indexOf ( other ) , input ) ; input . setModule ( this ) ; }
  Tgt: add a source code input to this module directly after other
  Pred: add a new value
375 Code: add <sep> { if ( isReadOnly ( ) ) { throw new IllegalStateException ( ) ; } if ( permission instanceof FilePermission ) { permissions . addElement ( permission ) ; } else { throw new IllegalArgumentException ( permission . toString ( ) ) ; } }
  Tgt: add a permission object to the permission collection
  Pred: add a new event to the list of parameters
376 Code: nap <sep> { try { Thread . sleep ( sec ) ; } catch ( InterruptedException e ) { logger . error ( "Failed-to-sleep" ) ; } }
  Tgt: sleep for several seconds
  Pred: construct the connection
377 Code: set Loopback Mode <sep> { getImpl ( ) . setOption ( SocketOptions . IP_MULTICAST_LOOP , Boolean . valueOf ( disable ) ) ; }
  Tgt: disable enable local loopback of multicast datagrams the option is used by the platforms networking code as a hint for setting whether multicast data will be looped back to the local socket
  Pred: enable disable tls mode for shared datagrams
378 Code: Decode For Jmx <sep> { return input . replace ( "&colon;" , ":" ) ; }
  Tgt: de mangles a given string that is acceptable for jmx
  Pred: shorten a reference from the array
379 Code: write Q Name <sep> { java . lang . String namespaceURI = qname . getNamespaceURI ( ) ; if ( namespaceURI != null ) { java . lang . String prefix = xmlWriter . getPrefix ( namespaceURI ) ; if ( prefix == null ) { prefix = generatePrefix ( namespaceURI ) ; xmlWriter . writeNamespace ( prefix , namespaceURI ) ; xmlWriter . setPrefix ( prefix , namespaceURI ) ; } if ( prefix . trim ( ) . length ( ) > 0 ) { xmlWriter . writeCharacters ( prefix + ":" + org . apache . axis2 . databinding . utils . ConverterUtil . convertToString ( qname ) ) ; } else { xmlWriter . writeCharacters ( org . apache . axis2 . databinding . utils . ConverterUtil . convertToString ( qname ) ) ; } } else { xmlWriter . writeCharacters ( org . apache . axis2 . databinding . utils . ConverterUtil . convertToString ( qname ) ) ; } }
  Tgt: handle qnames
  Pred: handle qnames
380 Code: Suppress Warnings <sep> { FancyMessage msg = new FancyMessage ( ) ; msg . messageParts = ( List < MessagePart > ) serialized . get ( "messageParts" ) ; msg . jsonString = serialized . containsKey ( "JSON" ) ? serialized . get ( "JSON" ) . toString ( ) : null ; msg . dirty = ! serialized . containsKey ( "JSON" ) ; return msg ; }
  Tgt: deserialize a json represented message from a mapping of key value pairs
  Pred: open the list of elements from the audio input stream
381 Code: in Same Package <sep> { String nameC1 = c1 . getName ( ) ; String nameC2 = c2 . getName ( ) ; int indexDotC1 = nameC1 . lastIndexOf ( '.' ) ; int indexDotC2 = nameC2 . lastIndexOf ( '.' ) ; if ( indexDotC1 != indexDotC2 ) { return false ; } if ( indexDotC1 < 0 ) { return true ; } return nameC1 . substring ( 0 , indexDotC1 ) . equals ( nameC2 . substring ( 0 , indexDotC2 ) ) ; }
  Tgt: check if two classes belong to the same package
  Pred: check if the supplied class is a different package
382 Code: new Duration <sep> { return new DurationImpl ( isPositive , years , months , days , hours , minutes , seconds ) ; }
  Tgt: obtain a new instance of a duration specifying the duration as isPositive, years, months, days, hours, minutes, seconds
  Pred: create a new regular object, by bytecode
383 Code: add Header <sep> { clientHeaderMap . put ( header , value ) ; }
  Tgt: set headers that will be added to all requests this client makes
  Pred: add the given header header to the group
384 Code: get Connection <sep> { Properties theProperties = new Properties ( ) ; if ( null != user ) { theProperties . setProperty ( "user" , user ) ; } if ( null != password ) { theProperties . setProperty ( "password" , password ) ; } return getConnection ( url , theProperties ) ; }
  Tgt: attempt to establish a connection to the given database url
  Pred: return a connection object that can be used to do any drawing connections
385 Code: is Persisted <sep> { boolean result = false ; try { InputStream stream = editingDomain . getResourceSet ( ) . getURIConverter ( ) . createInputStream ( resource . getURI ( ) ) ; if ( stream != null ) { result = true ; stream . close ( ) ; } } catch ( IOException e ) { } return result ; }
  Tgt: this returns whether something has been persisted to the uri of the specified resource
  Pred: check if the given partial name is a subtype of this polygon
386 Code: Abstract Hashed Map <sep> { super ( ) ; if ( initialCapacity < 1 ) { throw new IllegalArgumentException ( "Initial-capacity-must-be-greater-than-0" ) ; } if ( loadFactor <= 0.0f || Float . isNaN ( loadFactor ) ) { throw new IllegalArgumentException ( "Load-factor-must-be-greater-than-0" ) ; } this . loadFactor = loadFactor ; this . threshold = calculateThreshold ( initialCapacity , loadFactor ) ; initialCapacity = calculateNewCapacity ( initialCapacity ) ; this . data = new HashEntry [ initialCapacity ] ; init ( ) ; }
  Tgt: construct a new, empty map with the specified initial capacity and load factor
  Pred: create elements from the map
387 Code: get Groups <sep> { WrapperGroup [ ] groups = new WrapperGroup [ m_groups . size ( ) ] ; m_groups . toArray ( groups ) ; return groups ; }
  Tgt: return an array of wrapper group instances which define the groups that the user belongs to
  Pred: return all facies values that are bigger in the pending
388 Code: add Meta Data <sep> { key = key . toLowerCase ( ) ; this . meta . put ( key , value ) ; return this ; }
  Tgt: add a meta data key value pair linked to this player
  Pred: add the given properties to the provided data stream
389 Code: get Current Node <sep> { return m_xcontext . getCurrentNode ( ) ; }
  Tgt: this method retrieves the current context node in the source tree
  Pred: get the current context node
390 Code: select Dropdown By Visible Text_ Class Name <sep> { new Select ( findByClassname ( locator ) ) . selectByVisibleText ( value ) ; }
  Tgt: select a text value from a dropdown by class name
  Pred: look the class name of the object corresponding to the given test and feel
391 Code: set Request Line <sep> { requestLine = requestLine . trim ( ) ; this . requestLine = requestLine ; }
  Tgt: set the request line like get http 1
  Pred: set the http http line update
392 Code: get Random Power Up Type <sep> { List < PowerUpType > powerUps = Collections . unmodifiableList ( Arrays . asList ( PowerUpType . values ( ) ) ) ; int size = powerUps . size ( ) ; Random random = new Random ( ) ; this . type = powerUps . get ( random . nextInt ( size ) ) ; }
  Tgt: create a random powerup type for a block
  Pred: return the random of the given type
393 Code: read Single Byte <sep> { byte [ ] buffer = new byte [ 1 ] ; int result = in . read ( buffer , 0 , 1 ) ; return ( result != - 1 ) ? buffer [ 0 ] & 0xff : - 1 ; }
  Tgt: implement input stream
  Pred: implement input stream
394 Code: set <sep> { return set ( new Float ( f ) , index ) ; }
  Tgt: replace an object in the list of parameters with a float
  Pred: set the value of the function for the argument
395 Code: Suppress Warnings <sep> { Set < Map . Entry < String , Long >> entrySet = dataDistri . entrySet ( ) ; Map . Entry < String , Long > [ ] hostSize = entrySet . toArray ( new Map . Entry [ entrySet . size ( ) ] ) ; Arrays . sort ( hostSize , new Comparator < Map . Entry < String , Long >> ( ) { @ Override public int compare ( Entry < String , Long > o1 , Entry < String , Long > o2 ) { long diff = o1 . getValue ( ) - o2 . getValue ( ) ; if ( diff < 0 ) return 1 ; if ( diff > 0 ) return - 1 ; return 0 ; } } ) ; int nHost = Math . min ( hostSize . length , n ) ; String [ ] ret = new String [ nHost ] ; for ( int i = 0 ; i < nHost ; ++ i ) { ret [ i ] = hostSize [ i ] . getKey ( ) ; } return ret ; }
  Tgt: get up to n hosts that own the most bytes
  Pred: decrease pattern
396 Code: fire Menu Key Released <sep> { EventListener [ ] ll = listenerList . getListeners ( MenuKeyListener . class ) ; for ( int i = 0 ; i < ll . length ; i ++ ) ( ( MenuKeyListener ) ll [ i ] ) . menuKeyTyped ( event ) ; }
  Tgt: this method fires a menu key event to all the menu items menu key listeners
  Pred: fire a key shortcut event
397 Code: add All <sep> { Object [ ] dumpArray = collection . toArray ( ) ; if ( dumpArray . length == 0 ) { return false ; } if ( dumpArray . length > array . length - ( firstIndex + size ) ) { growAtEnd ( dumpArray . length ) ; } System . arraycopy ( dumpArray , 0 , this . array , firstIndex + size , dumpArray . length ) ; size += dumpArray . length ; modCount ++ ; return true ; }
  Tgt: add the objects in the specified collection to this array list
  Pred: add the objects of in the specified collection to this array list
398 Code: Xml Element Decl <sep> { return new JAXBElement < XFkType > ( new QName ( "" , "newDialPlanName" ) , XFkType . class , UpdateCallingPartyTransformationPatternReq . class , value ) ; }
  Tgt: create an instance of jaxb element
  Pred: create an instance of jaxb element
399 Code: line Iterator <sep> { return new LineIterator ( reader ) ; }
  Tgt: return an iterator for the lines in a reader
  Pred: return a iterator over the distance
400 Code: run Finalization <sep> { Runtime . getRuntime ( ) . runFinalization ( ) ; }
  Tgt: provide a hint to the virtual machine that it would be useful to attempt to perform any outstanding object finalization
  Pred: run the thread to run the thread
401 Code: add O I D <sep> { int [ ] newOid = oid . getOid ( ) ; int index = hashIntArray ( newOid ) % CAPACITY ; ObjectIdentifier [ ] list = KNOWN_OIDS [ index ] ; int i = 0 ; for ( ; list [ i ] != null ; i ++ ) { if ( Arrays . equals ( newOid , list [ i ] . getOid ( ) ) ) { throw new Error ( "ObjectIdentifier:-invalid-static-initialization;-" + "duplicate-OIDs:-" + oid . getName ( ) + "-" + list [ i ] . getName ( ) ) ; } } if ( i == ( CAPACITY - 1 ) ) { throw new Error ( "ObjectIdentifier:-invalid-static-initialization;-" + "small-OID-pool-capacity" ) ; } list [ i ] = oid ; }
  Tgt: add known oid to pool
  Pred: create a cid cid element
402 Code: new Token <sep> { switch ( ofKind ) { default : return new Token ( ) ; } }
  Tgt: return a new token object, by default
  Pred: return a new token object, by default
403 Code: clear Key Bindings <sep> { keyStrokePairs . clear ( ) ; }
  Tgt: clear all active bindings
  Pred: clear all the queries of a given combiner class
404 Code: get File Menu <sep> { if ( fileMenu == null ) { fileMenu = new JMenu ( ) ; fileMenu . setText ( "File" ) ; fileMenu . add ( getExitMenuItem ( ) ) ; } return fileMenu ; }
  Tgt: this method initializes j menu
  Pred: return file rename to a given file
405 Code: clear <sep> { for ( int i = 0 ; i < mInternalList . size ( ) ; i ++ ) { signal_list_event ( EventHandler . CustomMediaListItemDeleted , i , mInternalList . get ( i ) . m . getLocation ( ) ) ; } mInternalList . clear ( ) ; }
  Tgt: clear the media list
  Pred: atomically clears all of the elements from this queue
406 Code: close Quietly <sep> { if ( serverSocket != null ) { try { serverSocket . close ( ) ; } catch ( RuntimeException rethrown ) { throw rethrown ; } catch ( Exception ignored ) { } } }
  Tgt: close serverSocket, ignoring any checked exceptions
  Pred: close serverSocket, ignoring any checked exceptions
407 Code: populate Veh Class Combo Box <sep> { ivjcomboVehClass . removeActionListener ( this ) ; ivjcomboVehClass . removeAllItems ( ) ; if ( aiEffDt != 0 ) { cvVehClassCombo = RegistrationClassCache . getVehClassCds ( aiEffDt ) ; if ( cvVehClassCombo == null ) { throw new RTSException ( RTSException . FAILURE_MESSAGE , TXT_NULL_VEH_CLS , TXT_ERROR ) ; } int liSize = cvVehClassCombo . size ( ) ; if ( liSize == 0 ) { throw new RTSException ( RTSException . FAILURE_MESSAGE , TXT_NULL_VEH_CLS , TXT_ERROR ) ; } for ( int i = 0 ; i < liSize ; i ++ ) { RegistrationClassData laVehCdCacheData = ( RegistrationClassData ) cvVehClassCombo . get ( i ) ; ivjcomboVehClass . addItem ( ( String ) laVehCdCacheData . getVehClassCd ( ) ) ; } } else { throw new RTSException ( RTSException . FAILURE_MESSAGE , TXT_NULL_EFF_DT , TXT_ERROR ) ; } ivjcomboVehClass . addActionListener ( this ) ; }
  Tgt: populate the vehicle class combo box based on the effective date
  Pred: initialize the form of the form with the given key
408 Code: get Type <sep> { if ( i < 0 || i >= types . size ( ) ) { return null ; } return types . get ( i ) ; }
  Tgt: get the type of an attribute
  Pred: get the type of an attribute
409 Code: remove View <sep> { if ( mViewToLinkedList . containsKey ( rvfl ) ) { mViewToLinkedList . get ( rvfl ) . remove ( rvfl ) ; mViewToLinkedList . remove ( rvfl ) ; } }
  Tgt: we need to remove views from this set if they have been recycled by the adapter view
  Pred: remove this view from the view
410 Code: create From Rendered Image <sep> { if ( image == null ) { throw new IllegalArgumentException ( "image-==-null!" ) ; } if ( image instanceof BufferedImage ) { int bufferedImageType = ( ( BufferedImage ) image ) . getType ( ) ; if ( bufferedImageType != BufferedImage . TYPE_CUSTOM ) { return getSpecifier ( bufferedImageType ) ; } } return new ImageTypeSpecifier ( image ) ; }
  Tgt: return an image type specifier that encodes the layout of a rendered image
  Pred: create a new image with the given prefix and arguments,
411 Code: load Interpolator <sep> { XmlResourceParser parser = null ; try { parser = context . getResources ( ) . getAnimation ( id ) ; return createInterpolatorFromXml ( context . getResources ( ) , context . getTheme ( ) , parser ) ; } catch ( XmlPullParserException ex ) { NotFoundException rnf = new NotFoundException ( "Can't-load-animation-resource-ID-#0x" + Integer . toHexString ( id ) ) ; rnf . initCause ( ex ) ; throw rnf ; } catch ( IOException ex ) { NotFoundException rnf = new NotFoundException ( "Can't-load-animation-resource-ID-#0x" + Integer . toHexString ( id ) ) ; rnf . initCause ( ex ) ; throw rnf ; } finally { if ( parser != null ) parser . close ( ) ; } }
  Tgt: load an interpolator object from a resource
  Pred: load properties from a audio file
412 Code: parse <sep> { DescribeExportTasks object = new DescribeExportTasks ( ) ; int event ; java . lang . String nillableValue = null ; java . lang . String prefix = "" ; java . lang . String namespaceuri = "" ; try { while ( ! reader . isStartElement ( ) && ! reader . isEndElement ( ) ) reader . next ( ) ; java . util . Vector handledAttributes = new java . util . Vector ( ) ; while ( ! reader . isEndElement ( ) ) { if ( reader . isStartElement ( ) ) { if ( reader . isStartElement ( ) && new javax . xml . namespace . QName ( "http://ec2.amazonaws.com/doc/2012-08-15/" , "DescribeExportTasks" ) . equals ( reader . getName ( ) ) ) { object . setDescribeExportTasks ( com . amazon . ec2 . DescribeExportTasksType . Factory . parse ( reader ) ) ; } else { throw new org . apache . axis2 . databinding . ADBException ( "Unexpected-subelement-" + reader . getLocalName ( ) ) ; } } else { reader . next ( ) ; } } } catch ( javax . xml . stream . XMLStreamException e ) { throw new java . lang . Exception ( e ) ; } return object ; }
  Tgt: create the object
  Pred: create the object
413 Code: parse Permission Entry <sep> { PermissionEntry e = new PermissionEntry ( ) ; match ( "Permission" ) ; e . permission = match ( "permission-type" ) ; if ( peek ( """ ) ) { e . name = expand ( match ( "quoted-string" ) ) ; } if ( ! peek ( "," ) ) { return e ; } match ( "," ) ; if ( peek ( """ ) ) { e . action = expand ( match ( "quoted-string" ) ) ; if ( ! peek ( "," ) ) { return e ; } match ( "," ) ; } if ( peekAndMatch ( "SignedBy" ) ) { e . signedBy = expand ( match ( "quoted-string" ) ) ; } return e ; }
  Tgt: parse a permission entry
  Pred: parse the specified character and returns it
414 Code: is Before <sep> { Version serviceVersion = findServiceVersion ( impliedVersions , v . getServiceClass ( ) ) ; Preconditions . checkArgument ( serviceVersion != null , "No-relationship-between-versions" ) ; if ( serviceVersion . major != v . major ) { return serviceVersion . major < v . major ; } else { return serviceVersion . minor < v . minor ; } }
  Tgt: check if this version is a earlier version than theargument, on the basis of comparing the major and minor versions
  Pred: return whether the given name is deprecated
415 Code: unpark Successor <sep> { int ws = node . waitStatus ; if ( ws < 0 ) compareAndSetWaitStatus ( node , ws , 0 ) ; Node s = node . next ; if ( s == null || s . waitStatus > 0 ) { s = null ; for ( Node t = tail ; t != null && t != node ; t = t . prev ) if ( t . waitStatus <= 0 ) s = t ; } if ( s != null ) LockSupport . unpark ( s . thread ) ; }
  Tgt: wake up nodes successor, if one exists
  Pred: izbacuje interpolator by the RFC2965
416 Code: generate U U I D <sep> { return UUID . randomUUID ( ) . toString ( ) ; }
  Tgt: generate a uuid which conforms to a href=http: www
  Pred: generate a unique string each time it is called
417 Code: get Word End <sep> { Document doc = c . getDocument ( ) ; Element line = getParagraphElement ( c , offs ) ; if ( line == null ) { throw new BadLocationException ( "No-word-at-" + offs , offs ) ; } int lineStart = line . getStartOffset ( ) ; int lineEnd = Math . min ( line . getEndOffset ( ) , doc . getLength ( ) ) ; Segment seg = SegmentCache . getSharedSegment ( ) ; doc . getText ( lineStart , lineEnd - lineStart , seg ) ; if ( seg . count > 0 ) { BreakIterator words = BreakIterator . getWordInstance ( c . getLocale ( ) ) ; words . setText ( seg ) ; int wordPosition = offs - lineStart + seg . offset ; if ( wordPosition >= words . last ( ) ) { wordPosition = words . last ( ) - 1 ; } offs = lineStart + words . following ( wordPosition ) - seg . offset ; } SegmentCache . releaseSharedSegment ( seg ) ; return offs ; }
  Tgt: determine the end of a word for the given location
  Pred: return the last distance in the word, row
418 Code: get All Frames <sep> { return getAllFrames ( this ) . toArray ( new JInternalFrame [ 0 ] ) ; }
  Tgt: return all j internal frames currently displayed in the desktop
  Pred: return a list of all the condition in the map
419 Code: set Will Not Cache Drawing <sep> { setFlags ( willNotCacheDrawing ? WILL_NOT_CACHE_DRAWING : 0 , WILL_NOT_CACHE_DRAWING ) ; }
  Tgt: when a views drawing cache is enabled, drawing is redirected to an offscreen bitmap
  Pred: set the exceptions of tasks to be used
420 Code: get Bottom Producer Value <sep> { return producerStack . getBottom ( index ) ; }
  Tgt: get the specified producer value from the stack, without disturbing it
  Pred: return the value of the database described by the specified alias
421 Code: intern <sep> { return s == null ? s : s . intern ( ) ; }
  Tgt: null safe string intern method
  Pred: return the intersection of the given predicate
422 Code: get Encoding Type <sep> { return ( String ) content . get ( FIELD_TYPE ) ; }
  Tgt: return the encoding type
  Pred: return the encoding type for the specified encoding
423 Code: get Invert Selection <sep> { return ! m_SelectCols . getInvert ( ) ; }
  Tgt: get whether the supplied columns are to be removed or kept
  Pred: return the number of rows in the table
424 Code: reconnect <sep> { Connection con = connection . get ( ) ; if ( con != null ) { if ( temporaryTableScope == TemporaryTableScope . TRANSACTION_LOCAL ) { con . commit ( ) ; } con . close ( ) ; connection . set ( null ) ; if ( con == temporaryTableSession ) { temporaryTableSession = null ; return ; } } if ( temporaryTableSession != null ) { if ( temporaryTableScope == TemporaryTableScope . TRANSACTION_LOCAL ) { temporaryTableSession . commit ( ) ; } temporaryTableSession . close ( ) ; temporaryTableSession = null ; } }
  Tgt: close current connection and opens a new one
  Pred: resume the chromosome logger
425 Code: create URL Stream Handler <sep> { if ( ! protocol . equals ( "http" ) && ! protocol . equals ( "https" ) ) return null ; return new URLStreamHandler ( ) { @ Override protected URLConnection openConnection ( URL url ) { return open ( url ) ; } @ Override protected URLConnection openConnection ( URL url , Proxy proxy ) { return open ( url , proxy ) ; } @ Override protected int getDefaultPort ( ) { if ( protocol . equals ( "http" ) ) return 80 ; if ( protocol . equals ( "https" ) ) return 443 ; throw new AssertionError ( ) ; } } ; }
  Tgt: create a url stream handler as a ur lset url stream handler factory
  Pred: create a url stream handler as a ur lset url stream handler factory
426 Code: start Task <sep> { lock . lock ( ) ; try { if ( isShutdown ( ) ) { throw new RejectedExecutionException ( "Executor-already-shutdown" ) ; } runningTasks ++ ; } finally { lock . unlock ( ) ; } }
  Tgt: check if the executor has been shut down and increments the running task count
  Pred: start that
427 Code: get Reference Client Block File List <sep> { String defaultDataDir ; if ( System . getProperty ( "os.name" ) . toLowerCase ( ) . indexOf ( "win" ) >= 0 ) { defaultDataDir = System . getenv ( "APPDATA" ) + "|.bitcoin|blocks|" ; } else { defaultDataDir = System . getProperty ( "user.home" ) + "/.bitcoin/blocks/" ; } List < File > list = new LinkedList < File > ( ) ; for ( int i = 0 ; true ; i ++ ) { File file = new File ( defaultDataDir + String . format ( "blk%05d.dat" , i ) ) ; if ( ! file . exists ( ) ) break ; list . add ( file ) ; } return list ; }
  Tgt: get the list of files which contain blocks from the satoshi client
  Pred: return a list of all servlet
428 Code: write Millis <sep> { if ( millis % ( 30 * 60000L ) == 0 ) { long units = millis / ( 30 * 60000L ) ; if ( ( ( units << ( 64 - 6 ) ) >> ( 64 - 6 ) ) == units ) { out . writeByte ( ( int ) ( units & 0x3f ) ) ; return ; } } if ( millis % 60000L == 0 ) { long minutes = millis / 60000L ; if ( ( ( minutes << ( 64 - 30 ) ) >> ( 64 - 30 ) ) == minutes ) { out . writeInt ( 0x40000000 | ( int ) ( minutes & 0x3fffffff ) ) ; return ; } } if ( millis % 1000L == 0 ) { long seconds = millis / 1000L ; if ( ( ( seconds << ( 64 - 38 ) ) >> ( 64 - 38 ) ) == seconds ) { out . writeByte ( 0x80 | ( int ) ( ( seconds >> 32 ) & 0x3f ) ) ; out . writeInt ( ( int ) ( seconds & 0xffffffff ) ) ; return ; } } out . writeByte ( millis < 0 ? 0xff : 0xc0 ) ; out . writeLong ( millis ) ; }
  Tgt: millisecond encoding formats: upper two bits units field length approximate range 00 30 minutes one byte + 16 hours 01 minutes 4 bytes + 1020 years 10 seconds 5 bytes + 4355 years 11 millis 9 bytes + 292,000,000 years remaining bits in field form signed offset from 1970 01 01T00:00:00Z
  Pred: return a big number of the annotations
429 Code: get Src Bytes <sep> { java . lang . Object ref = src_ ; if ( ref instanceof String ) { com . google . protobuf . ByteString b = com . google . protobuf . ByteString . copyFromUtf8 ( ( java . lang . String ) ref ) ; src_ = b ; return b ; } else { return ( com . google . protobuf . ByteString ) ref ; } }
  Tgt: require string src = 1;
  Pred: optional string diagnostics = 1;
430 Code: number Of Words <sep> { return words . countTokens ( ) ; }
  Tgt: get the number of words in the transcription
  Pred: return the number of layers zeros in this template
431 Code: create Set From Property <sep> { HashSet < String > properties = new HashSet < String > ( ) ; if ( property != null && ! property . equals ( "null" ) ) { Pattern params = Pattern . compile ( "([|w]+)[;]*" ) ; Matcher matcher = params . matcher ( property . trim ( ) ) ; while ( matcher . find ( ) ) { properties . add ( matcher . group ( 1 ) ) ; } } return properties ; }
  Tgt: parse property string into hash set
  Pred: return a property value by key
432 Code: generate Uri <sep> { return new StringBuffer ( uriPrefix ) . append ( "#" ) . append ( String . valueOf ( System . currentTimeMillis ( ) ) ) . toString ( ) ; }
  Tgt: generate an uri with the given prefix
  Pred: return the sanitized or null code
433 Code: select Single Node <sep> { return selectSingleNode ( contextNode , xpathnode , contextNode ) ; }
  Tgt: use an x path string to select a single node
  Pred: this method
434 Code: get Parent Group <sep> { Object o = props . get ( PROP_PARENT_CONTROL ) ; if ( o instanceof Group ) return ( Group ) o ; return null ; }
  Tgt: return the group control that contains this form control as a direct child
  Pred: get the parent parent of the label
435 Code: Suppress Warnings <sep> { try { LinkedList < E > l = ( LinkedList < E > ) super . clone ( ) ; l . size = 0 ; l . voidLink = new Link < E > ( null , null , null ) ; l . voidLink . previous = l . voidLink ; l . voidLink . next = l . voidLink ; l . addAll ( this ) ; return l ; } catch ( CloneNotSupportedException e ) { throw new AssertionError ( e ) ; } }
  Tgt: return a new linked list with the same elements and size as this linked list
  Pred: return a new vector with the same elements, size, capacity and end increment as this vector
436 Code: write Q Name Attribute <sep> { java . lang . String attributeNamespace = qname . getNamespaceURI ( ) ; java . lang . String attributePrefix = xmlWriter . getPrefix ( attributeNamespace ) ; if ( attributePrefix == null ) { attributePrefix = registerPrefix ( xmlWriter , attributeNamespace ) ; } java . lang . String attributeValue ; if ( attributePrefix . trim ( ) . length ( ) > 0 ) { attributeValue = attributePrefix + ":" + qname . getLocalPart ( ) ; } else { attributeValue = qname . getLocalPart ( ) ; } if ( namespace . equals ( "" ) ) { xmlWriter . writeAttribute ( attName , attributeValue ) ; } else { registerPrefix ( xmlWriter , namespace ) ; xmlWriter . writeAttribute ( namespace , attName , attributeValue ) ; } }
  Tgt: write an attribute without the ns prefix
  Pred: write an attribute without the ns prefix
437 Code: runtime <sep> { if ( running == 0 ) return 0 ; return System . currentTimeMillis ( ) - running ; }
  Tgt: calculate how long the codelet has been running
  Pred: return the connection of the given string
438 Code: get Param Help <sep> { return ( String [ ] ) paramHelp . toArray ( new String [ paramHelp . size ( ) ] ) ; }
  Tgt: index property param help
  Pred: return the value of the parameter property
439 Code: is Defined <sep> { Object [ ] a = attributes ; int n = a . length ; for ( int i = 0 ; i < n ; i += 2 ) { if ( key . equals ( a [ i ] ) ) { return true ; } } return false ; }
  Tgt: check whether a given attribute is defined
  Pred: check whether the given attribute is defined
440 Code: new Note <sep> { mAllNotes . add ( note ) ; Collections . sort ( mAllNotes , sCompDueDateDesc ) ; mOngoingNotes . add ( note ) ; Collections . sort ( mOngoingNotes , sCompDueDateAsc ) ; notifyModelChanged ( ) ; }
  Tgt: add a note to models, and notify data observers
  Pred: create a new reader with a particular location and debugging
441 Code: create Endpoint Study Record Scientific Part T O P H O T O T R A N S A I R A D Set <sep> { return new EndpointStudyRecord . ScientificPart . TOPHOTOTRANSAIR . AD . Set ( ) ; }
  Tgt: create an instance of endpoint study record
  Pred: create an instance of endpoint study record
442 Code: get Weekdays <sep> { return weekdays . clone ( ) ; }
  Tgt: return the array of strings containing the full names of the days of the week
  Pred: return the array of strings containing the full names of the days of the week
443 Code: get Ulimit Memory Command <sep> { if ( WINDOWS ) { return null ; } String ulimit = conf . get ( "mapred.child.ulimit" ) ; if ( ulimit == null ) { return null ; } int memoryLimit = Integer . valueOf ( ulimit ) ; return getUlimitMemoryCommand ( memoryLimit ) ; }
  Tgt: get the unix command for setting the maximum virtual memory available to a given child process
  Pred: get the original dynamic given string
444 Code: add Grid Component <sep> { GridBagConstraints c = new GridBagConstraints ( ) ; c . gridx = gridx ; c . gridy = gridy ; c . gridwidth = gridw ; c . gridheight = gridh ; c . fill = GridBagConstraints . BOTH ; c . weighty = weighty ; c . weightx = weightx ; c . anchor = GridBagConstraints . CENTER ; mygb . setConstraints ( comp , c ) ; cont . add ( comp ) ; }
  Tgt: add a component to our gridbag layout
  Pred: add a pause component
445 Code: write Q Name Attribute <sep> { java . lang . String attributeNamespace = qname . getNamespaceURI ( ) ; java . lang . String attributePrefix = xmlWriter . getPrefix ( attributeNamespace ) ; if ( attributePrefix == null ) { attributePrefix = registerPrefix ( xmlWriter , attributeNamespace ) ; } java . lang . String attributeValue ; if ( attributePrefix . trim ( ) . length ( ) > 0 ) { attributeValue = attributePrefix + ":" + qname . getLocalPart ( ) ; } else { attributeValue = qname . getLocalPart ( ) ; } if ( namespace . equals ( "" ) ) { xmlWriter . writeAttribute ( attName , attributeValue ) ; } else { registerPrefix ( xmlWriter , namespace ) ; xmlWriter . writeAttribute ( namespace , attName , attributeValue ) ; } }
  Tgt: write an attribute without the ns prefix
  Pred: write an attribute without the ns prefix
446 Code: replace <sep> { if ( frozen ) { throw new CompilerError ( "replace()" ) ; } Identifier name = method . getName ( ) ; List methodList = ( List ) lookupMap . get ( name ) ; if ( methodList == null ) { methodList = new ArrayList ( ) ; lookupMap . put ( name , methodList ) ; } int size = methodList . size ( ) ; for ( int i = 0 ; i < size ; i ++ ) { if ( ( ( MemberDefinition ) methodList . get ( i ) ) . getType ( ) . equalArguments ( method . getType ( ) ) ) { methodList . set ( i , method ) ; return ; } } methodList . add ( method ) ; count ++ ; }
  Tgt: the MethodSet, replacing any previous definition with the same signature
  Pred: replace a positive character with original
447 Code: check Unusual URL Pattern <sep> { if ( log . isLoggable ( Level . INFO ) ) { if ( urlPattern . endsWith ( "*" ) && ( urlPattern . length ( ) < 2 || urlPattern . charAt ( urlPattern . length ( ) - 2 ) != '/' ) ) { String msg = "Suspicious-url-pattern:-"" + urlPattern + """ + "-in-context-[" + getName ( ) + "]---see" + "-section-SRV.11.2-of-the-Servlet-specification" ; log . log ( Level . INFO , msg ) ; } } }
  Tgt: check for unusual but valid s
  Pred: perform the url subpattern for the given url
448 Code: safe Sleep <sep> { long done = 0 ; do { long before = System . currentTimeMillis ( ) ; sleep ( millis - done ) ; long after = System . currentTimeMillis ( ) ; done += ( after - before ) ; } while ( done < millis ) ; }
  Tgt: it has been reported that the threadsleep method sometimesexits before the requested time has passed
  Pred: crea the helper
449 Code: check Password <sep> { String digest = granteeManager . digest ( value ) ; if ( ! digest . equals ( password ) ) { throw Error . error ( ErrorCode . X_28000 ) ; } }
  Tgt: check if this objects password attibute equals specified argument, else throws
  Pred: check if the uris should be used
450 Code: equals <sep> { if ( obj != null && obj instanceof Constructor ) { Constructor < ? > other = ( Constructor < ? > ) obj ; if ( getDeclaringClass ( ) == other . getDeclaringClass ( ) ) { return equalParamTypes ( parameterTypes , other . parameterTypes ) ; } } return false ; }
  Tgt: compare this constructor against the specified object
  Pred: compare the argument to the certificate, and returns true if they are equal
451 Code: get Data Element <sep> { int components [ ] = getUnnormalizedComponents ( normComponents , normOffset , null , 0 ) ; return getDataElement ( components , 0 ) ; }
  Tgt: return a pixel value represented as an int in this ColorModel, given an array of normalized color alpha components
  Pred: return the data element in the data list
452 Code: is Double <sep> { try { Double . parseDouble ( value ) ; return true ; } catch ( NumberFormatException e ) { return false ; } }
  Tgt: check if a string is convertible to double type
  Pred: return whether this rule is a double value
453 Code: get Enclosing Closure Stack <sep> { return Collections . unmodifiableList ( enclosingClosures ) ; }
  Tgt: return the current stack of enclosing closure expressions
  Pred: return the list of entries in the registry
454 Code: do Exchange <sep> { Node me = new Node ( item ) ; int index = hashIndex ( ) ; int fails = 0 ; for ( ; ; ) { Object y ; Slot slot = arena [ index ] ; if ( slot == null ) createSlot ( index ) ; else if ( ( y = slot . get ( ) ) != null && slot . compareAndSet ( y , null ) ) { Node you = ( Node ) y ; if ( you . compareAndSet ( null , item ) ) { LockSupport . unpark ( you . waiter ) ; return you . item ; } } else if ( y == null && slot . compareAndSet ( null , me ) ) { if ( index == 0 ) return timed ? awaitNanos ( me , slot , nanos ) : await ( me , slot ) ; Object v = spinWait ( me , slot ) ; if ( v != CANCEL ) return v ; me = new Node ( item ) ; int m = max . get ( ) ; if ( m > ( index >>>= 1 ) ) max . compareAndSet ( m , m - 1 ) ; } else if ( ++ fails > 1 ) { int m = max . get ( ) ; if ( fails > 3 && m < FULL && max . compareAndSet ( m , m + 1 ) ) index = m + 1 ; else if ( -- index < 0 ) index = m ; } } }
  Tgt: main exchange function, handling the different policy variants
  Pred: combine each program
455 Code: add Packed Seg_ids Sequence <sep> { if ( localPackedSeg_idsSequence == null ) { localPackedSeg_idsSequence = new gov . nih . nlm . ncbi . www . soap . eutils . efetch_gene . PackedSeg_idsSequence [ ] { } ; } localPackedSeg_idsSequenceTracker = true ; java . util . List list = org . apache . axis2 . databinding . utils . ConverterUtil . toList ( localPackedSeg_idsSequence ) ; list . add ( param ) ; this . localPackedSeg_idsSequence = ( gov . nih . nlm . ncbi . www . soap . eutils . efetch_gene . PackedSeg_idsSequence [ ] ) list . toArray ( new gov . nih . nlm . ncbi . www . soap . eutils . efetch_gene . PackedSeg_idsSequence [ list . size ( ) ] ) ; }
  Tgt: auto generated add method for the array for convenience
  Pred: auto falls neighbour transform add a cid section sequence to the diagram
456 Code: get Major Version <sep> { loadProperties ( ) ; try { return Integer . parseInt ( ourProperties . getProperty ( VERSION_MAJOR_PROPERTY , VERSION_MAJOR_DEFAULT ) ) ; } catch ( NumberFormatException nfe ) { } return Integer . parseInt ( VERSION_MAJOR_DEFAULT ) ; }
  Tgt: get sql jets major version
  Pred: get the major version
457 Code: permanent <sep> { assert slice . containsKey ( n ) ; return slice . get ( n ) ; }
  Tgt: check if a neuron n in a given slice is permanent neuron or not
  Pred: return a collection of strings with a particular diff
458 Code: add Sub Action View <sep> { LayoutInflater inflater = ( LayoutInflater ) context . getSystemService ( Context . LAYOUT_INFLATER_SERVICE ) ; View view = inflater . inflate ( resId , null , false ) ; view . measure ( View . MeasureSpec . UNSPECIFIED , View . MeasureSpec . UNSPECIFIED ) ; return this . addSubActionView ( view , view . getMeasuredWidth ( ) , view . getMeasuredHeight ( ) ) ; }
  Tgt: inflate a new view from the specified resource id and adds it as a sub action view
  Pred: add a new separation area to this menu
459 Code: get Option Items <sep> { if ( optionItems == null ) { optionItems = new ArrayList < OptionItem > ( ) ; } return this . optionItems ; }
  Tgt: get the value of the option items property
  Pred: get the value of the option set property
460 Code: get Current Template Name <sep> { if ( templateNameStack . empty ( ) ) return "<undef>" ; else return ( String ) templateNameStack . peek ( ) ; }
  Tgt: get the current template name
  Pred: return the current name of the dorade context property
461 Code: create Titled Border <sep> { return new TitledBorder ( border , title , titleJustification , titlePosition ) ; }
  Tgt: add a title to an existing border, with the specified positioning and using the default font and text color
  Pred: create a direct border for an interleaved border
462 Code: write Trailer <sep> { out . println ( "}" ) ; }
  Tgt: override to customize
  Pred: write to write the overwrite flag
463 Code: put Table <sep> { LinkedList < HTableInterface > queue = tables . get ( Bytes . toString ( table . getTableName ( ) ) ) ; synchronized ( queue ) { if ( queue . size ( ) >= maxSize ) return ; queue . add ( table ) ; } }
  Tgt: put the specified h table back into the pool
  Pred: put the value supplied to the table
464 Code: declare User <sep> { try { if ( userName == null ) userName = "" ; if ( userName . length ( ) == 0 ) throw new Exception ( "'userName'-parameter-cannot-be-null-or-empty." ) ; if ( _users . containsKey ( userName ) ) throw new Exception ( "User-'" + userName + "'-is-already-declared." ) ; _users . put ( userName , new ArrayList < String > ( ) ) ; includeUserInGroups ( userName , groupsList ) ; } catch ( Exception e ) { throw new Exception ( ParseError . parseError ( "AccessChecker.declareUser('" + userName + "','" + groupsList + "')" , e ) ) ; } }
  Tgt: declare a new user in the access structure
  Pred: filter a complete user
465 Code: close <sep> { synchronized ( lock ) { if ( decoder != null ) { decoder . reset ( ) ; } decoder = null ; if ( in != null ) { in . close ( ) ; in = null ; } } }
  Tgt: close this reader
  Pred: close this reader
466 Code: chain <sep> { LinkedList < Iterable < T >> iterables = new LinkedList < Iterable < T >> ( ) ; for ( T [ ] array : arrays ) { iterables . add ( Arrays . asList ( array ) ) ; } return chain ( iterables ) ; }
  Tgt: chain together all arrays of type t as given in an array or varargs parameter
  Pred: combine an enumeration of a datetime
467 Code: use Skin <sep> { skin . setFrame ( frame ) ; currentView = iv . getViewport ( ) ; }
  Tgt: set the currently visible frame of the entitys skin
  Pred: make a check to try object
468 Code: is Mime Type Equal <sep> { if ( mimeType == null ) { throw new NullPointerException ( "mimeType" ) ; } if ( this . mimeType == null ) { return false ; } try { return this . mimeType . match ( new MimeType ( mimeType ) ) ; } catch ( MimeTypeParseException mtpe ) { return false ; } }
  Tgt: return whether the string representation of the mime type passed in is equivalent to the mime type of this data flavor
  Pred: determine if the type represented by this runtime should be ignored from types
469 Code: delete Chord Sheet <sep> { if ( chordSheets . contains ( chordSheet ) ) { chordSheets . remove ( chordSheet ) ; } }
  Tgt: delete a chord sheet from the list of chord sheets of the song
  Pred: remove a datanode from the list
470 Code: get Instance <sep> { return new ObjectName ( domain , key , value ) ; }
  Tgt: return an instance of object name that can be used anywhere an object obtained with object name new object name can be used
  Pred: create a new date store instance using the specified locale
471 Code: snode <sep> { if ( s == null ) s = new SNode ( e ) ; s . mode = mode ; s . next = next ; return s ; }
  Tgt: create or resets fields of a node
  Pred: return a new object
472 Code: get Element By Id <sep> { return getIdentifier ( elementId ) ; }
  Tgt: introduce in dom level two returns the element whose id is given by element id
  Pred: get context element
473 Code: get So Timeout <sep> { checkOpen ( ) ; return ( ( Integer ) impl . getOption ( SocketOptions . SO_TIMEOUT ) ) . intValue ( ) ; }
  Tgt: get the socket socket options so timeout receive timeout
  Pred: get the socket socket options so timeout accept timeout
474 Code: yypushback <sep> { if ( number > yylength ( ) ) zzScanError ( ZZ_PUSHBACK_2BIG ) ; zzMarkedPos -= number ; }
  Tgt: push the specified amount of characters back into the input stream
  Pred: push the specified amount of characters back into the input stream
475 Code: create Disabled Image <sep> { GrayFilter filter = new GrayFilter ( true , 50 ) ; ImageProducer prod = new FilteredImageSource ( i . getSource ( ) , filter ) ; Image grayImage = Toolkit . getDefaultToolkit ( ) . createImage ( prod ) ; return grayImage ; }
  Tgt: create a disabled image
  Pred: create an awt image with the given path and port
476 Code: new Synchronous Queue <sep> { return new SynchronousQueue < E > ( ) ; }
  Tgt: create an empty synchronous queue instance
  Pred: create an empty comparator
477 Code: grab Image <sep> { return image . getSubimage ( column * colWidth , row * rowHeight , width , height ) ; }
  Tgt: get the sprite from the specified row and column of the sprite sheet
  Pred: create a users image for a users image
478 Code: set Dependency Relation <sep> { annot . set ( CoNLLDepTypeAnnotation . class , relation ) ; }
  Tgt: set the relation between annot and the governing mode in adependency parse tree for annot
  Pred: set the distinguished attribute
479 Code: add Order <sep> { orders . add ( order ) ; }
  Tgt: add an order
  Pred: add w chain to this collection
480 Code: install U I <sep> { for ( int i = 0 ; i < uis . size ( ) ; i ++ ) { ( ( ComponentUI ) ( uis . elementAt ( i ) ) ) . installUI ( a ) ; } }
  Tgt: invoke the install ui method on each ui handled by this object
  Pred: invoke the install ui method on each ui handled by this object
481 Code: list Sets <sep> { Map listSetsMap = new HashMap ( ) ; ArrayList sets = new ArrayList ( ) ; purge ( ) ; StringTokenizer tokenizer = new StringTokenizer ( resumptionToken , ":" ) ; String resumptionId ; int oldCount ; try { resumptionId = tokenizer . nextToken ( ) ; oldCount = Integer . parseInt ( tokenizer . nextToken ( ) ) ; } catch ( NoSuchElementException e ) { throw new BadResumptionTokenException ( ) ; } String [ ] dbSets = ( String [ ] ) resumptionResults . remove ( resumptionId ) ; if ( dbSets == null ) { throw new BadResumptionTokenException ( ) ; } int count ; for ( count = 0 ; count < maxListSize && count + oldCount < dbSets . length ; ++ count ) { sets . add ( dbSets [ count + oldCount ] ) ; } if ( count + oldCount < dbSets . length ) { resumptionId = getResumptionId ( ) ; resumptionResults . put ( resumptionId , dbSets ) ; StringBuffer resumptionTokenSb = new StringBuffer ( ) ; resumptionTokenSb . append ( resumptionId ) ; resumptionTokenSb . append ( ":" ) ; resumptionTokenSb . append ( Integer . toString ( oldCount + count ) ) ; listSetsMap . put ( "resumptionMap" , getResumptionMap ( resumptionTokenSb . toString ( ) , dbSets . length , oldCount ) ) ; } listSetsMap . put ( "sets" , sets . iterator ( ) ) ; return listSetsMap ; }
  Tgt: retrieve the next set of sets associated with the resumption token
  Pred: dump an object from the list
482 Code: iterate Declared Prefixes <sep> { for ( Enumeration e = nss . getDeclaredPrefixes ( ) ; e . hasMoreElements ( ) ; ) { String p = ( String ) e . nextElement ( ) ; String uri = nss . getURI ( p ) ; callback . onPrefixMapping ( p , uri ) ; } }
  Tgt: iterate all newly declared namespace prefixes for this element
  Pred: iterate das chain of jaxb element
483 Code: read <sep> { return ( read ( scratch , 0 , 1 ) != - 1 ) ? scratch [ 0 ] & 0xff : - 1 ; }
  Tgt: read a single byte from the current position in this file and returns it as an integer in the range from 0 to 255
  Pred: read a single byte from this stream and returns it as an integer in the range from 0 to 255
484 Code: get Ext Data Recs <sep> { return Util . arrayCopy ( extDataRecs , new ExtDescriptor [ extDataRecs . length ] ) ; }
  Tgt: extent data record
  Pred: return the data fuzz to be applied for the current scaling applied
485 Code: get Payloads <sep> { List < PayloadType > list = new ArrayList < PayloadType > ( ) ; if ( preferredPayloadType != null ) list . add ( preferredPayloadType ) ; for ( JingleMediaManager manager : managers ) { for ( PayloadType payloadType : manager . getPayloads ( ) ) { if ( ! list . contains ( payloadType ) && ! payloadType . equals ( preferredPayloadType ) ) list . add ( payloadType ) ; } } return list ; }
  Tgt: return all supported payloads for this manager
  Pred: return a list of versions objects for the blog
486 Code: to String <sep> { StringBuffer str = new StringBuffer ( "Type:-" + addrType + "-" ) ; str . append ( "Content:-" + getContent ( ) + "-" ) ; return ( str . toString ( ) ) ; }
  Tgt: generate the string representation of this address
  Pred: build a string representation of this component
487 Code: is Well Formed <sep> { int brace = 0 , index = 0 ; while ( index < subpath . length ( ) ) { if ( brace < 0 ) return false ; if ( subpath . charAt ( index ) == '[' ) brace ++ ; if ( subpath . charAt ( index ) == ']' ) brace -- ; index ++ ; } if ( brace == 0 ) return true ; return false ; }
  Tgt: validate if the open and close brackets match
  Pred: check if the operating type supports a well name
488 Code: set Interpolator <sep> { for ( Node node : mNodes ) { node . animation . setInterpolator ( interpolator ) ; } }
  Tgt: set the time interpolator for all current get child animations child animationsof this animator set
  Pred: set the gist of the dictionary
489 Code: create Menu Effective Last Index Map <sep> { return new HashMap ( ) ; }
  Tgt: factory method for instantiating the menu integer effective last index map for menus with menu items that want to be at the end
  Pred: handle a map from a table
490 Code: scale Accelerometer <sep> { final double result = scaleAccelerometerWithPrecision ( port , raw , ACC_MIN , ACC_MAX ) ; return new BigDecimal ( result ) . setScale ( 2 , RoundingMode . HALF_UP ) . doubleValue ( ) ; }
  Tgt: accelerometer conversion based on reference calibration values
  Pred: convert a point to matrices coordinates
491 Code: level01 <sep> { Random randomRiddle = new Random ( ) ; int riddleNumber ; String userAnswer ; Scanner kb = new Scanner ( System . in ) ; System . out . println ( "-You-realize-the-statue-is-holding-a-key-as-it-turns-to-you.-It-begins-to-speak.-" ) ; System . out . println ( ""I-am-a-guardian-of-the-students-at-this-university,-I-am-keeping-this-key-safe-from-" + "evil-intruders."" + "-A-little-late-for-that-you-think.-It-continues,-"I-have-been-instructed-to-give-" + "this-key-to-the-chosen-one.-If-that-is-you,-you-will-be-able-to-answer-this-riddle,-if-not-you-will-turn-to-stone."" ) ; riddleNumber = randomRiddle . nextInt ( 16 ) ; System . out . println ( """ + riddles [ riddleNumber ] + """ ) ; System . out . print ( "Please-enter-your-answer:-" ) ; userAnswer = kb . nextLine ( ) ; if ( answers [ riddleNumber ] . equalsIgnoreCase ( userAnswer ) ) { System . out . println ( "-The-statue-nods,-and-hands-you-the-key.-"Good-luck-on-your-journey-chosen-one."" ) ; System . out . println ( "You-grab-the-key-and-hurry-to-the-Cathedral." ) ; level02 ( pn , riddles , answers ) ; } else { System . out . println ( "-The-statue-looks-disappointed.-You-start-to-feel-your-body-start-to-stiffen.-" + "The-right-answer-was-" + answers [ riddleNumber ] + "You-have-answered-the-riddle-wrong-and-will-be" + "-turned-into-a-statue.-GAME-OVER" ) ; } }
  Tgt: level 01 of the game
  Pred: emit error map with the current options
492 Code: clear <sep> { oredCriteria . clear ( ) ; orderByClause = null ; distinct = false ; }
  Tgt: this method was generated by my batis generator
  Pred: this method was generated by my batis generator
493 Code: choose Table Size <sep> { if ( setSize == 1 ) { return 2 ; } int tableSize = Integer . highestOneBit ( setSize - 1 ) << 1 ; while ( tableSize * DESIRED_LOAD_FACTOR < setSize ) { tableSize <<= 1 ; } return tableSize ; }
  Tgt: return an array size suitable for the backing array of a hash table that uses open addressing with linear probing in its implementation
  Pred: return the number of rows in the table model
494 Code: copy <sep> { this . copy ( from , to , false ) ; }
  Tgt: copy the given path to the given destination
  Pred: copy an array of content
495 Code: remove Entity <sep> { for ( Entity a : entities ) { if ( a . equals ( entity ) ) { entities . remove ( a ) ; return true ; } } return false ; }
  Tgt: remove entity by object
  Pred: remove a callback from the list
496 Code: set Stats <sep> { timet . setText ( Integer . toString ( t ) ) ; idle . setText ( Integer . toString ( i ) ) ; busy . setText ( Integer . toString ( b ) ) ; }
  Tgt: update the displayed numbers
  Pred: set the
497 Code: get Single Item <sep> { final Entry < T , Integer > singleEntry = getSingleEntry ( ) ; return ( singleEntry != null ) && ( singleEntry . getValue ( ) . intValue ( ) == 1 ) ? singleEntry . getKey ( ) : null ; }
  Tgt: return the item of the only factor in this factorization, if theres only one factor and the exponent of the item is 1
  Pred: return a single i group from the specified map
498 Code: convert To Quoted String <sep> { if ( string == null ) { return null ; } if ( TextUtils . isEmpty ( string ) ) { return "" ; } int lastPos = string . length ( ) - 1 ; if ( lastPos < 0 || ( string . charAt ( 0 ) == '"' && string . charAt ( lastPos ) == '"' ) ) { return string ; } return '|"' + string + '|"' ; }
  Tgt: enclose the incoming string inside double quotes, if it isnt already quoted
  Pred: convert a string into a char array
499 Code: timed Payment Exists <sep> { return timedpayments . containsKey ( id ) ; }
  Tgt: check if a timed payment exists
  Pred: determine if contacts with full exists name
500 Code: add <sep> { PersonView pv = new PersonView ( context , p , ( int ) ( Math . floor ( ( SpaceView . w - 55 ) * Math . random ( ) ) ) , ( int ) ( Math . floor ( SpaceView . mainScreenH * Math . random ( ) ) ) , 55 , 55 ) ; this . people . add ( pv ) ; }
  Tgt: add a person to this space by putting in their icon
  Pred: add a new attribute
501 Code: find Containing Jar <sep> { ClassLoader loader = PigContext . getClassLoader ( ) ; String class_file = my_class . getName ( ) . replaceAll ( "|." , "/" ) + ".class" ; try { Enumeration < URL > itr = null ; if ( loader instanceof URLClassLoader ) { itr = ( ( URLClassLoader ) loader ) . findResources ( class_file ) ; } if ( itr == null || ! itr . hasMoreElements ( ) ) { itr = loader . getResources ( class_file ) ; } for ( ; itr . hasMoreElements ( ) ; ) { URL url = ( URL ) itr . nextElement ( ) ; if ( "jar" . equals ( url . getProtocol ( ) ) ) { String toReturn = url . getPath ( ) ; if ( toReturn . startsWith ( "file:" ) ) { toReturn = toReturn . substring ( "file:" . length ( ) ) ; } toReturn = toReturn . replaceAll ( "|+" , "%2B" ) ; toReturn = URLDecoder . decode ( toReturn , "UTF-8" ) ; return toReturn . replaceAll ( "!.*$" , "" ) ; } } } catch ( IOException e ) { throw new RuntimeException ( e ) ; } return null ; }
  Tgt: find a jar that contains a class of the same name, if any
  Pred: find the classpath at the given path in the classpath
502 Code: Command <sep> { args = new Vector ( ) ; args . add ( name ) ; }
  Tgt: create an instance of a command
  Pred: command the command
503 Code: remove Auth Listener <sep> { mAuthListeners . remove ( listener ) ; }
  Tgt: remove the given listener from the list of those that will be notified when authentication events occur
  Pred: remove a listener
504 Code: Object Output Stream <sep> { SecurityManager sm = System . getSecurityManager ( ) ; if ( sm != null ) { sm . checkPermission ( SUBCLASS_IMPLEMENTATION_PERMISSION ) ; } bout = null ; handles = null ; subs = null ; enableOverride = true ; debugInfoStack = null ; }
  Tgt: provide a way for subclasses that are completely reimplementing object output stream to not have to allocate private data just used by this implementation of object output stream
  Pred: create a new output stream object for reading to the input stream
505 Code: pre Main Config <sep> { Thread . currentThread ( ) . setName ( Executor . THREAD_PREFIX + Executor . MAIN_THREAD ) ; }
  Tgt: perform some quick system settings for a smooth run
  Pred: construct a map from the hdfs
506 Code: to String Impl <sep> { return new StringBuilder ( ) . append ( port ) . toString ( ) ; }
  Tgt: use by super class to log the attributes contents when packet logging is enabled
  Pred: return a java that is configured as a string
507 Code: unregister On Low Memory Listener <sep> { if ( listener != null ) { int i = 0 ; while ( i < mLowMemoryListeners . size ( ) ) { final OnLowMemoryListener l = mLowMemoryListeners . get ( i ) . get ( ) ; if ( l == null || l == listener ) { mLowMemoryListeners . remove ( i ) ; } else { i ++ ; } } } }
  Tgt: remove a previously registered listener
  Pred: remove a listener from this preference
508 Code: intersects <sep> { return Util . inBounds ( ( int ) getLocation ( ) . getX ( ) , ( int ) getLocation ( ) . getY ( ) , getWidth ( ) , getHeight ( ) , 0 , 0 , ( int ) target . getLocation ( ) . getX ( ) , ( int ) target . getLocation ( ) . getY ( ) , target . getWidth ( ) , target . getHeight ( ) , 0 , 0 ) ; }
  Tgt: check if current entity intersects another entity
  Pred: check if the object intersects with the specified head and false otherwise
509 Code: encode String <sep> { return Base64 . encodeBytes ( ( str . getBytes ( ) ) ) . trim ( ) ; }
  Tgt: encode a string using Base64 encoding
  Pred: encode using Base64
510 Code: pack Cipher Suites <sep> { String cipherSet = null ; if ( ciphers != null ) { StringBuffer buf = new StringBuffer ( ) ; for ( int i = 0 ; i < ciphers . length ; i ++ ) { buf . append ( ciphers [ i ] ) ; if ( i < ciphers . length - 1 ) { buf . append ( ',' ) ; } } cipherSet = buf . toString ( ) ; } return cipherSet ; }
  Tgt: convert an array of ciphers into a single string
  Pred: return a list of instructions for same sequence
511 Code: get Hexa Alpha <sep> { hexa = Integer . toString ( sldAlpha . getValue ( ) , 16 ) ; if ( hexa . length ( ) == 1 ) { hexa = "0" + hexa ; } return hexa . toUpperCase ( ) ; }
  Tgt: get the alpha in hexadecimal
  Pred: get the value of the named pixel property
512 Code: find Records <sep> { return findRecords ( name , type , Credibility . NORMAL ) ; }
  Tgt: look up credible records in the cache
  Pred: return a map for matching matching matching group
513 Code: skip By Reading <sep> { if ( byteCount == 0 ) return 0L ; byte [ ] buffer = skipBuffer . getAndSet ( null ) ; if ( buffer == null ) { buffer = new byte [ 4096 ] ; } long skipped = 0 ; while ( skipped < byteCount ) { int toRead = ( int ) Math . min ( byteCount - skipped , buffer . length ) ; int read = in . read ( buffer , 0 , toRead ) ; if ( read == - 1 ) { break ; } skipped += read ; if ( read < toRead ) { break ; } } skipBuffer . set ( buffer ) ; return skipped ; }
  Tgt: call in
  Pred: call in
514 Code: get <sep> { Connection foundConnection = null ; for ( ListIterator < Connection > i = connections . listIterator ( connections . size ( ) ) ; i . hasPrevious ( ) ; ) { Connection connection = i . previous ( ) ; if ( ! connection . getRoute ( ) . getAddress ( ) . equals ( address ) || ! connection . isAlive ( ) || System . nanoTime ( ) - connection . getIdleStartTimeNs ( ) >= keepAliveDurationNs ) { continue ; } i . remove ( ) ; if ( ! connection . isSpdy ( ) ) { try { Platform . get ( ) . tagSocket ( connection . getSocket ( ) ) ; } catch ( SocketException e ) { Util . closeQuietly ( connection ) ; Platform . get ( ) . logW ( "Unable-to-tagSocket():-" + e ) ; continue ; } } foundConnection = connection ; break ; } if ( foundConnection != null && foundConnection . isSpdy ( ) ) { connections . addFirst ( foundConnection ) ; } executorService . submit ( connectionsCleanupCallable ) ; return foundConnection ; }
  Tgt: return a recycled connection to address, or null if no such connection exists
  Pred: return a recycled connection to address, or null if no such connection exists
515 Code: iduplicate <sep> { Hashtable childmap_ = new Hashtable ( ) ; Hashtable portmap_ = new Hashtable ( ) ; Hashtable wiremap_ = new Hashtable ( ) ; _duplicate ( that_ , childmap_ , portmap_ , wiremap_ , false ) ; for ( Enumeration e_ = wiremap_ . keys ( ) ; e_ . hasMoreElements ( ) ; ) { Wire w_ = ( Wire ) e_ . nextElement ( ) ; Wire wclone_ = new Wire ( ) ; if ( w_ . inports != null ) wclone_ . inports = _duplicateIn ( w_ . inports , portmap_ , w_ , wclone_ ) ; if ( w_ . outports != null ) wclone_ . outports = _duplicateOut ( w_ . outports , portmap_ , w_ , wclone_ ) ; if ( w_ . shadowInports != null ) wclone_ . shadowInports = _duplicateIn ( w_ . shadowInports , portmap_ , w_ , wclone_ ) ; if ( w_ . shadowOutports != null ) wclone_ . shadowOutports = _duplicateOut ( w_ . shadowOutports , portmap_ , w_ , wclone_ ) ; if ( w_ . inEvtListeners != null ) wclone_ . inEvtListeners = _duplicatePP ( w_ . inEvtListeners , portmap_ ) ; if ( w_ . outEvtListeners != null ) wclone_ . outEvtListeners = _duplicatePP ( w_ . outEvtListeners , portmap_ ) ; } }
  Tgt: duplicate the internal structure of the source component
  Pred: shuffle the chromosome operation
516 Code: re Execute Periodic <sep> { if ( canRunInCurrentRunState ( true ) ) { super . getQueue ( ) . add ( task ) ; if ( ! canRunInCurrentRunState ( true ) && remove ( task ) ) task . cancel ( false ) ; else prestartCoreThread ( ) ; } }
  Tgt: requeue a periodic task unless current run state precludes it
  Pred: reseed the autonomous
517 Code: set Last Point <sep> { isSimplePath = false ; native_setLastPoint ( mNativePath , dx , dy ) ; }
  Tgt: set the last point of the path
  Pred: set the index to the last point
518 Code: needs Flush <sep> { return outBuf . position ( ) > 0 ; }
  Tgt: be there outgoing buffered data that needs to be flushd?
  Pred: check if there were any errors during compilation
519 Code: write Attribute <sep> { if ( xmlWriter . getPrefix ( namespace ) == null ) { xmlWriter . writeNamespace ( prefix , namespace ) ; xmlWriter . setPrefix ( prefix , namespace ) ; } xmlWriter . writeAttribute ( namespace , attName , attValue ) ; }
  Tgt: write an attribute with the ns prefix
  Pred: write an attribute with the ns prefix
520 Code: map Dataset To Domain Axis <sep> { List axisIndices = new java . util . ArrayList ( 1 ) ; axisIndices . add ( new Integer ( axisIndex ) ) ; mapDatasetToDomainAxes ( index , axisIndices ) ; }
  Tgt: map a dataset to a particular domain axis
  Pred: convert a cldc character items from a parts
521 Code: put <sep> { pruneIfNeeded ( entry . data . length ) ; File file = getFileForKey ( key ) ; try { BufferedOutputStream fos = new BufferedOutputStream ( new FileOutputStream ( file ) ) ; CacheHeader e = new CacheHeader ( key , entry ) ; boolean success = e . writeHeader ( fos ) ; if ( ! success ) { fos . close ( ) ; VolleyLog . d ( "Failed-to-write-header-for-%s" , file . getAbsolutePath ( ) ) ; throw new IOException ( ) ; } fos . write ( entry . data ) ; fos . close ( ) ; putEntry ( key , e ) ; return ; } catch ( IOException e ) { } boolean deleted = file . delete ( ) ; if ( ! deleted ) { VolleyLog . d ( "Could-not-clean-up-file-%s" , file . getAbsolutePath ( ) ) ; } }
  Tgt: put the entry with the specified key into the cache
  Pred: add the binding value to the request map
522 Code: adopt Node <sep> { if ( ! ( node instanceof NodeImpl ) ) { return null ; } NodeImpl nodeImpl = ( NodeImpl ) node ; switch ( nodeImpl . getNodeType ( ) ) { case Node . ATTRIBUTE_NODE : AttrImpl attr = ( AttrImpl ) node ; if ( attr . ownerElement != null ) { attr . ownerElement . removeAttributeNode ( attr ) ; } break ; case Node . DOCUMENT_FRAGMENT_NODE : case Node . ENTITY_REFERENCE_NODE : case Node . PROCESSING_INSTRUCTION_NODE : case Node . TEXT_NODE : case Node . CDATA_SECTION_NODE : case Node . COMMENT_NODE : case Node . ELEMENT_NODE : break ; case Node . DOCUMENT_NODE : case Node . DOCUMENT_TYPE_NODE : case Node . ENTITY_NODE : case Node . NOTATION_NODE : throw new DOMException ( DOMException . NOT_SUPPORTED_ERR , "Cannot-adopt-nodes-of-type-" + nodeImpl . getNodeType ( ) ) ; default : throw new DOMException ( DOMException . NOT_SUPPORTED_ERR , "Unsupported-node-type-" + node . getNodeType ( ) ) ; } Node parent = nodeImpl . getParentNode ( ) ; if ( parent != null ) { parent . removeChild ( nodeImpl ) ; } changeDocumentToThis ( nodeImpl ) ; notifyUserDataHandlers ( UserDataHandler . NODE_ADOPTED , node , null ) ; return nodeImpl ; }
  Tgt: detach the node from its parent and changes its document to this document
  Pred: utility method
523 Code: set Instances From File Q <sep> { int returnVal = m_FileChooser . showOpenDialog ( this ) ; if ( returnVal == JFileChooser . APPROVE_OPTION ) { File selected = m_FileChooser . getSelectedFile ( ) ; try { java . io . Reader r = new java . io . BufferedReader ( new java . io . FileReader ( selected ) ) ; Instances i = new Instances ( r ) ; setInstances ( i ) ; String relationName = i . relationName ( ) ; String truncatedN = relationName ; if ( relationName . length ( ) > 25 ) { truncatedN = relationName . substring ( 0 , 25 ) + "..." ; } dataFileLabel . setText ( truncatedN ) ; dataFileLabel . setToolTipText ( relationName ) ; } catch ( Exception e ) { JOptionPane . showMessageDialog ( this , "Can't-load-at-this-time,-" + "currently-busy-with-other-IO" , "Load-Instances" , JOptionPane . WARNING_MESSAGE ) ; e . printStackTrace ( ) ; } } }
  Tgt: query the user for a file to load instances from, then loads the instances in a background process
  Pred: set the drawable in the given file
524 Code: copy To File <sep> { try { OutputStream out = new FileOutputStream ( destFile ) ; try { byte [ ] buffer = new byte [ 4096 ] ; int bytesRead ; while ( ( bytesRead = inputStream . read ( buffer ) ) >= 0 ) { out . write ( buffer , 0 , bytesRead ) ; } } finally { out . close ( ) ; } return true ; } catch ( IOException e ) { return false ; } }
  Tgt: copy data from a source stream to dest file
  Pred: copy a byte to a file
525 Code: set Scroll Offset <sep> { visibility . setValue ( scrollOffset ) ; }
  Tgt: set the scroll offset, in pixels
  Pred: set the amount of the vector
526 Code: add Filter <sep> { if ( filter == null ) { throw new IllegalArgumentException ( "Parameter-cannot-be-null." ) ; } filters . add ( filter ) ; }
  Tgt: add a filter to the filter list for the and operation
  Pred: add the filter to the filter
527 Code: parse Robots Txt <sep> { List < String > disallows = new ArrayList < String > ( ) ; BufferedReader r = new BufferedReader ( new InputStreamReader ( is , "UTF-8" ) ) ; String l ; while ( ( l = r . readLine ( ) ) != null ) { String [ ] arr = l . split ( "#" ) ; if ( arr . length == 0 ) continue ; l = arr [ 0 ] . trim ( ) ; if ( l . startsWith ( DISALLOW ) ) { l = l . substring ( DISALLOW . length ( ) ) . trim ( ) ; if ( l . length ( ) == 0 ) continue ; disallows . add ( l ) ; } } is . close ( ) ; return disallows ; }
  Tgt: very simple robots
  Pred: very simple robots
528 Code: remove Macro <sep> { String m = macrosses . remove ( macroPosition ) ; if ( m == null ) { logger . warn ( "Trying-to-remove-non-existing-macro." ) ; return false ; } return true ; }
  Tgt: remove macro from the list
  Pred: remove as a portion of the collection
529 Code: fully Unlock <sep> { takeLock . unlock ( ) ; putLock . unlock ( ) ; }
  Tgt: unlock to allow both puts and takes
  Pred: this method cleans
530 Code: add Attribute <sep> { this . members . put ( name , new AttributeContainer . Attribute ( type , name , value , restrictions ) ) ; return this ; }
  Tgt: add xml attribute to container
  Pred: add an image to the ns prefix
531 Code: parse Term <sep> { int ch = this . read ( ) ; if ( ch == T_OR || ch == T_RPAREN || ch == T_EOF ) { return Token . createEmpty ( ) ; } else { Token tok = this . parseFactor ( ) ; Token concat = null ; while ( ( ch = this . read ( ) ) != T_OR && ch != T_RPAREN && ch != T_EOF ) { if ( concat == null ) { concat = Token . createConcat ( ) ; concat . addChild ( tok ) ; tok = concat ; } concat . addChild ( this . parseFactor ( ) ) ; } return tok ; } }
  Tgt: term ::= factor+
  Pred: parse the simple string
532 Code: is Token Expired <sep> { ByteArrayInputStream buf = new ByteArrayInputStream ( token . getIdentifier ( ) ) ; DataInputStream in = new DataInputStream ( buf ) ; long expiryDate = WritableUtils . readVLong ( in ) ; return isExpired ( expiryDate ) ; }
  Tgt: check if a token is expired
  Pred: return whether the token token is expired
533 Code: find Panel <sep> { Component [ ] comps = pane_ . getComponents ( ) ; for ( int i = 0 ; i < comps . length ; i ++ ) { if ( comps [ i ] instanceof Panel ) { if ( ( ( Panel ) comps [ i ] ) . getName ( ) . equals ( pHolder . getId ( ) ) ) return ( Panel ) comps [ i ] ; } } return null ; }
  Tgt: find the panel associated with PanelHolder, a panel model component
  Pred: find the component that is associated with this view
534 Code: get Component Names <sep> { return rawPropertyMap . keySet ( ) ; }
  Tgt: return all names of configurables registered to this instance
  Pred: return the j component of this component
535 Code: get Instance For <sep> { Roster roster = INSTANCES . get ( connection ) ; if ( roster == null ) { roster = new Roster ( connection ) ; INSTANCES . put ( connection , roster ) ; } return roster ; }
  Tgt: return the roster for the user
  Pred: return a map of the named class id
536 Code: get Id Categoria <sep> { String query = "SELECT-idCategoria-FROM-Categoria-WHERE-" + "tipo='" + categoria + "'" ; ResultSet res = accesoBD . ejecutaConsulta ( query ) ; int idCat = 0 ; if ( res . next ( ) ) idCat = res . getInt ( 1 ) ; return idCat ; }
  Tgt: permite obtener el identificador de una categoria a partir del nombre
  Pred: check if the protocol is accepted for the original
537 Code: set Size <sep> { modCount ++ ; ensureCapacity ( newSize ) ; if ( newSize < elementCount ) Arrays . fill ( elementData , newSize , elementCount , null ) ; elementCount = newSize ; }
  Tgt: explicitly sets the size of the vector
  Pred: set the size of the slider
538 Code: is Attribute Welcome <sep> { return welcomeAttributes . contains ( name ) ; }
  Tgt: check if the given attribute name is in the list of allowed attributes
  Pred: determine if the list of supported is supported
539 Code: write <sep> { checkThreshold ( 1 ) ; getStream ( ) . write ( b ) ; written ++ ; }
  Tgt: write the specified byte to this output stream
  Pred: write the bytes to the specified output stream
540 Code: get Max Value Bytes <sep> { java . lang . Object ref = maxValue_ ; if ( ref instanceof String ) { com . google . protobuf . ByteString b = com . google . protobuf . ByteString . copyFromUtf8 ( ( java . lang . String ) ref ) ; maxValue_ = b ; return b ; } else { return ( com . google . protobuf . ByteString ) ref ; } }
  Tgt: optional string max value = 6;
  Pred: optional string logo = 2; re
541 Code: get Token <sep> { String token ; if ( tokens == null || tokens . length <= position ) { token = null ; } else { token = tokens [ position ] ; } if ( token != null ) { token = token . trim ( ) ; if ( token . length ( ) == 0 ) { token = null ; } } return token ; }
  Tgt: return a token at a specified position
  Pred: return the token token of this token
542 Code: get Parent <sep> { return path . substring ( 0 , path . lastIndexOf ( Path . SEPARATOR ) ) ; }
  Tgt: return string representing the parent of the given path
  Pred: return the parent parent this method for the web object
543 Code: rename For File Name <sep> { fileString = removeWhiteSpace ( fileString ) ; if ( fileString != null && chars > 0 ) { if ( fileString . length ( ) > chars ) { fileString = fileString . substring ( 0 , chars ) ; } } return fileString ; }
  Tgt: take a string and renames it so that it will be suitable for a filename
  Pred: check a new file name for the file name
544 Code: set Role Name <sep> { this . roleName = ( ( JAXBElement < String > ) value ) ; }
  Tgt: set the value of the role name property
  Pred: set the name of the role
545 Code: get Broadcast <sep> { checkOpen ( ) ; return ( ( Boolean ) impl . getOption ( SocketOptions . SO_BROADCAST ) ) . booleanValue ( ) ; }
  Tgt: get the state of the socket option socket options
  Pred: return the significance chain for the current thread
546 Code: add Album <sep> { albums . add ( album ) ; }
  Tgt: add an album
  Pred: add a new intent to the pool
547 Code: find Library <sep> { String fileName = System . mapLibraryName ( libraryName ) ; for ( File directory : nativeLibraryDirectories ) { String path = new File ( directory , fileName ) . getPath ( ) ; if ( IoUtils . canOpenReadOnly ( path ) ) { return path ; } } return null ; }
  Tgt: find the named native code library on any of the library directories pointed at by this instance
  Pred: find a native library by name
548 Code: put Map <sep> for ( String key : m . keySet ( ) ) { SortedSet < String > vals = get ( key ) ; if ( vals == null ) { vals = new TreeSet < String > ( ) ; put ( key , vals ) ; } vals . addAll ( m . get ( key ) ) ; } }
  Tgt: merge a MapString, list
  Pred: create a new map of the values
549 Code: create Date Button From Long Value <sep> { TextView fieldAlias = ( TextView ) container . findViewById ( R . id . field_alias_txt ) ; Button dateButton = ( Button ) container . findViewById ( R . id . field_date_btn ) ; fieldAlias . setText ( field . getAlias ( ) ) ; Calendar c = Calendar . getInstance ( ) ; c . setTimeInMillis ( date ) ; dateButton . setText ( formatter . format ( c . getTime ( ) ) ) ; addListenersToDatebutton ( dateButton ) ; return dateButton ; }
  Tgt: create a date button, with appropriate on click and on date set listeners to handle dates as a long , it uses the locale and presents a button with the date and time in short format
  Pred: retrieve a users value from a simple readable
550 Code: to Front <sep> { toFront_NoClientCode ( ) ; }
  Tgt: if this window is visible, brings this window to the front and may make it the focused window
  Pred: convert a json map to a java
551 Code: write Q Name <sep> { java . lang . String namespaceURI = qname . getNamespaceURI ( ) ; if ( namespaceURI != null ) { java . lang . String prefix = xmlWriter . getPrefix ( namespaceURI ) ; if ( prefix == null ) { prefix = generatePrefix ( namespaceURI ) ; xmlWriter . writeNamespace ( prefix , namespaceURI ) ; xmlWriter . setPrefix ( prefix , namespaceURI ) ; } if ( prefix . trim ( ) . length ( ) > 0 ) { xmlWriter . writeCharacters ( prefix + ":" + org . apache . axis2 . databinding . utils . ConverterUtil . convertToString ( qname ) ) ; } else { xmlWriter . writeCharacters ( org . apache . axis2 . databinding . utils . ConverterUtil . convertToString ( qname ) ) ; } } else { xmlWriter . writeCharacters ( org . apache . axis2 . databinding . utils . ConverterUtil . convertToString ( qname ) ) ; } }
  Tgt: handle qnames
  Pred: handle qnames
552 Code: Socket <sep> { this ( ) ; checkDestination ( dstAddress , dstPort ) ; startupSocket ( dstAddress , dstPort , null , 0 , true ) ; }
  Tgt: create a new streaming socket connected to the target host specified by the parameters dst address and dst port
  Pred: log an instance of java
553 Code: add Sane Altitude <sep> { boolean sane = true ; double avg = 0 ; int elements = 0 ; mAltitudes . add ( altitude ) ; if ( mAltitudes . size ( ) > 3 ) { mAltitudes . poll ( ) ; } for ( Double alt : mAltitudes ) { avg += alt ; elements ++ ; } avg = avg / elements ; sane = Math . abs ( altitude - avg ) < MAX_REASONABLE_ALTITUDECHANGE ; return sane ; }
  Tgt: build a bit of knowledge about altitudes to expect and return if the added value is deemed sane
  Pred: add a cached entity to the list
554 Code: get Class Method Signature From String <sep> { String signature = convertDotsToSlashes ( name ) ; String result [ ] = new String [ 3 ] ; int mpos = 0 , sigpos = 0 ; int i ; sigpos = signature . indexOf ( '(' ) ; if ( sigpos == - 1 ) { sigpos = 0 ; i = signature . length ( ) - 1 ; } else { i = sigpos - 1 ; } for ( ; i >= 0 ; i -- ) { if ( signature . charAt ( i ) == '/' ) { mpos = i ; break ; } } try { result [ 0 ] = signature . substring ( 0 , mpos ) ; result [ 1 ] = signature . substring ( mpos + 1 , sigpos ) ; result [ 2 ] = signature . substring ( sigpos ) ; } catch ( StringIndexOutOfBoundsException e ) { throw new IllegalArgumentException ( "malformed-method-signature-:-" + name ) ; } return result ; }
  Tgt: split string package class methodreturn type into package class, method, return type
  Pred: retrieve a list of timer from a number string
555 Code: get Child Count <sep> { return children == null ? 0 : children . size ( ) ; }
  Tgt: return the number of child objects
  Pred: return the number of child objects
556 Code: get Audit Name <sep> { lock . lock ( ) ; try { return idMap . get ( id ) ; } finally { lock . unlock ( ) ; } }
  Tgt: get the audit name
  Pred: get the macro name for the given name
557 Code: evaluate <sep> { if ( dateString == null ) { return null ; } try { Date date = formatter . parse ( dateString . toString ( ) ) ; t . set ( formatter . format ( date ) ) ; return t ; } catch ( ParseException e ) { return null ; } }
  Tgt: get the date part of a date time string
  Pred: extract json object from a json string
558 Code: is Reader M T O M Aware <sep> { boolean isReaderMTOMAware = false ; try { isReaderMTOMAware = java . lang . Boolean . TRUE . equals ( reader . getProperty ( org . apache . axiom . om . OMConstants . IS_DATA_HANDLERS_AWARE ) ) ; } catch ( java . lang . IllegalArgumentException e ) { isReaderMTOMAware = false ; } return isReaderMTOMAware ; }
  Tgt: be reader mtom aware
  Pred: be reader mtom aware
559 Code: set Thread Cpu Time Enabled <sep> { threadMXBean . setThreadCpuTimeEnabled ( enable ) ; boolean checkValue = threadMXBean . isThreadCpuTimeEnabled ( ) ; if ( enable != checkValue ) { log . error ( "Could-not-set-threadCpuTimeEnabled-to-" + enable + ",-got-" + checkValue + "-instead" ) ; } }
  Tgt: enable or disable thread cpu time measurement via the thread mx mx bean
  Pred: update thread thread pool
560 Code: connect <sep> { File f = new File ( fileName ) ; if ( f . isDirectory ( ) ) { isDir = true ; is = getDirectoryListing ( f ) ; } else { is = new BufferedInputStream ( new FileInputStream ( f ) , 8192 ) ; length = is . available ( ) ; } connected = true ; }
  Tgt: this methods will attempt to obtain the input stream of the file pointed by this url
  Pred: draw the client to the server
561 Code: encrypt Image <sep> { StringBuffer out = new StringBuffer ( ) ; for ( RGB color : imageReader ) if ( huffmanCode . containsKey ( color ) ) out . append ( huffmanCode . get ( color ) ) ; return out . toString ( ) ; }
  Tgt: encrypt the image data from the image reader with the internal huffman code
  Pred: create a fnb image list
562 Code: decode To Object <sep> { byte [ ] objBytes = decode ( encodedObject , options ) ; java . io . ByteArrayInputStream bais = null ; java . io . ObjectInputStream ois = null ; Object obj = null ; try { bais = new java . io . ByteArrayInputStream ( objBytes ) ; if ( loader == null ) { ois = new java . io . ObjectInputStream ( bais ) ; } else { ois = new java . io . ObjectInputStream ( bais ) { @ Override public Class < ? > resolveClass ( java . io . ObjectStreamClass streamClass ) throws java . io . IOException , ClassNotFoundException { @ SuppressWarnings ( "rawtypes" ) Class c = Class . forName ( streamClass . getName ( ) , false , loader ) ; if ( c == null ) { return super . resolveClass ( streamClass ) ; } else { return c ; } } } ; } obj = ois . readObject ( ) ; } catch ( java . io . IOException e ) { throw e ; } catch ( java . lang . ClassNotFoundException e ) { throw e ; } finally { try { bais . close ( ) ; } catch ( Exception e ) { } try { ois . close ( ) ; } catch ( Exception e ) { } } return obj ; }
  Tgt: attempt to decode Base64 data and deserialize a java object within
  Pred: decode data to a string
563 Code: get Top Level Ancestor <sep> { for ( Container p = this ; p != null ; p = p . getParent ( ) ) { if ( p instanceof Window || p instanceof Applet ) { return p ; } } return null ; }
  Tgt: return the top level ancestor of this component , or null if this component has not been added to any container
  Pred: return the list of level objects that is level of the given interface
564 Code: open <sep> { if ( ! serial ) return false ; this . xf = xf ; try { url = new URL ( xf . toString ( ) ) ; urlConn = url . openConnection ( ) ; urlConn . setDoInput ( readOnly ) ; urlConn . setDoOutput ( ! readOnly ) ; urlConn . connect ( ) ; return true ; } catch ( IOException e ) { return false ; } }
  Tgt: open this file object
  Pred: open a connection from an input stream
565 Code: discard Card <sep> { discardPile . add ( card ) ; }
  Tgt: add a card to the discard pile
  Pred: call the delete flags
566 Code: update Item Name <sep> { this . repairedItemName = par1Str ; if ( this . getSlot ( 2 ) . getHasStack ( ) ) { this . getSlot ( 2 ) . getStack ( ) . setItemName ( this . repairedItemName ) ; } this . updateRepairOutput ( ) ; }
  Tgt: use by the anvil gui to update the item name being typed by the player
  Pred: this method is called when the name of selected item is selected
567 Code: get Ip <sep> { if ( ip == null || ip . length ( ) == 0 ) { return NULL_IP ; } else { return this . ip ; } }
  Tgt: xxx for 3
  Pred: return the salt, between the given index
568 Code: Deferred C D A T A Section Impl <sep> { super ( ownerDocument , null ) ; fNodeIndex = nodeIndex ; needsSyncData ( true ) ; }
  Tgt: this is the deferred constructor
  Pred: construct a cdata section sequence from the cdata x file
569 Code: add Extension <sep> { if ( applicationExtensions == null ) { applicationExtensions = new ArrayList < PacketExtension > ( ) ; } applicationExtensions . add ( extension ) ; }
  Tgt: add a packet extension to the error
  Pred: add a new extension to the folder
570 Code: record Read <sep> { if ( map . recordsAccess ( ) ) { entry . setAccessTime ( now ) ; } recencyQueue . add ( entry ) ; }
  Tgt: record the relative order in which this read was performed by adding entry to therecency queue
  Pred: return the values of the file specified in the given file
571 Code: check Tk Inter <sep> { if ( getPythonPath ( ) == null ) { return false ; } ProcessBuilder pb = new ProcessBuilder ( getPythonPath ( ) , "-c" , "import-Tkinter" ) ; try { Process p = pb . start ( ) ; int returnCode = p . waitFor ( ) ; if ( returnCode != 0 ) { return false ; } } catch ( Exception e ) { Base . logger . log ( Level . SEVERE , "Error-attempting-to-detect-TkInter" , e ) ; } return true ; }
  Tgt: check for a successful tk inter installation
  Pred: check that the ip ip is included in the permitted set permitted
572 Code: get Modified String <sep> { String tmp = "" ; try { return DateFormat . getDateTimeInstance ( DateFormat . SHORT , DateFormat . LONG ) . format ( modified ) ; } catch ( NullPointerException e ) { } return tmp ; }
  Tgt: get the modified string attribute of the organization object
  Pred: return a string representation of the modifiers
573 Code: get Label <sep> { return label . getLabel ( type ) ; }
  Tgt: this is used to acquire the label that the type provided is represented by
  Pred: return the label for this label
574 Code: add Error Message <sep> { if ( mSetupComplete ) { mErrorList . addErrorMessage ( consoleMessage ) ; } else { if ( mErrorMessageCache == null ) { mErrorMessageCache = new Vector < ConsoleMessage > ( ) ; } mErrorMessageCache . add ( consoleMessage ) ; } }
  Tgt: add a message to the set of messages the console uses
  Pred: add a new message to the error error list
575 Code: get Minimum Size <sep> { Dimension returnValue = ( ( ComponentUI ) ( uis . elementAt ( 0 ) ) ) . getMinimumSize ( a ) ; for ( int i = 1 ; i < uis . size ( ) ; i ++ ) { ( ( ComponentUI ) ( uis . elementAt ( i ) ) ) . getMinimumSize ( a ) ; } return returnValue ; }
  Tgt: invoke the get minimum size method on each ui handled by this object
  Pred: invoke the get minimum size method on each ui handled by this object
576 Code: create Unordered List <sep> { StringBuilder sb = new StringBuilder ( ) ; if ( list != null ) { for ( Object o : list ) { sb . append ( "*-" ) ; sb . append ( o . toString ( ) ) ; sb . append ( Constants . LINE_SEPARATOR ) ; } } return sb . toString ( ) ; }
  Tgt: create a list appropriate for the presentation implementation
  Pred: create an instance of slot
577 Code: set Payin Cbs Acttype <sep> { this . payinCbsActtype = payinCbsActtype == null ? null : payinCbsActtype . trim ( ) ; }
  Tgt: this method was generated by my batis generator
  Pred: this method was generated by abator for i batis
578 Code: create M Bean <sep> { return server . createMBean ( className , name , loaderName ) ; }
  Tgt: instantiate and registers an m bean in the m bean server
  Pred: create a new dtm object for the given uri
579 Code: renew Delegation Token <sep> { return saslServer . renewDelegationToken ( tokenStrForm ) ; }
  Tgt: renew a delegation token to extend its lifetime
  Pred: renew a delegation token to extend its lifetime
580 Code: write Q Name <sep> { java . lang . String namespaceURI = qname . getNamespaceURI ( ) ; if ( namespaceURI != null ) { java . lang . String prefix = xmlWriter . getPrefix ( namespaceURI ) ; if ( prefix == null ) { prefix = generatePrefix ( namespaceURI ) ; xmlWriter . writeNamespace ( prefix , namespaceURI ) ; xmlWriter . setPrefix ( prefix , namespaceURI ) ; } if ( prefix . trim ( ) . length ( ) > 0 ) { xmlWriter . writeCharacters ( prefix + ":" + org . apache . axis2 . databinding . utils . ConverterUtil . convertToString ( qname ) ) ; } else { xmlWriter . writeCharacters ( org . apache . axis2 . databinding . utils . ConverterUtil . convertToString ( qname ) ) ; } } else { xmlWriter . writeCharacters ( org . apache . axis2 . databinding . utils . ConverterUtil . convertToString ( qname ) ) ; } }
  Tgt: handle qnames
  Pred: handle qnames
581 Code: get Minutes <sep> { return new GregorianCalendar ( milliseconds ) . get ( Calendar . MINUTE ) ; }
  Tgt: return the gregorian calendar minute of the hour for this date object
  Pred: return the gregorian calendar minute of the hour for this date object
582 Code: read Length <sep> { remain = Utils . readVInt ( in ) ; if ( remain >= 0 ) { lastChunk = true ; } else { remain = - remain ; } }
  Tgt: read the length of next chunk
  Pred: return next length of buffer
583 Code: sort <sep> { if ( array . length > 1 ) { Arrays . sort ( array , INSTANCE ) ; } }
  Tgt: sort the given array with a default annotation aware order comparator
  Pred: sort an array of elements
584 Code: cut <sep> { String origin = s ; if ( s == null ) return s ; if ( s . equals ( "" ) ) return s ; if ( addSeperatorFirst ) size = size - fontMetrics . stringWidth ( seperator ) ; while ( fontMetrics . stringWidth ( s + startString ) > size && s . contains ( seperator ) ) { s = s . substring ( s . indexOf ( seperator ) + 1 , s . length ( ) ) ; } if ( s . equals ( origin ) ) return s ; if ( addSeperatorFirst ) s = seperator + s ; s = startString + s ; return s ; }
  Tgt: create a new string which is truncated from origin string
  Pred: force the given key in the given file with the given head and returns its suffix
585 Code: does Message Id Already Exist <sep> { Cursor cursor = null ; try { cursor = cr . query ( databaseUri , new String [ ] { RichMessagingData . KEY_MESSAGE_ID } , "(" + RichMessagingData . KEY_MESSAGE_ID + "-=-"" + msgId + "")" , null , null ) ; int messagesNumber = cursor . getCount ( ) ; return messagesNumber != 0 ; } catch ( Exception e ) { return false ; } finally { if ( cursor != null ) cursor . close ( ) ; } }
  Tgt: do message id already exist
  Pred: erase a message of the pool message
586 Code: get Attribute Value <sep> { if ( hasName ( ) ) { final SOAPElement currentElement = ( SOAPElement ) currentNode ; final int numAttrs = ( attributeNames == null ? 0 : attributeNames . length ) ; for ( int count = 0 ; count < numAttrs ; count ++ ) { final Name name = attributeNames [ count ] ; if ( testEquals ( namespaceURI , name . getURI ( ) ) && testEquals ( localName , name . getLocalName ( ) ) ) { return ( ( SOAPElement ) currentElement ) . getAttributeValue ( name ) ; } } } return null ; }
  Tgt: get the value of the specified attribute
  Pred: implementation value
587 Code: init Menu <sep> { JPanel contentPanel = new JPanel ( ) ; setTitle ( "Bookmarks" ) ; setBounds ( 100 , 100 , WINDOW_INIT_WIDTH , WINDOW_INIT_HEIGHT ) ; setMinimumSize ( new Dimension ( WINDOW_INIT_WIDTH , WINDOW_INIT_HEIGHT ) ) ; getContentPane ( ) . setLayout ( new BorderLayout ( ) ) ; contentPanel . setBorder ( new EmptyBorder ( 5 , 5 , 0 , 5 ) ) ; getContentPane ( ) . add ( contentPanel , BorderLayout . CENTER ) ; contentPanel . setLayout ( new BorderLayout ( 0 , 0 ) ) ; int scrollWidth = WINDOW_INIT_WIDTH - SCROLL_CONTENT_WIDTH_DIFF ; int scrollHeight = numberOfBookmarks * ( 5 + BookmarkItemPanel . BOOKMARK_ITEM_HEIGHT ) ; Dimension scrollDi = new Dimension ( scrollWidth , scrollHeight ) ; scrollContentPanel . setPreferredSize ( scrollDi ) ; scrollContentPanel . setMaximumSize ( scrollDi ) ; JPanel titlePanel = new JPanel ( ) ; contentPanel . add ( titlePanel , BorderLayout . NORTH ) ; JLabel lblSelectABookmark = new JLabel ( "Select-a-bookmark-by-clicking-on-its-name-below:" ) ; titlePanel . add ( lblSelectABookmark ) ; scrollPane = new JScrollPane ( scrollContentPanel ) ; scrollPane . setHorizontalScrollBarPolicy ( ScrollPaneConstants . HORIZONTAL_SCROLLBAR_NEVER ) ; scrollPane . setVerticalScrollBarPolicy ( ScrollPaneConstants . VERTICAL_SCROLLBAR_ALWAYS ) ; contentPanel . add ( scrollPane ) ; addComponentListener ( new ResizeListener ( ) ) ; }
  Tgt: initialize the menu screen
  Pred: initialize the menu
588 Code: get <sep> { if ( defaulted ( name ) ) return defvalue ; else return ( ( Boolean ) fields . get ( name ) ) . booleanValue ( ) ; }
  Tgt: get the value of the named boolean field from the persistent field
  Pred: get the value of the named long field from the persistent fields
589 Code: lap <sep> { return lap ( DEFAULT ) ; }
  Tgt: get the time of the default watch, relative to the last call to lap
  Pred: locate a result
590 Code: deal New Array <sep> { Card [ ] deck = getAllCards ( ) ; for ( int i = 0 ; i < numCardsToDeal ; i ++ ) { int toSwap = random . nextInt ( DECKSIZE - i ) + i ; Card temp = deck [ i ] ; deck [ i ] = deck [ toSwap ] ; deck [ toSwap ] = temp ; } Card [ ] result = new Card [ numCardsToDeal ] ; for ( int i = 0 ; i < numCardsToDeal ; i ++ ) { result [ i ] = deck [ i ] ; } return result ; }
  Tgt: deal a certain number of cards into an array
  Pred: return a new array of the order between the start and end position
591 Code: remove Class <sep> { loadedClasses . remove ( clazz . getClassName ( ) ) ; }
  Tgt: remove class from repository
  Pred: remove class from repository
592 Code: set Up Resolution Chooser <sep> { JComboBox resolutionBox = new JComboBox ( ) ; resolutionBox . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent e ) { updateDisplayChoices ( ) ; } } ) ; return resolutionBox ; }
  Tgt: setupchooser retrieves all available display modes and places them in a j combo box
  Pred: helper for the jvm address for the given jvm id
593 Code: get Request Builder <sep> { return new Builder ( ) ; }
  Tgt: get the client request builder
  Pred: return the response value
594 Code: add Cluster <sep> { List < FileIdCluster > clusters = new ArrayList < FileIdCluster > ( Arrays . asList ( field_5_fileIdClusters ) ) ; clusters . add ( new FileIdCluster ( dgId , numShapedUsed ) ) ; if ( sort ) Collections . sort ( clusters , MY_COMP ) ; maxDgId = Math . min ( maxDgId , dgId ) ; field_5_fileIdClusters = clusters . toArray ( new FileIdCluster [ clusters . size ( ) ] ) ; }
  Tgt: add a new cluster
  Pred: add a kernel to the list
595 Code: sub Row <sep> { Map < String , Object > newValues = new HashMap < String , Object > ( ) ; CollectionUtils . subMap ( this . values , newValues , prefix ) ; return new Row ( newValues ) ; }
  Tgt: get sub row by appointing prefix
  Pred: multiply any entries x into the top of this row vector
596 Code: get Notification Type <sep> { Object [ ] obj = timerTable . get ( id ) ; if ( obj != null ) { return ( ( ( TimerNotification ) obj [ TIMER_NOTIF_INDEX ] ) . getType ( ) ) ; } return null ; }
  Tgt: get the timer notification type corresponding to the specified identifier
  Pred: return the current type of the notifications associated with this event
597 Code: set Score <sep> { this . dataWatcher . updateObject ( 18 , Integer . valueOf ( par1 ) ) ; }
  Tgt: set players score
  Pred: set the locale where the test ends
598 Code: parse Minor Version <sep> { try { minorVersion = Integer . parseInt ( version ) ; } catch ( NumberFormatException e ) { if ( FSUtils . debug . messageEnabled ( ) ) { FSUtils . debug . message ( "FSNameIdentifierMappingResponse." + "parseMinorVersion:invalid-MinorVersion:" + version , e ) ; } throw new FSMsgException ( "wrongInput" , null ) ; } if ( minorVersion > IFSConstants . FF_12_PROTOCOL_MINOR_VERSION ) { if ( FSUtils . debug . messageEnabled ( ) ) { FSUtils . debug . message ( "FSNameIdentifierMappingResponse." + "parseMinorVersion:-MinorVersion-is-too-high" ) ; } throw new FSMsgException ( "requestVersionTooHigh" , null ) ; } else if ( minorVersion < IFSConstants . FF_11_PROTOCOL_MINOR_VERSION ) { if ( FSUtils . debug . messageEnabled ( ) ) { FSUtils . debug . message ( "FSNameIdentifierMappingResponse." + "parseMinorVersion:-MinorVersion-is-too-low" ) ; } throw new FSMsgException ( "requestVersionTooLow" , null ) ; } }
  Tgt: set the minor version by parsing the version string
  Pred: parse the javadoc
599 Code: put <sep> { removeFromRequestData ( name ) ; mParamList . add ( name ) ; mTypeList . add ( TYPE_PARCELABLE ) ; mBundle . putParcelable ( name , value ) ; return this ; }
  Tgt: add a parcelable parameter to the request, replacing any existing value for the given name
  Pred: add a short parameter to the request, replacing any existing value for the given name
600 Code: get Attr Size <sep> { return Util . readIntBE ( attrSize ) ; }
  Tgt: size of attribute data in bytes
  Pred: get the number of delimiters
601 Code: get All References For <sep> { Hashtable refHash = new Hashtable ( ) ; Hashtable spcHash = new Hashtable ( ) ; Hashtable arrHash = new Hashtable ( ) ; int refSize ; refHash . put ( ct . getQualifiedName ( ) , ct ) ; accumulateReferences ( refHash , spcHash , arrHash ) ; do { refSize = refHash . size ( ) ; accumulateReferences ( refHash , spcHash , arrHash ) ; } while ( refSize < refHash . size ( ) ) ; Vector outVec = new Vector ( ) ; Enumeration e = refHash . elements ( ) ; while ( e . hasMoreElements ( ) ) { CompoundType t = ( CompoundType ) e . nextElement ( ) ; outVec . addElement ( t ) ; } e = spcHash . elements ( ) ; while ( e . hasMoreElements ( ) ) { CompoundType t = ( CompoundType ) e . nextElement ( ) ; outVec . addElement ( t ) ; } e = arrHash . elements ( ) ; nextSequence : while ( e . hasMoreElements ( ) ) { ArrayType at = ( ArrayType ) e . nextElement ( ) ; int dim = at . getArrayDimension ( ) ; Type et = at . getElementType ( ) ; Enumeration e2 = arrHash . elements ( ) ; while ( e2 . hasMoreElements ( ) ) { ArrayType at2 = ( ArrayType ) e2 . nextElement ( ) ; if ( et == at2 . getElementType ( ) && dim < at2 . getArrayDimension ( ) ) continue nextSequence ; } outVec . addElement ( at ) ; } return outVec ; }
  Tgt: get all referenced types of a given tyoe for which an idl file needs to be generated
  Pred: get all declared reference from a list
602 Code: to Write Location <sep> { return new LocationSaveable ( l . getWorld ( ) . getName ( ) , l . getBlockX ( ) , l . getBlockY ( ) , l . getBlockZ ( ) ) ; }
  Tgt: convert a location to write location
  Pred: convert this server to the specified scale
603 Code: close <sep> { realClose ( true , true ) ; }
  Tgt: close this prepared statement and releases all resources
  Pred: close the underlying reader
604 Code: set Traffic Class <sep> { checkOpenAndCreate ( true ) ; if ( value < 0 || value > 255 ) { throw new IllegalArgumentException ( "Value-doesn't-fit-in-an-unsigned-byte:-" + value ) ; } impl . setOption ( SocketOptions . IP_TOS , Integer . valueOf ( value ) ) ; }
  Tgt: set this sockets socket options ip tos value for every packet sent by this socket
  Pred: set the bind class for the given class
605 Code: get Selected Text <sep> { AccessibleText at = getNoteLabelAccessibleText ( ) ; if ( at != null ) { return at . getSelectedText ( ) ; } return null ; }
  Tgt: return the portion of the text that is selected
  Pred: return the text associated with the editor
606 Code: Property Cache File <sep> { boolean setInActive = true ; if ( aFileName != null ) { FileInputStream inStream = null ; final String currentConfigHash = getConfigHashCode ( aCurrentConfig ) ; try { inStream = new FileInputStream ( aFileName ) ; mDetails . load ( inStream ) ; final String cachedConfigHash = mDetails . getProperty ( CONFIG_HASH_KEY ) ; setInActive = false ; if ( ( cachedConfigHash == null ) || ! cachedConfigHash . equals ( currentConfigHash ) ) { mDetails . clear ( ) ; mDetails . put ( CONFIG_HASH_KEY , currentConfigHash ) ; } } catch ( final FileNotFoundException e ) { setInActive = false ; mDetails . put ( CONFIG_HASH_KEY , currentConfigHash ) ; } catch ( final IOException e ) { Utils . getExceptionLogger ( ) . debug ( "Unable-to-open-cache-file,-ignoring." , e ) ; } finally { Utils . closeQuietly ( inStream ) ; } } mDetailsFile = ( setInActive ) ? null : aFileName ; }
  Tgt: create a new property cache file instance
  Pred: construct a new key that can be used as a property
607 Code: parse <sep> { DescribeVolumeAttribute object = new DescribeVolumeAttribute ( ) ; int event ; java . lang . String nillableValue = null ; java . lang . String prefix = "" ; java . lang . String namespaceuri = "" ; try { while ( ! reader . isStartElement ( ) && ! reader . isEndElement ( ) ) reader . next ( ) ; java . util . Vector handledAttributes = new java . util . Vector ( ) ; while ( ! reader . isEndElement ( ) ) { if ( reader . isStartElement ( ) ) { if ( reader . isStartElement ( ) && new javax . xml . namespace . QName ( "http://ec2.amazonaws.com/doc/2012-08-15/" , "DescribeVolumeAttribute" ) . equals ( reader . getName ( ) ) ) { object . setDescribeVolumeAttribute ( DescribeVolumeAttributeType . Factory . parse ( reader ) ) ; } else { throw new org . apache . axis2 . databinding . ADBException ( "Unexpected-subelement-" + reader . getLocalName ( ) ) ; } } else { reader . next ( ) ; } } } catch ( javax . xml . stream . XMLStreamException e ) { throw new java . lang . Exception ( e ) ; } return object ; }
  Tgt: create the object
  Pred: create the object
608 Code: distance Sq <sep> { return p1 . distanceSq ( p2 ) ; }
  Tgt: compute the square of the distance between two vectors
  Pred: compute the great distance of this vector
609 Code: get String <sep> { int maxpos = pos + maxlen ; int endpos = pos ; while ( bytarray [ endpos ] != 0x00 && endpos < maxpos ) endpos ++ ; if ( endpos <= maxpos ) return new String ( bytarray , pos , endpos - pos ) ; return null ; }
  Tgt: unpack a null terminated string from the data buffer
  Pred: retrieve the string in the given string
610 Code: locate Firefox Binary From Platform <sep> { File binary = null ; switch ( Platform . getCurrent ( ) ) { case WINDOWS : case VISTA : case XP : binary = new File ( getEnvVar ( "PROGRAMFILES" , "|Program-Files" ) + "|Mozilla-Firefox|firefox.exe" ) ; if ( ! binary . exists ( ) ) { binary = new File ( getEnvVar ( "ProgramFiles(x86)" , getEnvVar ( "SystemDrive" , "c:" ) + "|Program-Files-(x86)" ) + "|Mozilla-Firefox|firefox.exe" ) ; } break ; case MAC : binary = new File ( "/Applications/Firefox.app/Contents/MacOS/firefox-bin" ) ; break ; default : } return binary != null && binary . exists ( ) ? binary : findBinary ( "firefox3" , "firefox2" , "firefox" ) ; }
  Tgt: locate the firefox binary by platform
  Pred: for a condition from a keystore
611 Code: sort <sep> { rangeCheck ( a . length , fromIndex , toIndex ) ; sort2 ( a , fromIndex , toIndex ) ; }
  Tgt: sort the specified range of the specified array of floats into ascending numerical order
  Pred: sort the specified array of objects into ascending numerical order
612 Code: get Byte Code <sep> { setPositions ( ) ; ByteArrayOutputStream b = new ByteArrayOutputStream ( ) ; DataOutputStream out = new DataOutputStream ( b ) ; try { for ( InstructionHandle ih = start ; ih != null ; ih = ih . next ) { Instruction i = ih . instruction ; i . dump ( out ) ; } } catch ( IOException e ) { System . err . println ( e ) ; return null ; } return b . toByteArray ( ) ; }
  Tgt: convert the instruction list into an array of bytes
  Pred: return a byte representation of the buffer
613 Code: generate Enter Action <sep> { StringBuilder javaCode = new StringBuilder ( ) ; if ( state != null ) { String action = state . getEnterAction ( ) ; if ( action != null && ! action . isEmpty ( ) ) { javaCode . append ( action ) ; javaCode . append ( "();-" ) ; this . actions . add ( action ) ; } } return javaCode . toString ( ) ; }
  Tgt: generate the source code for the enter action
  Pred: match a visitor key
614 Code: execute Rest Request Async <sep> { return newRestRequest ( session , restMethod , parameters , httpMethod ) . executeAsync ( ) ; }
  Tgt: start a new request configured to make a call to the facebook rest api
  Pred: create a new request configured to perform a call to the facebook server unit
615 Code: as <sep> { return new Template ( content ) ; }
  Tgt: provide a template string as a template instance
  Pred: return the length of the vector
616 Code: add Exposed Types <sep> { if ( type instanceof TypeVariable ) { logger . debug ( "Adding-exposed-types-from-{},-which-is-a-type-variable" , type ) ; addExposedTypes ( ( TypeVariable ) type , cause ) ; } else if ( type instanceof WildcardType ) { logger . debug ( "Adding-exposed-types-from-{},-which-is-a-wildcard-type" , type ) ; addExposedTypes ( ( WildcardType ) type , cause ) ; } else if ( type instanceof GenericArrayType ) { logger . debug ( "Adding-exposed-types-from-{},-which-is-a-generic-array-type" , type ) ; addExposedTypes ( ( GenericArrayType ) type , cause ) ; } else if ( type instanceof ParameterizedType ) { logger . debug ( "Adding-exposed-types-from-{},-which-is-a-parameterized-type" , type ) ; addExposedTypes ( ( ParameterizedType ) type , cause ) ; } else if ( type instanceof Class ) { logger . debug ( "Adding-exposed-types-from-{},-which-is-a-class" , type ) ; addExposedTypes ( ( Class ) type , cause ) ; } else { throw new IllegalArgumentException ( "Unknown-implementation-of-Type" ) ; } }
  Tgt: add any references learned by following a link from cause to type
  Pred: add the types to this trailer
617 Code: return File <sep> { FileInputStream fis = null ; try { fis = new FileInputStream ( filename ) ; byte [ ] buf = new byte [ 4 * 1024 ] ; int bytesRead ; while ( ( bytesRead = fis . read ( buf ) ) != - 1 ) { out . write ( buf , 0 , bytesRead ) ; } } finally { if ( fis != null ) fis . close ( ) ; } }
  Tgt: send the contents of the specified file to the output stream
  Pred: print the contents of a file
618 Code: set Feature Drawable Resource <sep> { getWindow ( ) . setFeatureDrawableResource ( featureId , resId ) ; }
  Tgt: convenience for calling android
  Pred: get the named image that goes with the feature
619 Code: verify Provider Jar <sep> { JarVerifier jv = new JarVerifier ( codeBase , false ) ; jv . verify ( ) ; }
  Tgt: verify if the jar at url code base is a signed provider jar file
  Pred: construct a new fugue result object
620 Code: get On Measure Spec <sep> { int spec ; if ( measureSpecMode == MeasureSpec . EXACTLY ) { spec = measureSpecSize ; } else if ( measureSpecMode == MeasureSpec . AT_MOST ) { spec = Math . min ( desiredSize , measureSpecSize ) ; } else { spec = desiredSize ; } return spec ; }
  Tgt: determine the specs for the on measure function
  Pred: this method initializes mnu only
621 Code: mouse Dragged <sep> { if ( dragger != null ) { if ( e . getSource ( ) == splitPane ) { dragger . continueDrag ( e . getX ( ) , e . getY ( ) ) ; } else if ( e . getSource ( ) == BasicSplitPaneDivider . this ) { Point ourLoc = getLocation ( ) ; dragger . continueDrag ( e . getX ( ) + ourLoc . x , e . getY ( ) + ourLoc . y ) ; } else if ( e . getSource ( ) == hiddenDivider ) { Point hDividerLoc = hiddenDivider . getLocation ( ) ; int ourX = e . getX ( ) + hDividerLoc . x ; int ourY = e . getY ( ) + hDividerLoc . y ; dragger . continueDrag ( ourX , ourY ) ; } e . consume ( ) ; } }
  Tgt: if dragger is not null it is messaged with continue drag
  Pred: override processing of open dialog
622 Code: add Packet <sep> { packets . add ( packet ) ; }
  Tgt: add a packet to the list of packets in this bundle
  Pred: add a forward to the group
623 Code: strategy For <sep> { checkNotNull ( annotationType , "annotation-type" ) ; ensureRetainedAtRuntime ( annotationType ) ; ensureIsBindingAnnotation ( annotationType ) ; return new AnnotationTypeStrategy ( Annotations . canonicalizeIfNamed ( annotationType ) , null ) ; }
  Tgt: get the strategy for an annotation type
  Pred: remember the
624 Code: has Database <sep> { if ( htDatabases == null ) { loadDatabaseProjects ( ) ; } for ( Enumeration e = htDatabases . elements ( ) ; e . hasMoreElements ( ) ; ) { String sName = ( String ) e . nextElement ( ) ; if ( sName . equals ( sDatabase ) ) return true ; } return false ; }
  Tgt: check if a database with the given name already exists
  Pred: check if the database parameters have been present, otherwise
625 Code: get Basic Scope <sep> { return children . get ( type + SEPARATOR + name ) ; }
  Tgt: return base scope of given type with given name
  Pred: get the largest section of this instruction
626 Code: get Intensity <sep> { return ( Object ) call ( "getIntensity" , name ) . get ( ) ; }
  Tgt: get the intensity of a led or device
  Pred: return a list of strings for the specified delimiter
627 Code: code Point Count <sep> { if ( beginIndex < 0 || endIndex > count || beginIndex > endIndex ) { throw new IndexOutOfBoundsException ( ) ; } int s = beginIndex + offset ; return Character . codePointCount ( value , s , endIndex - beginIndex ) ; }
  Tgt: calculate the number of unicode code points between begin index and end index
  Pred: return the number of characters in the subsequence of the specified character sequence, as delineated by begin index and end index
628 Code: _write <sep> { output . write_octet ( value ) ; }
  Tgt: marshal to output the value in this byte holder object
  Pred: write the value field to the given stream
629 Code: get Residues <sep> { if ( residues == null ) { residues = new ArrayList < String > ( 1 ) ; } return this . residues ; }
  Tgt: get the value of the residues property
  Pred: get the value of the bridge property
630 Code: use Protocol Version <sep> { if ( ! objectsWritten . isEmpty ( ) ) { throw new IllegalStateException ( "Cannot-set-protocol-version-when-stream-in-use" ) ; } if ( version != ObjectStreamConstants . PROTOCOL_VERSION_1 && version != ObjectStreamConstants . PROTOCOL_VERSION_2 ) { throw new IllegalArgumentException ( "Unknown-protocol:-" + version ) ; } protocolVersion = version ; }
  Tgt: set the specified protocol version to be used by this stream
  Pred: determine the network address and initializes protocol
631 Code: roll Dice <sep> { int sum = 0 ; Random randNum = new Random ( ) ; diceRoll [ 0 ] = randNum . nextInt ( 6 ) + 1 ; diceRoll [ 1 ] = randNum . nextInt ( 6 ) + 1 ; sum += diceRoll [ 0 ] ; sum += diceRoll [ 1 ] ; return sum ; }
  Tgt: roll the dice
  Pred: record the given character code to the given delimiter
632 Code: lookup Component <sep> for ( Class < ? > repoClass : candidateClasses ) { if ( repos . containsKey ( repoClass ) ) { return repos . get ( repoClass ) ; } } throw new RuntimeException ( "Unknown-Repository-classes-" + candidateClasses ) ; }
  Tgt: repository access lookup the repository component meta data from a list of candidate classes
  Pred: create an component
633 Code: accept <sep> { if ( fileFilter != null ) { return fileFilter . accept ( file ) ; } else { return super . accept ( file ) ; } }
  Tgt: check the filter
  Pred: check if there is a dead lock
634 Code: remove <sep> { int n = 0 ; String sql = "DELETE-FROM-CLW_RETURN_REQUEST-WHERE-RETURN_REQUEST_ID-=-" + pReturnRequestId ; if ( log . isDebugEnabled ( ) ) { log . debug ( "SQL:-" + sql ) ; } Statement stmt = pCon . createStatement ( ) ; n = stmt . executeUpdate ( sql ) ; stmt . close ( ) ; return n ; }
  Tgt: delete a return request data object with the specified key from the database
  Pred: remove an object from the list
635 Code: wait For Shutdown <sep> { try { synchronized ( s_shutdownObject ) { s_shutdownObject . wait ( ) ; } } catch ( InterruptedException ignore ) { } }
  Tgt: simple technique to prevent the main thread from existing until we are done
  Pred: ensure for the worker stages to complete
636 Code: acquire Shared <sep> { if ( tryAcquireShared ( arg ) < 0 ) doAcquireShared ( arg ) ; }
  Tgt: acquire in shared mode, ignoring interrupts
  Pred: acquire a comparator in shared uninterruptible mode
637 Code: set Update Emp Code <sep> { this . updateEmpCode = updateEmpCode == null ? null : updateEmpCode . trim ( ) ; }
  Tgt: this method was generated by my batis generator
  Pred: this method was generated by my batis generator
638 Code: Suppress Warnings <sep> { if ( collection == null || collection . size ( ) == 0 ) { throw new IllegalArgumentException ( message ) ; } }
  Tgt: validate an argument, throwing illegal argument exception if the argument collection is empty
  Pred: return a new list of all subrecords
639 Code: substract <sep> { this . x -= v . getX ( ) ; this . y -= v . getY ( ) ; this . z -= v . getZ ( ) ; }
  Tgt: subtraction of two vectors, u = u v
  Pred: construct a transaction watcher
640 Code: generic Method Type <sep> { return genericMethodType ( objectArgCount , false ) ; }
  Tgt: find or creates a method type whose components are all object
  Pred: give a method
641 Code: get Text <sep> { Segment text = SegmentCache . getSharedSegment ( ) ; try { Document doc = getDocument ( ) ; doc . getText ( p0 , p1 - p0 , text ) ; } catch ( BadLocationException bl ) { throw new StateInvariantError ( "GlyphView:-Stale-view:-" + bl ) ; } return text ; }
  Tgt: fetch a reference to the text that occupies the given range
  Pred: get the text
642 Code: destroy Activity <sep> { LocalActivityRecord r = mActivities . get ( id ) ; Window win = null ; if ( r != null ) { win = performDestroy ( r , finish ) ; if ( finish ) { mActivities . remove ( id ) ; mActivityArray . remove ( r ) ; } } return win ; }
  Tgt: destroy the activity associated with a particular id
  Pred: destroy a namespace activity
643 Code: create Element <sep> { Document doc = null ; try { doc = DocumentBuilderFactory . newInstance ( ) . newDocumentBuilder ( ) . newDocument ( ) ; } catch ( ParserConfigurationException e ) { throw new RuntimeException ( e ) ; } Element elem = doc . createElementNS ( qName . getNamespaceURI ( ) , qName . getLocalPart ( ) ) ; return elem ; }
  Tgt: create a new element having the specified qualified name
  Pred: create an element element for the specified element
644 Code: create <sep> { if ( value instanceof Float ) { return new FloatEngine ( value . floatValue ( ) ) ; } else if ( value instanceof Double ) { return new DoubleEngine ( value . doubleValue ( ) ) ; } else if ( value instanceof Long ) { return new LongEngine ( value . longValue ( ) ) ; } else { return new IntegerEngine ( value . intValue ( ) ) ; } }
  Tgt: create a type specific engine using the given initial value
  Pred: create a tested product based on this map
645 Code: clone <sep> { try { Hashtable < K , V > t = ( Hashtable < K , V > ) super . clone ( ) ; t . table = new Entry [ table . length ] ; for ( int i = table . length ; i -- > 0 ; ) { t . table [ i ] = ( table [ i ] != null ) ? ( Entry < K , V > ) table [ i ] . clone ( ) : null ; } t . keySet = null ; t . entrySet = null ; t . values = null ; t . modCount = 0 ; return t ; } catch ( CloneNotSupportedException e ) { throw new InternalError ( ) ; } }
  Tgt: create a shallow copy of this hashtable
  Pred: return a new copy of this list of specified objects
646 Code: Jsx Getter <sep> { @ WebBrowser ( value = IE , minVersion = 8 ) , @ WebBrowser ( FF ) } ) public String getQuotes ( ) { return getStyleAttribute ( QUOTES , null ) ; }
  Tgt: get the quotes style attribute
  Pred: activate the poisson entity
647 Code: clear <sep> { mValues . clear ( ) ; }
  Tgt: remove all values
  Pred: clear watcher state
648 Code: Xml Element Decl <sep> { return new JAXBElement < String > ( _Description_QNAME , String . class , null , value ) ; }
  Tgt: create an instance of jaxb element
  Pred: create an instance of jaxb element
649 Code: has Own Declared Property <sep> { return hasOwnProperty ( name ) && isPropertyTypeDeclared ( name ) ; }
  Tgt: whether the given property is declared on this object
  Pred: return whether the specified property contains the read property
650 Code: write Q Name <sep> { java . lang . String namespaceURI = qname . getNamespaceURI ( ) ; if ( namespaceURI != null ) { java . lang . String prefix = xmlWriter . getPrefix ( namespaceURI ) ; if ( prefix == null ) { prefix = generatePrefix ( namespaceURI ) ; xmlWriter . writeNamespace ( prefix , namespaceURI ) ; xmlWriter . setPrefix ( prefix , namespaceURI ) ; } if ( prefix . trim ( ) . length ( ) > 0 ) { xmlWriter . writeCharacters ( prefix + ":" + org . apache . axis2 . databinding . utils . ConverterUtil . convertToString ( qname ) ) ; } else { xmlWriter . writeCharacters ( org . apache . axis2 . databinding . utils . ConverterUtil . convertToString ( qname ) ) ; } } else { xmlWriter . writeCharacters ( org . apache . axis2 . databinding . utils . ConverterUtil . convertToString ( qname ) ) ; } }
  Tgt: handle qnames
  Pred: handle qnames
651 Code: set Column Matrix <sep> { MatrixUtils . checkColumnIndex ( this , column ) ; final int nRows = getRowDimension ( ) ; if ( ( matrix . getRowDimension ( ) != nRows ) || ( matrix . getColumnDimension ( ) != 1 ) ) { throw new MatrixDimensionMismatchException ( matrix . getRowDimension ( ) , matrix . getColumnDimension ( ) , nRows , 1 ) ; } final int jBlock = column / BLOCK_SIZE ; final int jColumn = column - jBlock * BLOCK_SIZE ; final int jWidth = blockWidth ( jBlock ) ; int mBlockIndex = 0 ; int mIndex = 0 ; double [ ] mBlock = matrix . blocks [ mBlockIndex ] ; for ( int iBlock = 0 ; iBlock < blockRows ; ++ iBlock ) { final int iHeight = blockHeight ( iBlock ) ; final double [ ] block = blocks [ iBlock * blockColumns + jBlock ] ; for ( int i = 0 ; i < iHeight ; ++ i ) { if ( mIndex >= mBlock . length ) { mBlock = matrix . blocks [ ++ mBlockIndex ] ; mIndex = 0 ; } block [ i * jWidth + jColumn ] = mBlock [ mIndex ++ ] ; } } }
  Tgt: set the entries in column number column as a column matrix
  Pred: set the value of the column statement to a rotation
652 Code: decode To Object <sep> { byte [ ] objBytes = decode ( encodedObject , options ) ; java . io . ByteArrayInputStream bais = null ; java . io . ObjectInputStream ois = null ; Object obj = null ; try { bais = new java . io . ByteArrayInputStream ( objBytes ) ; if ( loader == null ) { ois = new java . io . ObjectInputStream ( bais ) ; } else { ois = new java . io . ObjectInputStream ( bais ) { @ Override public Class < ? > resolveClass ( java . io . ObjectStreamClass streamClass ) throws java . io . IOException , ClassNotFoundException { Class < ? > c = Class . forName ( streamClass . getName ( ) , false , loader ) ; if ( c == null ) { return super . resolveClass ( streamClass ) ; } else { return c ; } } } ; } obj = ois . readObject ( ) ; } catch ( java . io . IOException e ) { throw e ; } catch ( java . lang . ClassNotFoundException e ) { throw e ; } finally { try { bais . close ( ) ; } catch ( Exception e ) { } try { ois . close ( ) ; } catch ( Exception e ) { } } return obj ; }
  Tgt: attempt to decode Base64 data and deserialize a java object within
  Pred: decode data to a string
653 Code: buildfeatures From Utterance <sep> { List < String > features = new ArrayList < String > ( ) ; String [ ] tokens = ( utt ) . split ( "[|s]+" ) ; int l = tokens . length ; features . add ( "len=" + l ) ; Map < String , Integer > wordcounts = new HashMap < String , Integer > ( ) ; for ( int i = 0 ; i < l ; i ++ ) { String s0 = tokens [ i ] ; if ( ! wordcounts . containsKey ( s0 ) ) { wordcounts . put ( s0 , 1 ) ; } else wordcounts . put ( s0 , wordcounts . get ( s0 ) + 1 ) ; features . add ( s0 ) ; String s1 = ( ( i + 1 ) < l ) ? tokens [ i + 1 ] : "" ; String s2 = ( ( i + 2 ) < l ) ? tokens [ i + 2 ] : "" ; features . add ( s0 + ":" + s1 ) ; features . add ( s0 + ":" + s1 + ":" + s2 ) ; } for ( String key : wordcounts . keySet ( ) ) { features . add ( key + "=" + wordcounts . get ( key ) ) ; } return features ; }
  Tgt: derive loosely from features builder for mx classifier
  Pred: this function as a list of thrift zeros
654 Code: get Context Node List <sep> { try { DTMIterator cnl = m_xcontext . getContextNodeList ( ) ; return ( cnl == null ) ? null : ( DTMIterator ) cnl . cloneWithReset ( ) ; } catch ( CloneNotSupportedException cnse ) { return null ; } }
  Tgt: get the current context node list
  Pred: return the context node which is context
655 Code: create Document Input Stream <sep> { BufferedInputStream bin = new BufferedInputStream ( is ) ; bin . mark ( 2 ) ; int b0 = bin . read ( ) ; int b1 = bin . read ( ) ; bin . reset ( ) ; if ( ( b1 << 8 | b0 ) == GZIPInputStream . GZIP_MAGIC ) { GZIPInputStream iis = new GZIPInputStream ( bin ) ; return iis ; } else { return bin ; } }
  Tgt: wrap input stream in a buffered input stream
  Pred: return a document input stream for an input stream
656 Code: delete Cell <sep> { if ( chosenCell . getEditable ( ) ) { chosenCell . setBackground ( Color . WHITE ) ; chosenCell . setText ( "" ) ; chosenCell . setEditable ( true ) ; chosenCell = nothingCell ; } }
  Tgt: delete a cell that can be edited meaning we can delete a hint or a cell in the initial problem
  Pred: delete a vertical object
657 Code: get Int Parameter <sep> { String val = request . getParameter ( param ) ; try { return Integer . parseInt ( val . trim ( ) ) ; } catch ( Exception e ) { return - 1 ; } }
  Tgt: obtain a parameter from the given request as an int
  Pred: return the existing value for the given key
658 Code: get Hash Key <sep> { Object hashKey = null ; for ( Method met : obj . getClass ( ) . getDeclaredMethods ( ) ) { if ( met . getName ( ) . equals ( "getHashKey" ) ) { Object [ ] params = null ; hashKey = met . invoke ( obj , params ) ; break ; } } return hashKey ; }
  Tgt: get a hash key from a key of type k
  Pred: return the hashcode of an element
659 Code: store Transpose <sep> { buf . put ( m00 ) ; buf . put ( m10 ) ; buf . put ( m20 ) ; buf . put ( m30 ) ; buf . put ( m01 ) ; buf . put ( m11 ) ; buf . put ( m21 ) ; buf . put ( m31 ) ; buf . put ( m02 ) ; buf . put ( m12 ) ; buf . put ( m22 ) ; buf . put ( m32 ) ; buf . put ( m03 ) ; buf . put ( m13 ) ; buf . put ( m23 ) ; buf . put ( m33 ) ; return this ; }
  Tgt: store this matrix in a float buffer
  Pred: store the given probability to the given value
660 Code: get Fitness Value <sep> { if ( m_fitnessValue >= 0.000d && ! m_alwaysCalculate ) { return m_fitnessValue ; } else { return calcFitnessValue ( ) ; } }
  Tgt: retrieve the fitness value of this Chromosome, as determined by the active fitness function
  Pred: get the encoded value from the provided sequence
661 Code: create Child Element <sep> { int index = childXpath . indexOf ( "/" ) ; String elementName = childXpath ; String subChildXpath = null ; Element element = null ; Element child = null ; if ( index > 0 ) { elementName = childXpath . substring ( 0 , index ) ; subChildXpath = childXpath . substring ( index + 1 ) ; child = createChildElement ( subChildXpath ) ; } try { DocumentBuilderFactory dbf = DocumentBuilderFactory . newInstance ( ) ; DocumentBuilder db = dbf . newDocumentBuilder ( ) ; Document document = db . newDocument ( ) ; element = document . createElement ( elementName ) ; if ( child != null ) { Node importedNode = document . importNode ( child , true ) ; element . appendChild ( importedNode ) ; } } catch ( ParserConfigurationException pce ) { log . error ( "Exception-thrown-from-createChildElement():-" + pce . getMessage ( ) ) ; pce . printStackTrace ( ) ; } return element ; }
  Tgt: create child
  Pred: create a new element from the given element
662 Code: flush <sep> { if ( bufferModified ) { file . seek ( bufferStart ) ; file . write ( buffer , 0 , dataSize ) ; bufferModified = false ; } }
  Tgt: copy the contents of the buffer to the disk
  Pred: wait for writing this leases to the specified input stream
663 Code: reset <sep> { synchronized ( lock ) { declarations . clear ( ) ; parameterized . clear ( ) ; contextualized . clear ( ) ; if ( values != null ) { values . clear ( ) ; } } }
  Tgt: clear the cached data of this type system
  Pred: read the deflater to the last server
664 Code: signal Queue Worker <sep> { lockBoth . lock ( ) ; try { notEmptyBoth . signal ( ) ; } finally { lockBoth . unlock ( ) ; } }
  Tgt: this method sends a signal to the queue worker thread
  Pred: generate signal of threads waiting for lock
665 Code: recover File <sep> { while ( true ) { switch ( token ) { case CLASS : case INTERFACE : return ; case LBRACE : match ( LBRACE , RBRACE ) ; scan ( ) ; break ; case LPAREN : match ( LPAREN , RPAREN ) ; scan ( ) ; break ; case LSQBRACKET : match ( LSQBRACKET , RSQBRACKET ) ; scan ( ) ; break ; case EOF : return ; default : scan ( ) ; break ; } } }
  Tgt: recover after a syntax error in the file
  Pred: dump a file group
666 Code: read Fully <sep> { try { StringWriter writer = new StringWriter ( ) ; char [ ] buffer = new char [ 1024 ] ; int count ; while ( ( count = reader . read ( buffer ) ) != - 1 ) { writer . write ( buffer , 0 , count ) ; } return writer . toString ( ) ; } finally { reader . close ( ) ; } }
  Tgt: return the remainder of reader as a string, closing it when done
  Pred: return the remainder of reader as a string, closing it when done
667 Code: output Global Names <sep> { out . println ( "const-char*-" + functionName + "(int-index)-{" ) ; out . println ( "-switch(index)-{" ) ; for ( Map . Entry < String , Integer > entry : globals . entrySet ( ) ) { String name = entry . getKey ( ) ; int offset = entry . getValue ( ) ; name = name . replace ( '.' , '_' ) ; out . println ( "-case-" + offset + ":-return-"" + name + "";" ) ; } out . println ( "-default:-return-"" + functionName + ":-unknown-global-index";" ) ; out . println ( "-}" ) ; out . println ( "}" ) ; }
  Tgt: output a c function definition that looks up the name of a global word or reference based on a given index
  Pred: the simple arguments of the dictionary
668 Code: refresh Theme <sep> { UIManager manager = getUIManager ( ) ; if ( merge ) { Style unSelected = getUnselectedStyle ( ) ; setUnselectedStyle ( mergeStyle ( unSelected , manager . getComponentStyle ( id ) ) ) ; if ( selectedStyle != null ) { setSelectedStyle ( mergeStyle ( selectedStyle , manager . getComponentSelectedStyle ( id ) ) ) ; } if ( disabledStyle != null ) { setDisabledStyle ( mergeStyle ( disabledStyle , manager . getComponentCustomStyle ( id , "dis" ) ) ) ; } if ( pressedStyle != null ) { setPressedStyle ( mergeStyle ( pressedStyle , manager . getComponentCustomStyle ( id , "press" ) ) ) ; } } else { unSelectedStyle = null ; unSelectedStyle = getUnselectedStyle ( ) ; selectedStyle = null ; disabledStyle = null ; pressedStyle = null ; } checkAnimation ( ) ; manager . getLookAndFeel ( ) . bind ( this ) ; }
  Tgt: make sure the component is up to date with the given uiid
  Pred: set the
669 Code: fire Indexed Property Change <sep> { if ( oldValue != newValue ) { fireIndexedPropertyChange ( propertyName , index , Integer . valueOf ( oldValue ) , Integer . valueOf ( newValue ) ) ; } }
  Tgt: fire a property change of an integer property with the given name
  Pred: fire a named property change event to all registered listeners
670 Code: get Overflow Iterator <sep> if ( lazyOverflowIterator == null ) { lazyOverflowIterator = overflowEntries . entrySet ( ) . iterator ( ) ; } return lazyOverflowIterator ; }
  Tgt: it is important to create the overflow iterator only after the array entries have been iterated over because the overflow entry set changes when the client calls remove on the array entries, which invalidates any existing iterators
  Pred: it is important to create the overflow iterator only after the array entries have been iterated over because the overflow entry set changes when the client calls remove on the array entries, which invalidates any existing iterators
671 Code: new Builder <sep> { return new Builder ( type ) ; }
  Tgt: construct a message
  Pred: create a new builder for the given delimiter
672 Code: main <sep> { EventQueue . invokeLater ( new Runnable ( ) { public void run ( ) { try { DijkstraShortestPath window = new DijkstraShortestPath ( ) ; window . frame . setVisible ( true ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } } ) ; }
  Tgt: launch the application
  Pred: launch the application
673 Code: get Hostname From List <sep> { Socket checkSocket = getSocket ( hostListString , port , false ) ; String host ; if ( checkSocket != null ) { host = checkSocket . getInetAddress ( ) . getHostAddress ( ) ; checkSocket . close ( ) ; } else { host = hostListString ; } return host ; }
  Tgt: thanks to nat and other nastiness we will often have multi homed hosts with some of the ip addresses blocked
  Pred: retrieve a list of domain list elements
674 Code: procedure_ C <sep> { BigInteger pSub1 = p . subtract ( ONE ) ; BigInteger pSub1DivQ = pSub1 . divide ( q ) ; int length = p . bitLength ( ) ; for ( ; ; ) { BigInteger d = new BigInteger ( length , init_random ) ; if ( d . compareTo ( ONE ) > 0 && d . compareTo ( pSub1 ) < 0 ) { BigInteger a = d . modPow ( pSub1DivQ , p ) ; if ( a . compareTo ( ONE ) != 0 ) { return a ; } } } }
  Tgt: procedure c procedure generates the a value from the given p,q, returning the a value
  Pred: extract a reverse element
675 Code: set Environment <sep> { m_env = env ; Vector < String > varKeys = new Vector < String > ( env . getVariableNames ( ) ) ; DefaultComboBoxModel dm = new DefaultComboBoxModel ( varKeys ) { public Object getSelectedItem ( ) { Object item = super . getSelectedItem ( ) ; if ( item instanceof String ) { if ( env . getVariableValue ( ( String ) item ) != null ) { String newS = "${" + ( String ) item + "}" ; item = newS ; } } return item ; } } ; m_combo . setModel ( dm ) ; m_combo . setSelectedItem ( "" ) ; m_combo . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent e ) { String selected = ( String ) m_combo . getSelectedItem ( ) ; try { selected = processSelected ( selected ) ; selected = m_env . substitute ( selected ) ; } catch ( Exception ex ) { } m_combo . setToolTipText ( selected ) ; } } ) ; m_combo . getEditor ( ) . getEditorComponent ( ) . addKeyListener ( new KeyAdapter ( ) { public void keyReleased ( KeyEvent e ) { java . awt . Component theEditor = m_combo . getEditor ( ) . getEditorComponent ( ) ; if ( theEditor instanceof JTextField ) { String selected = ( ( JTextField ) theEditor ) . getText ( ) ; m_currentContents = selected ; if ( m_env != null ) { try { selected = m_env . substitute ( selected ) ; } catch ( Exception ex ) { } } m_combo . setToolTipText ( selected ) ; } } } ) ; }
  Tgt: set the environment variables to display in the drop down list
  Pred: field the tree to a java
676 Code: as Float Buffer <sep> { return FloatBuffer . wrap ( this ) ; }
  Tgt: return a float buffer which is based on the remaining content of this byte buffer
  Pred: return a string representation of this float value
677 Code: add <sep> { if ( solutionsList_ . size ( ) == capacity_ ) { Configuration . logger_ . severe ( "The-population-is-full" ) ; Configuration . logger_ . severe ( "Capacity-is-:-" + capacity_ ) ; Configuration . logger_ . severe ( "-Size-is:-" + this . size ( ) ) ; return false ; } solutionsList_ . add ( solution ) ; return true ; }
  Tgt: insert a new solution into the solution set
  Pred: insert the specified element into this set and consider it to the list
678 Code: is Probable Prime <sep> { if ( certainty <= 0 ) return true ; BigInteger w = this . abs ( ) ; if ( w . equals ( TWO ) ) return true ; if ( ! w . testBit ( 0 ) || w . equals ( ONE ) ) return false ; return w . primeToCertainty ( certainty , null ) ; }
  Tgt: check if this big integer is probably prime, false if its definitely composite
  Pred: check if an entity is a dart modifier
679 Code: make Parser <sep> { return ( Parser ) NewInstance . newInstance ( NewInstance . getClassLoader ( ) , className ) ; }
  Tgt: create a new sax parser object using the class name provided
  Pred: create a new instance of an image
680 Code: get Entry <sep> { checkNotClosed ( ) ; if ( entryName == null ) { throw new NullPointerException ( ) ; } ZipEntry ze = mEntries . get ( entryName ) ; if ( ze == null ) { ze = mEntries . get ( entryName + "/" ) ; } return ze ; }
  Tgt: get the zip entry with the specified name from this zip file
  Pred: get all entry from the given map
681 Code: Proxy <sep> { Objects . requireNonNull ( h ) ; this . h = h ; }
  Tgt: construct a new proxy instance from a subclass with the specified value for its invocation handler
  Pred: construct a new proxy
682 Code: get Variable Value <sep> { return m_envVars . get ( key ) ; }
  Tgt: get the value for a particular variable
  Pred: get the value in get of the form
683 Code: remove Colon <sep> { return origPath . replaceAll ( ":" , "" ) ; }
  Tgt: helper to remove colons from paths to sanitize them for consumption by hdfs
  Pred: remove a datanode from the list
684 Code: eval <sep> { e . eval ( statement ) ; }
  Tgt: metoda ktora vykona prikaz zadany parametrom statemenet
  Pred: match the current class to a class
685 Code: tagged Leaf Labels <sep> { List < CoreLabel > l = new ArrayList < CoreLabel > ( ) ; taggedLeafLabels ( t , l ) ; return l ; }
  Tgt: return the labels of the leaves in a Tree, augmented with pos tags
  Pred: determine the patchs trailing labels for a given set of instructions
686 Code: find Exception <sep> { ExceptionConfig config = null ; while ( true ) { String name = type . getName ( ) ; log . debug ( "findException:-look-locally-for-" + name ) ; config = findExceptionConfig ( name ) ; if ( config != null ) { return ( config ) ; } type = type . getSuperclass ( ) ; if ( type == null ) { break ; } } return ( null ) ; }
  Tgt: find and return the exception config instance defining how exceptions of the specified type should be handled
  Pred: find and checks that a class has been found
687 Code: get Returnval <sep> { if ( returnval == null ) { returnval = new ArrayList < ManagedObjectReference > ( ) ; } return this . returnval ; }
  Tgt: get the value of the returnval property
  Pred: get the value of the returnval property
688 Code: show Value Dialog <sep> { ValueDialog dialog = new ValueDialog ( component , name , description ) ; dialog . setTitle ( name ) ; dialog . setLocationRelativeTo ( null ) ; EventQueue . invokeLater ( new Runnable ( ) { public void run ( ) { JComponent focusComponent = component ; if ( focusComponent instanceof JSpinner ) focusComponent = ( ( JSpinner . DefaultEditor ) ( ( JSpinner ) component ) . getEditor ( ) ) . getTextField ( ) ; focusComponent . requestFocusInWindow ( ) ; } } ) ; dialog . setVisible ( true ) ; return dialog . okPressed ; }
  Tgt: prompt the user for a value
  Pred: set the value of the dialog window property
689 Code: Xml Element Decl <sep> { return new JAXBElement < Object > ( _AnyType_QNAME , Object . class , null , value ) ; }
  Tgt: create an instance of jaxb element
  Pred: create an instance of jaxb element
690 Code: contains <sep> { return indexOf ( s . toString ( ) ) > - 1 ; }
  Tgt: check if and only if this string contains the specified sequence of char values
  Pred: compare the specified key if it exists
691 Code: on Key Up <sep> { if ( keyCode == KeyEvent . KEYCODE_BACK && event . isTracking ( ) && ! event . isCanceled ( ) ) { onBackPressed ( ) ; return true ; } return false ; }
  Tgt: a key was released
  Pred: indicate if the specified key is in the priority queue
692 Code: get Icon From State <sep> { Image icon = null ; switch ( getState ( ) ) { case Button . STATE_DEFAULT : icon = getIcon ( ) ; break ; case Button . STATE_PRESSED : icon = getPressedIcon ( ) ; if ( icon == null ) { icon = getIcon ( ) ; } break ; case Button . STATE_ROLLOVER : icon = getRolloverIcon ( ) ; if ( icon == null ) { icon = getIcon ( ) ; } break ; } return icon ; }
  Tgt: return the icon for the button based on its current state
  Pred: return the selection of the given db type
693 Code: hash Code <sep> { int result = 31 * declaringClass . hashCode ( ) + methodName . hashCode ( ) ; result = 31 * result + Objects . hashCode ( fileName ) ; result = 31 * result + lineNumber ; return result ; }
  Tgt: return a hash code value for this stack trace element
  Pred: generate the hash code for the compact as an array of string
694 Code: get Input Map <sep> { return getInputMap ( condition , true ) ; }
  Tgt: return the input map that is used during condition
  Pred: this to be used to extract a map from the input map
695 Code: get Disk Cache Dir <sep> { final String cachePath = Environment . getExternalStorageState ( ) == Environment . MEDIA_MOUNTED || ! Utils . isExternalStorageRemovable ( ) ? Utils . getExternalCacheDir ( context ) . getPath ( ) : context . getCacheDir ( ) . getPath ( ) ; return new File ( cachePath + File . separator + uniqueName ) ; }
  Tgt: get a usable cache directory
  Pred: get the settings of the cache directory
696 Code: set Maximum <sep> { int oldMax = getModel ( ) . getMaximum ( ) ; getModel ( ) . setMaximum ( maximum ) ; firePropertyChange ( "maximum" , new Integer ( oldMax ) , new Integer ( maximum ) ) ; }
  Tgt: set the models maximum property
  Pred: set the state of the slider
697 Code: read Contents <sep> { StringBuffer result = new StringBuffer ( ) ; BufferedReader br = null ; try { br = new BufferedReader ( new FileReader ( source ) ) ; String line ; do { line = br . readLine ( ) ; if ( line != null ) { result . append ( line + "-" ) ; } } while ( line != null ) ; } finally { if ( br != null ) { br . close ( ) ; } } return result . toString ( ) . trim ( ) ; }
  Tgt: read entire content of a file into a string, stripping off any leading or trailing whitespace
  Pred: read for chunked file
698 Code: get Key <sep> { return new ECKey ( new BigInteger ( 1 , bytes ) , null , compressed ) ; }
  Tgt: return an ec key created from this encoded private key
  Pred: return a key for the specified key
699 Code: update <sep> { if ( b == null ) { throw new NullPointerException ( ) ; } if ( off < 0 || len < 0 || off > b . length - len ) { throw new ArrayIndexOutOfBoundsException ( ) ; } crc = updateBytes ( crc , b , off , len ) ; }
  Tgt: update the crc 32 checksum with the specified array of bytes
  Pred: update the checksum with the specified array of bytes
700 Code: is Sign <sep> { return SIGN_CHARS . contains ( character ) ; }
  Tgt: check whether a character is a sign character
  Pred: check if the method has the same code as a java
701 Code: put <sep> { if ( src == this ) { throw new IllegalArgumentException ( "src-==-this" ) ; } if ( src . remaining ( ) > remaining ( ) ) { throw new BufferOverflowException ( ) ; } short [ ] contents = new short [ src . remaining ( ) ] ; src . get ( contents ) ; put ( contents ) ; return this ; }
  Tgt: write all the remaining shorts of the src short buffer to thisbuffers current position, and increases both buffers position by the number of shorts copied
  Pred: relative put method and nbsp; and nbsp; and nbsp;
702 Code: set On Show Listener <sep> { if ( listener != null ) { mShowMessage = mListenersHandler . obtainMessage ( SHOW , listener ) ; } else { mShowMessage = null ; } }
  Tgt: set a listener to be invoked when the dialog is shown
  Pred: set a listener to be invoked when the dialog is canceled
703 Code: monitor <sep> { ArrayList < EventRecord > recs = new ArrayList < EventRecord > ( ) ; for ( String nic : nics ) { try { recs . add ( query ( nic ) ) ; } catch ( UnknownHostException e ) { e . printStackTrace ( ) ; } } EventRecord [ ] T = new EventRecord [ recs . size ( ) ] ; return recs . toArray ( T ) ; }
  Tgt: invoke query to do the parsing and handles parsing errors for each one of the ni cs specified in the configuration
  Pred: invoke query to do the parsing and handles parsing errors for each one of the disks specified in the configuration
704 Code: get Where Clause For Status Updates Table <sep> { mSb . setLength ( 0 ) ; mSb . append ( WHERE_CLAUSE_FOR_STATUS_UPDATES_TABLE ) ; mSb . append ( selection ) ; mSb . append ( ")" ) ; return mSb . toString ( ) ; }
  Tgt: build a where clause to select the rows to be updated in status updates table
  Pred: get the input code for the shift i id
705 Code: get Request URL Fragments <sep> { String uriWithoutFirstSlash = request . getRequestURI ( ) ; if ( uriWithoutFirstSlash . indexOf ( "/" ) == 0 ) { uriWithoutFirstSlash = uriWithoutFirstSlash . substring ( 1 , uriWithoutFirstSlash . length ( ) ) ; } List < String > fragments = Arrays . asList ( uriWithoutFirstSlash . split ( "/" ) ) ; return fragments ; }
  Tgt: get fragments of the speaking url
  Pred: get the http request url for the given base url
706 Code: make Actions <sep> { showIncomingRelationsAction = new Action ( null , IAction . AS_CHECK_BOX ) { @ Override public void run ( ) { setShowIncomingRelations ( isChecked ( ) ) ; } } ; showIncomingRelationsAction . setText ( "Show-Incoming-Relations" ) ; showIncomingRelationsAction . setDescription ( "Show-Incoming-Relations" ) ; showIncomingRelationsAction . setToolTipText ( "Show-Incoming-Relations" ) ; showIncomingRelationsAction . setImageDescriptor ( VisualisationImageManager . DESC_INCOMING_TRANSITIONS ) ; showIncomingRelationsAction . setChecked ( DEFAULT_SHOW_INCOMING_RELATIONS ) ; showOutgoingRelationsAction = new Action ( null , IAction . AS_CHECK_BOX ) { @ Override public void run ( ) { setShowOutgoingRelations ( isChecked ( ) ) ; } } ; showOutgoingRelationsAction . setText ( "Show-Outgoing-Relations" ) ; showOutgoingRelationsAction . setDescription ( "Show-Outgoing-Relations" ) ; showOutgoingRelationsAction . setToolTipText ( "Show-Outgoing-Relations" ) ; showOutgoingRelationsAction . setImageDescriptor ( VisualisationImageManager . DESC_OUTGOING_TRANSITIONS ) ; showOutgoingRelationsAction . setChecked ( DEFAULT_SHOW_OUTGOING_RELATIONS ) ; }
  Tgt: make the actions that can be called on this viewer
  Pred: construct a gui object
707 Code: build Unstyled <sep> { Notification n = new Notification ( ) ; n . when = mWhen ; n . icon = mSmallIcon ; n . iconLevel = mSmallIconLevel ; n . number = mNumber ; n . color = sanitizeColor ( ) ; setBuilderContentView ( n , makeContentView ( ) ) ; n . contentIntent = mContentIntent ; n . deleteIntent = mDeleteIntent ; n . fullScreenIntent = mFullScreenIntent ; n . tickerText = mTickerText ; n . tickerView = makeTickerView ( ) ; n . largeIcon = mLargeIcon ; n . sound = mSound ; n . audioStreamType = mAudioStreamType ; n . audioAttributes = mAudioAttributes ; n . vibrate = mVibrate ; n . ledARGB = mLedArgb ; n . ledOnMS = mLedOnMs ; n . ledOffMS = mLedOffMs ; n . defaults = mDefaults ; n . flags = mFlags ; setBuilderBigContentView ( n , makeBigContentView ( ) ) ; setBuilderHeadsUpContentView ( n , makeHeadsUpContentView ( ) ) ; if ( mLedOnMs != 0 || mLedOffMs != 0 ) { n . flags |= FLAG_SHOW_LIGHTS ; } if ( ( mDefaults & DEFAULT_LIGHTS ) != 0 ) { n . flags |= FLAG_SHOW_LIGHTS ; } n . category = mCategory ; n . mGroupKey = mGroupKey ; n . mSortKey = mSortKey ; n . priority = mPriority ; if ( mActions . size ( ) > 0 ) { n . actions = new Action [ mActions . size ( ) ] ; mActions . toArray ( n . actions ) ; } n . visibility = mVisibility ; if ( mPublicVersion != null ) { n . publicVersion = new Notification ( ) ; mPublicVersion . cloneInto ( n . publicVersion , true ) ; } return n ; }
  Tgt: apply the unstyled operations and return a new notification object
  Pred: build an sdk
708 Code: add Test Account <sep> { if ( account . mId > 0 ) { mCreatedAccountIds . add ( account . mId ) ; } }
  Tgt: add an account to our list of test accounts; well delete it automatically in tear down
  Pred: add a private setter setter to stack
709 Code: get Base Name <sep> { int index = name . lastIndexOf ( '.' ) ; return index == - 1 ? name : name . substring ( 0 , index ) ; }
  Tgt: return the base name of the given file
  Pred: return the category name corresponding to the vector of the given object
710 Code: load Class <sep> { try { ClassLoader cl = Thread . currentThread ( ) . getContextClassLoader ( ) ; if ( cl != null ) { return cl . loadClass ( className ) ; } } catch ( ClassNotFoundException e ) { if ( log . isDebugEnabled ( ) ) { log . debug ( e ) ; } } return loadClass2 ( className , callingClass ) ; }
  Tgt: load a class with a given name
  Pred: load class from file
711 Code: test Case12 <sep> { byte bBytes [ ] = { 15 , 48 , - 29 , 7 , 98 , - 1 , 39 , - 128 } ; int bSign = - 1 ; byte rBytes [ ] = { 0 } ; BigInteger aNumber = BigInteger . ZERO ; BigInteger bNumber = new BigInteger ( bSign , bBytes ) ; BigInteger result = aNumber . divide ( bNumber ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = result . toByteArray ( ) ; for ( int i = 0 ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( "incorrect-sign" , 0 , result . signum ( ) ) ; }
  Tgt: divide zero by a negative number
  Pred: create a test for a positive bit
712 Code: get Today <sep> { Date today = new Date ( ) ; SimpleDateFormat df = new SimpleDateFormat ( getDatePattern ( ) ) ; String todayAsString = df . format ( today ) ; Calendar cal = new GregorianCalendar ( ) ; cal . setTime ( convertStringToDate ( todayAsString ) ) ; return cal ; }
  Tgt: return the current date in the format: mm dd yyyy
  Pred: create a new exception that represents the entire state of a given pci
713 Code: set Value Is Adjusting <sep> { BoundedRangeModel m = getModel ( ) ; boolean oldValue = m . getValueIsAdjusting ( ) ; m . setValueIsAdjusting ( b ) ; if ( ( oldValue != b ) && ( accessibleContext != null ) ) { accessibleContext . firePropertyChange ( AccessibleContext . ACCESSIBLE_STATE_PROPERTY , ( ( oldValue ) ? AccessibleState . BUSY : null ) , ( ( b ) ? AccessibleState . BUSY : null ) ) ; } }
  Tgt: set the models value is adjusting property
  Pred: set the value of a complex method, be shown
714 Code: integrate <sep> { FileEntry fent ; Enumeration en = fents . elements ( ) ; while ( en . hasMoreElements ( ) ) { fent = ( FileEntry ) en . nextElement ( ) ; integrate ( env , fent . getDepotPath ( ) + "#" + fent . getHeadRev ( ) , branch , sb , c ) ; } return c ; }
  Tgt: integrate a set of files using the named branch
  Pred: requst the string to a total num
715 Code: init View <sep> { p . setFakeBoldText ( false ) ; p . setAntiAlias ( true ) ; p . setTextSize ( MINI_DAY_NUMBER_TEXT_SIZE ) ; p . setStyle ( Style . FILL ) ; mMonthNumPaint = new Paint ( ) ; mMonthNumPaint . setFakeBoldText ( true ) ; mMonthNumPaint . setAntiAlias ( true ) ; mMonthNumPaint . setTextSize ( MINI_DAY_NUMBER_TEXT_SIZE ) ; mMonthNumPaint . setColor ( mFocusMonthColor ) ; mMonthNumPaint . setStyle ( Style . FILL ) ; mMonthNumPaint . setTextAlign ( Align . CENTER ) ; }
  Tgt: set up the text and style properties for painting
  Pred: initialize the view
716 Code: get Elements <sep> { if ( inputElement instanceof Object [ ] ) { List < ViewPrototype > result = new ArrayList < ViewPrototype > ( ) ; for ( Object next : ( Object [ ] ) inputElement ) { if ( next instanceof String ) { String diagramCategory = ( String ) next ; result . addAll ( getPrototypes ( diagramCategory ) ) ; } } Collections . sort ( result , new ViewPrototype . Comp ( ) ) ; return result . toArray ( new Object [ result . size ( ) ] ) ; } if ( inputElement instanceof String ) { String diagramCategory = ( String ) inputElement ; List < ViewPrototype > result = getPrototypes ( diagramCategory ) ; return result . toArray ( new Object [ result . size ( ) ] ) ; } return null ; }
  Tgt: get the elements
  Pred: return an array of elements that can be used
717 Code: write Q Name <sep> { java . lang . String namespaceURI = qname . getNamespaceURI ( ) ; if ( namespaceURI != null ) { java . lang . String prefix = xmlWriter . getPrefix ( namespaceURI ) ; if ( prefix == null ) { prefix = generatePrefix ( namespaceURI ) ; xmlWriter . writeNamespace ( prefix , namespaceURI ) ; xmlWriter . setPrefix ( prefix , namespaceURI ) ; } if ( prefix . trim ( ) . length ( ) > 0 ) { xmlWriter . writeCharacters ( prefix + ":" + org . apache . axis2 . databinding . utils . ConverterUtil . convertToString ( qname ) ) ; } else { xmlWriter . writeCharacters ( org . apache . axis2 . databinding . utils . ConverterUtil . convertToString ( qname ) ) ; } } else { xmlWriter . writeCharacters ( org . apache . axis2 . databinding . utils . ConverterUtil . convertToString ( qname ) ) ; } }
  Tgt: handle qnames
  Pred: handle qnames
718 Code: set Hidden Layers <sep> { String tmp = "" ; StringTokenizer tok = new StringTokenizer ( h , "," ) ; if ( tok . countTokens ( ) == 0 ) { return ; } double dval ; int val ; String c ; boolean first = true ; while ( tok . hasMoreTokens ( ) ) { c = tok . nextToken ( ) . trim ( ) ; if ( c . equals ( "a" ) || c . equals ( "i" ) || c . equals ( "o" ) || c . equals ( "t" ) ) { tmp += c ; } else { dval = Double . valueOf ( c ) . doubleValue ( ) ; val = ( int ) dval ; if ( ( val == dval && ( val != 0 || ( tok . countTokens ( ) == 0 && first ) ) && val >= 0 ) ) { tmp += val ; } else { return ; } } first = false ; if ( tok . hasMoreTokens ( ) ) { tmp += ",-" ; } } m_hiddenLayers = tmp ; }
  Tgt: this will set what the hidden layers are made up of when auto build is enabled
  Pred: set the recipient level id
719 Code: get Boolean <sep> { Object o = get ( index ) ; if ( o . equals ( Boolean . FALSE ) || ( o instanceof String && ( ( String ) o ) . equalsIgnoreCase ( "false" ) ) ) { return false ; } else if ( o . equals ( Boolean . TRUE ) || ( o instanceof String && ( ( String ) o ) . equalsIgnoreCase ( "true" ) ) ) { return true ; } throw new JSONException ( "JSONArray[" + index + "]-is-not-a-Boolean." ) ; }
  Tgt: get the boolean value associated with an index
  Pred: get the boolean value associated with an index
720 Code: get Touchables <sep> { ArrayList < View > result = new ArrayList < View > ( ) ; addTouchables ( result ) ; return result ; }
  Tgt: find and return all touchable views that are descendants of this view, possibly including this view if it is touchable itself
  Pred: return a collection of strings as a vector of strings
721 Code: run Many Commands <sep> { Reader input ; if ( "-" . equals ( script ) ) { input = new InputStreamReader ( System . in ) ; } else { input = new FileReader ( script ) ; } StreamTokenizer tokenizer = new StreamTokenizer ( input ) ; tokenizer . eolIsSignificant ( true ) ; tokenizer . ordinaryChar ( '-' ) ; tokenizer . wordChars ( '-' , '-' ) ; tokenizer . ordinaryChars ( '0' , '9' ) ; tokenizer . wordChars ( '0' , '9' ) ; tokenizer . ordinaryChar ( '.' ) ; tokenizer . wordChars ( '.' , '.' ) ; tokenizer . ordinaryChar ( '@' ) ; tokenizer . wordChars ( '@' , '@' ) ; int status = 0 ; List < String > tokens = new ArrayList < String > ( ) ; while ( StreamTokenizer . TT_EOF != tokenizer . nextToken ( ) ) { if ( StreamTokenizer . TT_EOL == tokenizer . ttype ) { if ( tokens . size ( ) > 0 ) { status = ScriptLauncher . runOneCommand ( tokens . toArray ( new String [ tokens . size ( ) ] ) ) ; if ( status > 0 ) { break ; } tokens . clear ( ) ; } } else { tokens . add ( tokenizer . sval ) ; } } return status ; }
  Tgt: read a file of command lines and execute each in turn
  Pred: give a worker check based on test
722 Code: pt Seg Dist <sep> { return ptSegDist ( getX1 ( ) , getY1 ( ) , getX2 ( ) , getY2 ( ) , pt . getX ( ) , pt . getY ( ) ) ; }
  Tgt: return the distance from a Point2D to this line segment
  Pred: return the square of the distance from a Point2D to this line segment
723 Code: contains <sep> { return ( properties . containsKey ( name ) || defaultProperties . containsKey ( name ) ) ; }
  Tgt: return whether the given property is known to this preference object, either by having an explicit setting or by having a default setting
  Pred: determine if the given account is a child of this account
724 Code: fire Property Change <sep> { if ( oldValue != newValue ) { firePropertyChange ( propertyName , Integer . valueOf ( oldValue ) , Integer . valueOf ( newValue ) ) ; } }
  Tgt: report an integer bound property update to listeners that have been registered to track updates of all properties or a property with the specified name
  Pred: fire a bound property update to all registered listeners
725 Code: get Selection <sep> { return button . getSelection ( ) ; }
  Tgt: return wether or not a working set filter should be used
  Pred: return selection string for current internal state
726 Code: prepad <sep> { int needed = length - s . length ( ) ; if ( needed <= 0 ) { return s ; } char padding [ ] = new char [ needed ] ; java . util . Arrays . fill ( padding , c ) ; StringBuffer sb = new StringBuffer ( length ) ; sb . append ( padding ) ; sb . append ( s ) ; return sb . toString ( ) ; }
  Tgt: pre pend the given character to the string until the result is the desired length
  Pred: return a vector of the input
727 Code: map <sep> { this . output = output ; this . reporter = reporter ; prefixString = value ; StringTokenizer itr = new StringTokenizer ( prefixString . toString ( ) , "," ) ; int [ ] prefix = new int [ depth ] ; int idx = 0 ; while ( itr . hasMoreTokens ( ) ) { String num = itr . nextToken ( ) ; prefix [ idx ++ ] = Integer . parseInt ( num ) ; } pent . solve ( prefix ) ; }
  Tgt: break the prefix string into moves
  Pred: fully keys from file
728 Code: find Column <sep> { Integer index ; if ( ! this . hasBuiltIndexMapping ) { buildIndexMapping ( ) ; } index = ( Integer ) this . columnNameToIndex . get ( columnName ) ; if ( index == null ) { index = ( Integer ) this . fullColumnNameToIndex . get ( columnName ) ; } if ( index != null ) { return index . intValue ( ) + 1 ; } for ( int i = 0 ; i < this . fields . length ; i ++ ) { if ( this . fields [ i ] . getName ( ) . equalsIgnoreCase ( columnName ) ) { return i + 1 ; } else if ( this . fields [ i ] . getFullName ( ) . equalsIgnoreCase ( columnName ) ) { return i + 1 ; } } throw SQLError . createSQLException ( Messages . getString ( "ResultSet.Column____112" ) + columnName + Messages . getString ( "ResultSet.___not_found._113" ) , SQLError . SQL_STATE_COLUMN_NOT_FOUND ) ; }
  Tgt: map a result set column name to a result set column index
  Pred: check the column value in the column associated with the key
729 Code: show Dist For <sep> { if ( cached || approx ) { if ( ! qmap . containsKey ( var ) ) throw new BayesError ( "variable-'" + var + "'-was-not-queried" ) ; qmap . get ( var ) . print ( ) ; } else System . out . printf ( "no-solution-or-approximation-cached" ) ; }
  Tgt: show distribution for this variable, given other query variables and evidence
  Pred: show a la fatal line
730 Code: is Zero <sep> { return Math . abs ( value ) <= FLOAT_ROUNDING_ERROR ; }
  Tgt: check if the value is zero
  Pred: check if the symbol should be ignored
731 Code: get Group I D <sep> { if ( groupID == null ) { groupID = new ArrayList < IdentifierType > ( ) ; } return this . groupID ; }
  Tgt: set of alternative identifications of this operation parameter group
  Pred: get the value of the groups property
732 Code: read Object <sep> { s . defaultReadObject ( ) ; readHolds = new ThreadLocalHoldCounter ( ) ; setState ( 0 ) ; }
  Tgt: reconstitute this lock instance from a stream
  Pred: read object from object stream
733 Code: remove First <sep> { Object first = header . next . element ; remove ( header . next ) ; return first ; }
  Tgt: remove and returns the first element from this list
  Pred: remove an object from the front of the queue, blocking until the queue is empty
734 Code: to Stroke <sep> { BasicStroke result = null ; if ( style != null ) { float lineWidth = 2f ; float dash [ ] = { 5.0f } ; float dot [ ] = { lineWidth } ; if ( style . equalsIgnoreCase ( STYLE_LINE ) ) { result = new BasicStroke ( lineWidth ) ; } else if ( style . equalsIgnoreCase ( STYLE_DASH ) ) { result = new BasicStroke ( lineWidth , BasicStroke . CAP_BUTT , BasicStroke . JOIN_MITER , 10.0f , dash , 0.0f ) ; } else if ( style . equalsIgnoreCase ( STYLE_DOT ) ) { result = new BasicStroke ( lineWidth , BasicStroke . CAP_BUTT , BasicStroke . JOIN_MITER , 2.0f , dot , 0.0f ) ; } } return result ; }
  Tgt: convert style string to stroke object
  Pred: return a copy of this rectangle with the specified orientation
735 Code: get C_ U O M_ I D <sep> { Integer ii = ( Integer ) get_Value ( "C_UOM_ID" ) ; if ( ii == null ) return 0 ; return ii . intValue ( ) ; }
  Tgt: get uom
  Pred: return media uri
736 Code: find Next Undeclared Attribute <sep> { if ( attributeIterator != null ) { while ( attributeIterator . hasNext ( ) ) { Entry < QName , Attribute > entry = attributeIterator . next ( ) ; Attribute attribute = entry . getValue ( ) ; if ( isUndeclared ( attribute . getAttributeKey ( ) ) ) { return entry . getValue ( ) ; } } attributeIterator = null ; } mode = metadataIterator != null && metadataIterator . hasNext ( ) ? Mode . DECLARED : Mode . DONE ; return null ; }
  Tgt: find the next valid undeclared attribute in the map
  Pred: get the next child to try
737 Code: get Children Query <sep> { if ( childrenQuery == null ) { childrenQuery = new ArrayList < ClassificationNodeQueryType > ( ) ; } return this . childrenQuery ; }
  Tgt: get the value of the children query property
  Pred: get the value of the unrecognized query property
738 Code: allocate Address Async <sep> { return executorService . submit ( new Callable < AllocateAddressResult > ( ) { public AllocateAddressResult call ( ) throws Exception { return allocateAddress ( allocateAddressRequest ) ; } } ) ; }
  Tgt: acquire an elastic ip address
  Pred: convert an swt string into an snmp address
739 Code: count <sep> { MidiMessage message = event . getMessage ( ) ; if ( message instanceof ShortMessage ) { int command = ( ( ShortMessage ) message ) . getCommand ( ) ; switch ( command ) { case ShortMessage . NOTE_ON : noteOn ++ ; break ; case ShortMessage . NOTE_OFF : noteOff ++ ; break ; default : other ++ ; } } else { other ++ ; } }
  Tgt: perform the counting
  Pred: return the number of elements in the specified collection
740 Code: get Constraint Value <sep> { return getConstraintType ( ) == XSConstants . VC_NONE ? null : fDefault . stringValue ( ) ; }
  Tgt: a value constraint: the actual value
  Pred: return the value of the duration field with the specified value
741 Code: logout <sep> { if ( subject . isReadOnly ( ) ) { throw new LoginException ( "Subject-is-ReadOnly" ) ; } Set principals = subject . getPrincipals ( ) ; if ( principals . contains ( userPrincipal ) ) { principals . remove ( userPrincipal ) ; } if ( principals . contains ( userSID ) ) { principals . remove ( userSID ) ; } if ( principals . contains ( userDomain ) ) { principals . remove ( userDomain ) ; } if ( principals . contains ( domainSID ) ) { principals . remove ( domainSID ) ; } if ( principals . contains ( primaryGroup ) ) { principals . remove ( primaryGroup ) ; } for ( int i = 0 ; groups != null && i < groups . length ; i ++ ) { if ( principals . contains ( groups [ i ] ) ) { principals . remove ( groups [ i ] ) ; } } Set pubCreds = subject . getPublicCredentials ( ) ; if ( pubCreds . contains ( iToken ) ) { pubCreds . remove ( iToken ) ; } succeeded = false ; commitSucceeded = false ; userPrincipal = null ; userDomain = null ; userSID = null ; domainSID = null ; groups = null ; primaryGroup = null ; iToken = null ; ntSystem = null ; if ( debug ) { System . out . println ( "-[NTLoginModule]-" + "completed-logout-processing" ) ; } return true ; }
  Tgt: logout the user
  Pred: emit the result as necessary
742 Code: set Accessible Name <sep> { String oldName = accessibleName ; accessibleName = s ; firePropertyChange ( ACCESSIBLE_NAME_PROPERTY , oldName , accessibleName ) ; }
  Tgt: set the localized accessible name of this object
  Pred: set the name of the object
743 Code: get Keyword Values For Locale <sep> { String baseLoc = locale . getBaseName ( ) ; LinkedList < String > values = new LinkedList < String > ( ) ; UResourceBundle bundle = UResourceBundle . getBundleInstance ( ICUResourceBundle . ICU_BASE_NAME + "/coll" , baseLoc ) ; String defcoll = null ; while ( bundle != null ) { UResourceBundle collations = bundle . get ( "collations" ) ; Enumeration < String > collEnum = collations . getKeys ( ) ; while ( collEnum . hasMoreElements ( ) ) { String collkey = collEnum . nextElement ( ) ; if ( collkey . equals ( "default" ) ) { if ( defcoll == null ) { defcoll = collations . getString ( "default" ) ; } } else if ( ! values . contains ( collkey ) ) { values . add ( collkey ) ; } } bundle = ( ( ICUResourceBundle ) bundle ) . getParent ( ) ; } Iterator < String > itr = values . iterator ( ) ; String [ ] result = new String [ values . size ( ) ] ; result [ 0 ] = defcoll ; int idx = 1 ; while ( itr . hasNext ( ) ) { String collKey = itr . next ( ) ; if ( ! collKey . equals ( defcoll ) ) { result [ idx ++ ] = collKey ; } } return result ; }
  Tgt: give a key and a locale, returns an array of string values in a preferredorder that would make a difference
  Pred: return the frame that should be used when obtaining translations
744 Code: get Link By Port Id <sep> { List < Link > links = daos . getLinkDAO ( ) . getAll ( ) ; for ( Link l : links ) { if ( l . getEndPort ( ) . getBodID ( ) . equals ( portId ) ) return l ; } return null ; }
  Tgt: return first link that contains port id either as source or dest
  Pred: get the multicast object id of the id on the web
745 Code: build Label For Group Authority Perm <sep> { StringBuilder buf = new StringBuilder ( 100 ) ; buf . append ( authority . substring ( PermissionService . GROUP_PREFIX . length ( ) ) ) . append ( "-(" ) . append ( Application . getMessage ( FacesContext . getCurrentInstance ( ) , role ) ) . append ( ")" ) ; return buf . toString ( ) ; }
  Tgt: helper to build a label for a group authority of the form: groupname
  Pred: build a new key,value bundle for the specified a label
746 Code: set Extra Fields <sep> { extraFields = new HashSet < String > ( ) ; if ( fields != null ) { extraFields . addAll ( fields ) ; } }
  Tgt: set the extra fields to request for the retrieved graph objects
  Pred: set the extra fields to request for the retrieved graph objects
747 Code: rsp Apn List <sep> { Collection < ApnContext > retVal = ( Collection < ApnContext > ) response . obj ; if ( retVal == null ) retVal = new ArrayList < ApnContext > ( ) ; return retVal ; }
  Tgt: retrieve collection of apn context from the response message
  Pred: unpack the given list of dealer selectos
748 Code: emit Field <sep> { return emitField ( type , name , modifiers , null ) ; }
  Tgt: emit a field declaration
  Pred: add a function for the current game
749 Code: print Access <sep> { for ( int j = 0 ; j < accflags . length ; j ++ ) { out . print ( accflags [ j ] + "-" ) ; } }
  Tgt: print access of class, field or method
  Pred: print the list of players
750 Code: set Output <sep> { if ( encoding == null ) { encoding = "UTF8" ; } java . io . Writer writer = new OutputStreamWriter ( stream , encoding ) ; fOut = new PrintWriter ( writer ) ; }
  Tgt: set the output stream for printing
  Pred: write the output to the output stream
751 Code: set Merge Value Range <sep> { m_MergeRange . setRanges ( range ) ; }
  Tgt: set range of the merge values used
  Pred: set the value of items to be displayed
752 Code: is Always On Top Supported <sep> { return Toolkit . getDefaultToolkit ( ) . isAlwaysOnTopSupported ( ) ; }
  Tgt: return whether the always on top mode is supported for this window
  Pred: check if the executor mechanism is supported
753 Code: get <sep> { for ( int i = namesAndValues . size ( ) - 2 ; i >= 0 ; i -= 2 ) { if ( fieldName . equalsIgnoreCase ( namesAndValues . get ( i ) ) ) { return namesAndValues . get ( i + 1 ) ; } } return null ; }
  Tgt: return the last value corresponding to the specified field, or null
  Pred: return the element value for the given key name
754 Code: get Dependences <sep> { ArrayList < Arc > arcSet = new ArrayList < Arc > ( ) ; int depArcs_size = depArcs . size ( ) ; for ( int i = 0 ; i < depArcs_size ; i ++ ) { Arc arc = depArcs . get ( i ) ; if ( arc . getSourceStatement ( ) == stmt1 ) { if ( arc . getSinkStatement ( ) == stmt2 ) { arcSet . add ( arc ) ; } } else if ( arc . getSourceStatement ( ) == stmt2 ) { if ( arc . getSinkStatement ( ) == stmt1 ) { arcSet . add ( arc ) ; } } } return arcSet ; }
  Tgt: obtain all possible dependence information between a pair of statements in a given loop
  Pred: return a list of plugins for the blog
755 Code: get Items <sep> { synchronized ( items ) { return Collections . unmodifiableList ( new ArrayList < Item > ( items ) ) . iterator ( ) ; } }
  Tgt: return an iterator for the items returned from a search
  Pred: return the discovered items for the specified node
756 Code: write Duration Field <sep> { if ( value instanceof String ) { m_writer . writeNameValuePair ( fieldName + "_text" , ( String ) value ) ; } else { Duration val = ( Duration ) value ; if ( val . getDuration ( ) != 0 ) { Duration minutes = val . convertUnits ( TimeUnit . MINUTES , m_projectFile . getProjectProperties ( ) ) ; long seconds = ( long ) ( minutes . getDuration ( ) * 60.0 ) ; m_writer . writeNameValuePair ( fieldName , seconds ) ; } } }
  Tgt: write a duration field to the json file
  Pred: write the upper data log out
757 Code: translate Key <sep> { return spiImpl . engineTranslateKey ( key ) ; }
  Tgt: translate the given key into a key from this key factory
  Pred: visit a key value
758 Code: insert Jpos Entries In Doc <sep> { while ( entries . hasMoreElements ( ) ) { JposEntry jposEntry = ( JposEntry ) entries . nextElement ( ) ; if ( JposEntryUtility . isValidJposEntry ( jposEntry ) ) { doc . getDocumentElement ( ) . appendChild ( doc . createTextNode ( "-" + "-" ) ) ; Element jposEntryElement = doc . createElement ( "JposEntry" ) ; Attr logicalNameAttr = doc . createAttribute ( "logicalName" ) ; logicalNameAttr . setValue ( ( String ) jposEntry . getPropertyValue ( "logicalName" ) ) ; jposEntryElement . setAttributeNode ( logicalNameAttr ) ; jposEntryElement . appendChild ( doc . createTextNode ( "-" ) ) ; insertJposEntryInDoc ( doc , jposEntryElement , jposEntry ) ; } } }
  Tgt: insert an enumeration of objects in the xml document
  Pred: forwards the hole in a dom chain
759 Code: load Without Events <sep> { if ( maxCapacity < chute . size ( ) + pops . length ) throw new SimulationException ( "Capacity-exceeded-by-attempt-to-load" ) ; for ( PopCan pop : pops ) { chute . add ( pop ) ; } }
  Tgt: permit the delivery chute to be loaded with items without causing events to be announced
  Pred: load image to the ranker list
760 Code: Xml Element Decl <sep> { return new JAXBElement < ViewRefreshModeEnumType > ( _ViewRefreshMode_QNAME , ViewRefreshModeEnumType . class , null , value ) ; }
  Tgt: create an instance of jaxb element
  Pred: create an instance of jaxb element
761 Code: apply <sep> { CellFormatResult result = apply ( value ) ; label . setText ( result . text ) ; if ( result . textColor != null ) { label . setForeground ( result . textColor ) ; } return result ; }
  Tgt: use the result of applying this format to the value, setting the text and color of a label before returning the result
  Pred: apply the body with the specified number of arguments
762 Code: wait For Background Save Job <sep> { List models = new ArrayList ( ) ; models . add ( model ) ; return waitForBackgroundSaveJobs ( models ) ; }
  Tgt: wait for the background save job of the given saveable to complete
  Pred: wait for the background chart to be shown
763 Code: preferred Layout Size <sep> { Dimension dim = new Dimension ( ) ; for ( int i = 0 ; i < target . countComponents ( ) ; i ++ ) { Component comp = target . getComponent ( i ) ; if ( comp . isVisible ( ) ) { Dimension d = comp . preferredSize ( ) ; dim . width += d . width + hgap ; dim . height = Math . max ( dim . height , d . height ) ; } } Insets insets = target . insets ( ) ; dim . width += insets . left + insets . right ; dim . height += insets . top + insets . bottom ; return dim ; }
  Tgt: return the preferred dimensions for this layout given the components in the specified target container
  Pred: this method calculates the preferred layout size for the given container
764 Code: add Property Change Listener <sep> { pceListeners . addPropertyChangeListener ( listener ) ; }
  Tgt: use to keep track of addable complib changes
  Pred: add a property change listener to this component
765 Code: Xml Element Decl <sep> { return new JAXBElement < String > ( _SessionsWrapperWebappFileName_QNAME , String . class , SessionsWrapper . class , value ) ; }
  Tgt: create an instance of jaxb element
  Pred: create an instance of jaxb element
766 Code: parse Format Token <sep> { this . startIndex = offset ; this . i = offset ; return parseArgumentIndexAndFlags ( new FormatToken ( ) ) ; }
  Tgt: return a format token representing the format specifier starting at offset
  Pred: parse a simple hashcode
767 Code: add Fill Components <sep> { Dimension filler = new Dimension ( 10 , 10 ) ; boolean filled_cell_11 = false ; CellConstraints cc = new CellConstraints ( ) ; if ( cols . length > 0 && rows . length > 0 ) { if ( cols [ 0 ] == 1 && rows [ 0 ] == 1 ) { panel . add ( Box . createRigidArea ( filler ) , cc . xy ( 1 , 1 ) ) ; filled_cell_11 = true ; } } for ( int index = 0 ; index < cols . length ; index ++ ) { if ( cols [ index ] == 1 && filled_cell_11 ) { continue ; } panel . add ( Box . createRigidArea ( filler ) , cc . xy ( cols [ index ] , 1 ) ) ; } for ( int index = 0 ; index < rows . length ; index ++ ) { if ( rows [ index ] == 1 && filled_cell_11 ) { continue ; } panel . add ( Box . createRigidArea ( filler ) , cc . xy ( 1 , rows [ index ] ) ) ; } }
  Tgt: add fill components to empty cells in the first row and first column of the grid
  Pred: add the state of this graphics
768 Code: read Char <sep> { String cache ; try { if ( inputStream != null && ( cache = inputStream . readLine ( ) ) != null ) { try { if ( cache . length ( ) > 1 ) { logger . log ( Level . INFO , "The-input-'" + cache + "'-has-more-than-one-character,-using-only-first-character-'" + cache . charAt ( 0 ) + "'" ) ; } return cache . charAt ( 0 ) ; } catch ( IndexOutOfBoundsException e ) { logger . log ( Level . SEVERE , "The-user-input-is-empty." ) ; } } } catch ( IOException e ) { e . printStackTrace ( ) ; } logger . log ( Level . SEVERE , "Error-while-reading-the-user-input,-returning-null." ) ; return null ; }
  Tgt: read a character value
  Pred: read in the byte array
769 Code: get Device Bytes <sep> { java . lang . Object ref = device_ ; if ( ref instanceof String ) { com . google . protobuf . ByteString b = com . google . protobuf . ByteString . copyFromUtf8 ( ( java . lang . String ) ref ) ; device_ = b ; return b ; } else { return ( com . google . protobuf . ByteString ) ref ; } }
  Tgt: optional string device = 3; re unknown, mobile, tablet or desktop
  Pred: optional string random device = 1; re always returns the result of the read stream
770 Code: write To Crt <sep> { crt += "" + line + System . getProperty ( "line.separator" , "-" ) ; }
  Tgt: this method stores one more line to the crt memory of the application
  Pred: write a to out
771 Code: await <sep> { if ( unit == null ) throw new NullPointerException ( ) ; long nanosTimeout = unit . toNanos ( time ) ; if ( Thread . interrupted ( ) ) throw new InterruptedException ( ) ; Node node = addConditionWaiter ( ) ; int savedState = fullyRelease ( node ) ; long lastTime = System . nanoTime ( ) ; boolean timedout = false ; int interruptMode = 0 ; while ( ! isOnSyncQueue ( node ) ) { if ( nanosTimeout <= 0L ) { timedout = transferAfterCancelledWait ( node ) ; break ; } LockSupport . parkNanos ( this , nanosTimeout ) ; if ( ( interruptMode = checkInterruptWhileWaiting ( node ) ) != 0 ) break ; long now = System . nanoTime ( ) ; nanosTimeout -= now - lastTime ; lastTime = now ; } if ( acquireQueued ( node , savedState ) && interruptMode != THROW_IE ) interruptMode = REINTERRUPT ; if ( node . nextWaiter != null ) unlinkCancelledWaiters ( ) ; if ( interruptMode != 0 ) reportInterruptAfterWait ( interruptMode ) ; return ! timedout ; }
  Tgt: implement timed condition wait
  Pred: wait for the text to wait until the latch has counted down to zero, unless the thread is plain threadinterrupt interrupted, or the specified waiting time elapses
772 Code: map Available Properties <sep> { resourcesNotLoaded . clear ( ) ; Map < String , Properties > propertiesMap = new HashMap < String , Properties > ( ) ; Map < String , URL > map = getResourcesMap ( uri ) ; for ( Map . Entry < String , URL > entry : map . entrySet ( ) ) { String string = entry . getKey ( ) ; URL url = entry . getValue ( ) ; try { Properties properties = loadProperties ( url ) ; propertiesMap . put ( string , properties ) ; } catch ( Exception notAvailable ) { resourcesNotLoaded . add ( url . toExternalForm ( ) ) ; } } return propertiesMap ; }
  Tgt: find the corresponding resources and reads them in as a properties files any url that cannot be read in as a properties file will be added to the resources not loaded collection
  Pred: return an object object of the properties properties property
773 Code: reset Timer <sep> { TimerTask timerTask = new TimerTask ( ) { @ Override public void run ( ) { flushEventBatch ( eventBatch ) ; } } ; if ( timer != null ) { timer . cancel ( ) ; timer . purge ( ) ; } timer = new Timer ( ) ; timer . schedule ( timerTask , 10000 ) ; }
  Tgt: timer to handle the 10 second event batch lifetime
  Pred: reset the object
774 Code: get Medium Weight Popup Cache <sep> { List cache = ( List ) SwingUtilities . appContextGet ( mediumWeightPopupCacheKey ) ; if ( cache == null ) { cache = new ArrayList ( ) ; SwingUtilities . appContextPut ( mediumWeightPopupCacheKey , cache ) ; } return cache ; }
  Tgt: return the cache to use for medium weight popups
  Pred: get the edge to be left
775 Code: digits <sep> { long hi = 1L << ( digits * 4 ) ; return Long . toHexString ( hi | ( val & ( hi - 1 ) ) ) . substring ( 1 ) ; }
  Tgt: return val represented by the specified number of hex digits
  Pred: compute the refererent
776 Code: encode <sep> { if ( bufferedImage == null ) { throw new IllegalArgumentException ( "Null-'image'-argument." ) ; } if ( outputStream == null ) { throw new IllegalArgumentException ( "Null-'outputStream'-argument." ) ; } Iterator iterator = ImageIO . getImageWritersByFormatName ( "jpeg" ) ; ImageWriter writer = ( ImageWriter ) iterator . next ( ) ; ImageWriteParam p = writer . getDefaultWriteParam ( ) ; p . setCompressionMode ( ImageWriteParam . MODE_EXPLICIT ) ; p . setCompressionQuality ( this . quality ) ; ImageOutputStream ios = ImageIO . createImageOutputStream ( outputStream ) ; writer . setOutput ( ios ) ; writer . write ( null , new IIOImage ( bufferedImage , null , null ) , p ) ; ios . flush ( ) ; writer . dispose ( ) ; ios . close ( ) ; }
  Tgt: encode an image in jpeg format and writes it to an output stream
  Pred: encode an image in jpeg format and writes it to out
777 Code: get Generator Upper Bounds <sep> { int len = upperBounds . length ; double [ ] out = new double [ len ] ; System . arraycopy ( upperBounds , 0 , out , 0 , len ) ; return out ; }
  Tgt: return a fresh copy of the array of upper bounds of the subintervals of used in generating data from the empirical distribution
  Pred: return the bounding rectangle of the framing rectangle
778 Code: get Screen Size <sep> { if ( isWindows ( ) ) return Toolkit . getDefaultToolkit ( ) . getScreenSize ( ) ; if ( GraphicsEnvironment . isHeadless ( ) ) return new Dimension ( 0 , 0 ) ; GraphicsEnvironment ge = GraphicsEnvironment . getLocalGraphicsEnvironment ( ) ; GraphicsDevice [ ] gd = ge . getScreenDevices ( ) ; GraphicsConfiguration [ ] gc = gd [ 0 ] . getConfigurations ( ) ; Rectangle bounds = gc [ 0 ] . getBounds ( ) ; if ( ( bounds . x == 0 && bounds . y == 0 ) || ( IJ . isLinux ( ) && gc . length > 1 ) ) return new Dimension ( bounds . width , bounds . height ) ; else return Toolkit . getDefaultToolkit ( ) . getScreenSize ( ) ; }
  Tgt: return the size, in pixels, of the primary display
  Pred: return the number of contributions in the current clip
779 Code: get Nth In Edge <sep> { if ( n >= inEdges . size ( ) ) throw new IllegalArgumentException ( "Incoming-edge-" + n + "-does-not-exist-for-basic-block-" + toString ( ) ) ; return inEdges . elementAt ( n ) ; }
  Tgt: get nth incoming edge
  Pred: return the strength, and intensity, of the specified look
780 Code: visit <sep> { argu = new TypeInfo ( n . f1 . toString ( ) ) ; typeNames . add ( n . f1 . toString ( ) ) ; argu . addMethodName ( "main" ) ; argu . setMethodNumOfArgu ( "main" , 1 ) ; types . put ( n . f1 . toString ( ) , argu ) ; return 0 ; }
  Tgt: f0 class f1 f2 f3 public f4 static f5 void f6 main f7 f13 f16
  Pred: create the regular expression
781 Code: get Plot Type <sep> { return localizationResources . getString ( "Meter_Plot" ) ; }
  Tgt: return a short string describing the type of plot
  Pred: get the sql type of the specified type
782 Code: print <sep> { PrintWriter writer = logWriter ; if ( writer != null ) { writer . println ( "[" + serverId + "]:-" + msg ) ; writer . flush ( ) ; } }
  Tgt: print the specified message, s, formatted to identify that the print operation is against this server instance
  Pred: print the string
783 Code: start <sep> { shutdown = false ; checkingThread = new Thread ( "SocketSendingTracker" ) { @ Override public void run ( ) { while ( ! shutdown ) { checkHealth ( ) ; synchronized ( this ) { try { wait ( 10000 ) ; } catch ( InterruptedException e ) { } } } } } ; checkingThread . setDaemon ( true ) ; checkingThread . start ( ) ; }
  Tgt: start up the daemon thread that will check for the health of the sockets that are currently sending data
  Pred: start the event
784 Code: read Object <sep> { stream . defaultReadObject ( ) ; if ( serialVersionOnStream < 1 ) { if ( startDayOfWeek == 0 ) { startDayOfWeek = Calendar . SUNDAY ; } if ( endDayOfWeek == 0 ) { endDayOfWeek = Calendar . SUNDAY ; } startMode = endMode = DOW_IN_MONTH_MODE ; dstSavings = millisPerHour ; } else { int length = stream . readInt ( ) ; byte [ ] rules = new byte [ length ] ; stream . readFully ( rules ) ; unpackRules ( rules ) ; } if ( serialVersionOnStream >= 2 ) { int [ ] times = ( int [ ] ) stream . readObject ( ) ; unpackTimes ( times ) ; } serialVersionOnStream = currentSerialVersion ; }
  Tgt: reconstitute this object from a stream i
  Pred: read a object from a file input stream
785 Code: set Defaults <sep> { setHorizontalTextPosition ( SwingConstants . CENTER ) ; setVerticalTextPosition ( SwingConstants . BOTTOM ) ; setBorderPainted ( false ) ; setBorder ( BorderFactory . createEtchedBorder ( EtchedBorder . LOWERED ) ) ; }
  Tgt: set the useful default settings for an icon button
  Pred: set the collection of job
786 Code: count Categories <sep> { return mCategories != null ? mCategories . size ( ) : 0 ; }
  Tgt: return the number of categories in the filter
  Pred: return the discovered allowed mode for the given node
787 Code: max <sep> { return this . compareTo ( value ) == 1 ? this : value ; }
  Tgt: return the maximum of this big integer and value
  Pred: return the maximum of this big integer and value
788 Code: draw Low Far Out <sep> { double side = aRadius * 2 ; g2 . draw ( new Line2D . Double ( xx - side , m - side , xx + side , m - side ) ) ; g2 . draw ( new Line2D . Double ( xx - side , m - side , xx , m ) ) ; g2 . draw ( new Line2D . Double ( xx + side , m - side , xx , m ) ) ; }
  Tgt: draw a triangle to indicate the presence of far out values
  Pred: the graphical representation of a legend shape
789 Code: get Parameter <sep> { if ( parameter == null ) { parameter = new ArrayList < DefinedAction . ConstructorParameters . Parameter > ( ) ; } return this . parameter ; }
  Tgt: get the value of the parameter property
  Pred: get the value of the parameter property
790 Code: to String <sep> { StringBuffer sb = new StringBuffer ( ) ; synchronized ( this ) { Iterator it = data . values ( ) . iterator ( ) ; while ( it . hasNext ( ) ) { Element [ ] elements = allElements ( it . next ( ) ) ; for ( int i = 0 ; i < elements . length ; i ++ ) { sb . append ( elements [ i ] ) ; sb . append ( "-" ) ; } } } return sb . toString ( ) ; }
  Tgt: return the contents of the cache as a string
  Pred: return a string representation of this Chromosome, useful for debugging purposes
791 Code: new Input Stream <sep> { synchronized ( DiskLruCache . this ) { if ( entry . currentEditor != this ) { throw new IllegalStateException ( ) ; } if ( ! entry . readable ) { return null ; } try { return new FileInputStream ( entry . getCleanFile ( index ) ) ; } catch ( FileNotFoundException e ) { return null ; } } }
  Tgt: return an unbuffered input stream to read the last committed value, or null if no value has been committed
  Pred: return an unbuffered input stream to read the last committed value, or null if no value has been committed
792 Code: get Long <sep> { if ( string == null || string . length ( ) == 0 ) { return valueOf ( defaultValue ) ; } String prop = System . getProperty ( string ) ; if ( prop == null ) { return valueOf ( defaultValue ) ; } try { return decode ( prop ) ; } catch ( NumberFormatException ex ) { return valueOf ( defaultValue ) ; } }
  Tgt: return the long value of the system property identified by string
  Pred: return the long value of the system property identified by string
793 Code: firmware Check <sep> { String sysVersionName = android . os . Build . VERSION . RELEASE ; String sysVersion = android . os . Build . VERSION . CODENAME ; int sysVersionCode = android . os . Build . VERSION_CODES . BASE ; Log . d ( TAG , "sysVersionName:" + sysVersionName + "---sysVersion:" + sysVersion + "----sysVersionCode" + sysVersionCode ) ; for ( int j = 0 ; j < firmwareList . size ( ) ; j ++ ) { if ( firmwareList . get ( j ) . versionName == null ) { continue ; } if ( firmwareList . get ( j ) . version > sysVersionCode ) { return true ; } } return false ; }
  Tgt: function firmware check
  Pred: return whether the body represented by the two api should be translated
794 Code: get Imap Sequence Values <sep> { ArrayList < String > list = new ArrayList < String > ( ) ; if ( set != null ) { String [ ] setItems = set . split ( "," ) ; for ( String item : setItems ) { if ( item . indexOf ( ':' ) == - 1 ) { if ( isNumberValid ( item ) ) { list . add ( item ) ; } } else { list . addAll ( getImapRangeValues ( item ) ) ; } } } return list ; }
  Tgt: get all of the values in a sequence set per rfc 3501
  Pred: return a list of versions values with the specified delimiter
795 Code: scan File <sep> { String line ; Scanner file = new Scanner ( new File ( filename ) , UTF_8 . name ( ) ) ; List < Text > result = Lists . newArrayList ( ) ; try { while ( file . hasNextLine ( ) ) { line = file . nextLine ( ) ; if ( ! line . isEmpty ( ) ) { result . add ( decode ? new Text ( Base64 . decodeBase64 ( line . getBytes ( UTF_8 ) ) ) : new Text ( line ) ) ; } } } finally { file . close ( ) ; } return result ; }
  Tgt: scan the given file line by line and returns a list containing those lines
  Pred: load a file to the specified file
796 Code: add Item <sep> { workList . add ( item ) ; }
  Tgt: add a basic block to the inlining work list
  Pred: add item
797 Code: is In Range To Render Dist <sep> { double var3 = this . boundingBox . getAverageEdgeLength ( ) * 4.0D ; var3 *= 64.0D ; return par1 < var3 * var3 ; }
  Tgt: check if the entity is in range to render by using the past in distance and comparing it to its average edge length 64 render distance weight Args: distance
  Pred: return the square range of a column in the byte array
798 Code: update Activity <sep> { mActivityTimestamp = System . currentTimeMillis ( ) ; }
  Tgt: update the session activity
  Pred: transfer the error based on the resources
799 Code: construct Value <sep> { StringBuilder sb = new StringBuilder ( 40 ) ; sb . append ( RTP_TYPE ) ; sb . append ( "://" ) ; sb . append ( serverAddress ) ; sb . append ( '@' ) ; sb . append ( multicastAddress ) ; sb . append ( ':' ) ; sb . append ( port ) ; return sb . toString ( ) ; }
  Tgt: construct the mrl from the internal state
  Pred: return a string of the values
800 Code: is Reader M T O M Aware <sep> { boolean isReaderMTOMAware = false ; try { isReaderMTOMAware = java . lang . Boolean . TRUE . equals ( reader . getProperty ( org . apache . axiom . om . OMConstants . IS_DATA_HANDLERS_AWARE ) ) ; } catch ( java . lang . IllegalArgumentException e ) { isReaderMTOMAware = false ; } return isReaderMTOMAware ; }
  Tgt: be reader mtom aware
  Pred: be reader mtom aware
801 Code: copy Vertex <sep> { System . arraycopy ( newVertex , 0 , vertex , 0 , newVertex . length ) ; }
  Tgt: keep the newVertex: replace a given vertex with it
  Pred: copy the contents to another array
802 Code: get Process Stats Locked <sep> { Proc ps = mProcessStats . get ( name ) ; if ( ps == null ) { ps = new Proc ( ) ; mProcessStats . put ( name , ps ) ; } return ps ; }
  Tgt: retrieve the statistics object for a particular process, creating if needed
  Pred: get the process node using an element
803 Code: add Property Change Listener <sep> { if ( l == null ) { throw new NullPointerException ( ) ; } checkAccess ( ) ; changes . addPropertyChangeListener ( l ) ; }
  Tgt: add an event listener to be invoked when the logging properties are re read
  Pred: add a property change listener to the listener list
804 Code: on Craft Matrix Changed <sep> { this . detectAndSendChanges ( ) ; }
  Tgt: callback for when the crafting matrix is changed
  Pred: callback for when the crafting matrix is changed
805 Code: register Internal Key Resolver <sep> { if ( _internalKeyResolvers == null ) { _internalKeyResolvers = new ArrayList < KeyResolverSpi > ( ) ; } this . _internalKeyResolvers . add ( realKeyResolver ) ; }
  Tgt: add a custom key resolver spi to a key infoobject
  Pred: register the error key
806 Code: add <sep> { sum += value * n ; sumSq += value * value * n ; count += n ; if ( Double . isNaN ( min ) ) { min = max = value ; } else if ( value < min ) { min = value ; } else if ( value > max ) { max = value ; } }
  Tgt: add a value that has been seen n times to the observed values
  Pred: insert the specified element at the specified position in this vector
807 Code: get Shadow Color <sep> { return CSSBorder . getAdjustedColor ( c , - 0.3 ) ; }
  Tgt: return the shadow border side color
  Pred: get the color dark color for the specified locale
808 Code: get <sep> { URL url = new URL ( pacUri . toString ( ) ) ; URLConnection urlConnection = url . openConnection ( java . net . Proxy . NO_PROXY ) ; return new String ( Streams . readFully ( urlConnection . getInputStream ( ) ) ) ; }
  Tgt: do a post and reports back the status code
  Pred: get the value of a variable
809 Code: calculate Average Time <sep> { long sum = 0 ; for ( Integer processID : processTimes . keySet ( ) ) { Long localTime = processTimes . get ( processID ) ; Long recvTime = recvTimes . get ( processID ) ; long rtt = recvTime . longValue ( ) - requestTime ; long realProcessTime = localTime + ( long ) ( rtt / 2 ) ; realTimesRTT . put ( processID , new Long ( realProcessTime ) ) ; sum += realProcessTime ; } sum += process . getTime ( ) ; return ( long ) sum / ( getVector ( "pids" ) . size ( ) + 1 ) ; }
  Tgt: calculate the new average time
  Pred: return whether the specified time represents a long of the variables
810 Code: send File <sep> { checkTransferThread ( ) ; if ( file == null || ! file . exists ( ) || ! file . canRead ( ) ) { throw new IllegalArgumentException ( "Could-not-read-file" ) ; } else { setFileInfo ( file . getAbsolutePath ( ) , file . getName ( ) , file . length ( ) ) ; } transferThread = new Thread ( new Runnable ( ) { public void run ( ) { try { outputStream = negotiateStream ( file . getName ( ) , file . length ( ) , description ) ; } catch ( XMPPException e ) { handleXMPPException ( e ) ; return ; } if ( outputStream == null ) { return ; } if ( ! updateStatus ( Status . negotiated , Status . in_progress ) ) { return ; } InputStream inputStream = null ; try { inputStream = new FileInputStream ( file ) ; writeToStream ( inputStream , outputStream ) ; } catch ( FileNotFoundException e ) { setStatus ( FileTransfer . Status . error ) ; setError ( Error . bad_file ) ; setException ( e ) ; } catch ( XMPPException e ) { setStatus ( FileTransfer . Status . error ) ; setException ( e ) ; } finally { try { if ( inputStream != null ) { inputStream . close ( ) ; } outputStream . flush ( ) ; outputStream . close ( ) ; } catch ( IOException e ) { } } updateStatus ( Status . in_progress , FileTransfer . Status . complete ) ; } } , "File-Transfer-" + streamID ) ; transferThread . start ( ) ; }
  Tgt: this method handles the stream negotiation process and transmits the file to the remote user
  Pred: write the specified file to the specified file
811 Code: terminate And Wait Fsync Service <sep> { if ( fsyncService . isTerminated ( ) ) return ; fsyncService . shutdown ( ) ; fsyncService . awaitTermination ( 3600 , TimeUnit . SECONDS ) ; Exception fsyncExceptionCopy = fsyncException ; if ( fsyncExceptionCopy != null ) throw fsyncExceptionCopy ; }
  Tgt: terminate the fsync service and wait for all the tasks to complete
  Pred: din the select worker and mark to the underlying response
812 Code: to String <sep> { StringBuffer sb = new StringBuffer ( ) ; sb . append ( super . toString ( ) ) ; sb . append ( "{m_priority=" ) ; sb . append ( m_priority ) ; sb . append ( ",-m_category=" ) ; sb . append ( m_category ) ; sb . append ( ",-m_status=" ) ; sb . append ( m_status ) ; sb . append ( ",-m_logicalKey=" ) ; sb . append ( m_logicalKey ) ; sb . append ( ",-m_levelObjectType=" ) ; sb . append ( getLevelTypeAsString ( m_levelObjectType ) ) ; sb . append ( ",-m_levelObjectId=" ) ; sb . append ( m_levelObjectId ) ; sb . append ( ",-m_issueHistory={" ) ; sb . append ( m_issueHistory . toString ( ) ) ; sb . append ( "}}" ) ; return sb . toString ( ) ; }
  Tgt: override write out the contents of the issue into a string
  Pred: return a string representation of the digraph
813 Code: set Normalized Max Value <sep> { normalizedMaxValue = Math . max ( 0d , Math . min ( 1d , Math . max ( value , normalizedMinValue ) ) ) ; invalidate ( ) ; }
  Tgt: set normalized max value to value so that 0 = normalized min value = value = 1
  Pred: set the maximum value of the slider
814 Code: get Non Empty Line <sep> { String line ; StringBuilder builder = null ; while ( true ) { line = mReader . readLine ( ) ; if ( line == null ) { if ( builder != null ) { return builder . toString ( ) ; } else if ( mPreviousLine != null ) { String ret = mPreviousLine ; mPreviousLine = null ; return ret ; } throw new VCardException ( "Reached-end-of-buffer." ) ; } else if ( line . length ( ) == 0 ) { if ( builder != null ) { return builder . toString ( ) ; } else if ( mPreviousLine != null ) { String ret = mPreviousLine ; mPreviousLine = null ; return ret ; } } else if ( line . charAt ( 0 ) == '-' || line . charAt ( 0 ) == '|t' ) { if ( builder != null ) { builder . append ( line . substring ( 1 ) ) ; } else if ( mPreviousLine != null ) { builder = new StringBuilder ( ) ; builder . append ( mPreviousLine ) ; mPreviousLine = null ; builder . append ( line . substring ( 1 ) ) ; } else { throw new VCardException ( "Space-exists-at-the-beginning-of-the-line" ) ; } } else { if ( mPreviousLine == null ) { mPreviousLine = line ; if ( builder != null ) { return builder . toString ( ) ; } } else { String ret = mPreviousLine ; mPreviousLine = line ; return ret ; } } } }
  Tgt: vcard 3
  Pred: return the next token line
815 Code: is Better Location <sep> { if ( location == null ) { return false ; } if ( currentBestLocation == null ) { return true ; } long timeDelta = location . getTime ( ) - currentBestLocation . getTime ( ) ; boolean isSignificantlyNewer = timeDelta > TWO_MINUTES ; boolean isSignificantlyOlder = timeDelta < - TWO_MINUTES ; boolean isNewer = timeDelta > 0 ; if ( isSignificantlyNewer ) { return true ; } else if ( isSignificantlyOlder ) { return false ; } int accuracyDelta = ( int ) ( location . getAccuracy ( ) - currentBestLocation . getAccuracy ( ) ) ; boolean isLessAccurate = accuracyDelta > 0 ; boolean isMoreAccurate = accuracyDelta < 0 ; boolean isSignificantlyLessAccurate = accuracyDelta > 200 ; boolean isFromSameProvider = isSameProvider ( location . getProvider ( ) , currentBestLocation . getProvider ( ) ) ; if ( isMoreAccurate ) { return true ; } else if ( isNewer && ! isLessAccurate ) { return true ; } else if ( isNewer && ! isSignificantlyLessAccurate && isFromSameProvider ) { return true ; } return false ; }
  Tgt: determine whether one location reading is better than the current location fix
  Pred: check if the given location is a subtype of this polygon
816 Code: get Recursively Owned Classifiers <sep> { List < Classifier > recursivelyOwnedClassifiers = new ArrayList < Classifier > ( ) ; List < Element > allOwnedElements = context . getOwnedElements ( ) ; for ( Element e : allOwnedElements ) { if ( e instanceof Classifier ) { recursivelyOwnedClassifiers . add ( ( Classifier ) e ) ; } if ( e instanceof Namespace ) { recursivelyOwnedClassifiers . addAll ( getRecursivelyOwnedClassifiers ( ( Namespace ) e ) ) ; } } return recursivelyOwnedClassifiers ; }
  Tgt: utility methods wich returns the list of classifiers that are directly or indirectly owned by a context namespace
  Pred: return the container at the given number of entries
817 Code: output D O Mc14n With Comments <sep> { try { os . write ( Canonicalizer . getInstance ( Canonicalizer . ALGO_ID_C14N_WITH_COMMENTS ) . canonicalizeSubtree ( contextNode ) ) ; } catch ( IOException ex ) { } catch ( InvalidCanonicalizerException ex ) { } catch ( CanonicalizationException ex ) { } }
  Tgt: serialize the context node into the OutputStream, but supresses all exceptions
  Pred: internal add the passed element to the structured file axis
818 Code: read Object <sep> { ObjectInputStream . GetField fields = in . readFields ( ) ; if ( fields . get ( "all_allowed" , false ) ) { all = new AllPermission ( ) ; } }
  Tgt: restore internal state
  Pred: read object
819 Code: hex To Decimal <sep> { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < hex . length ( ) - 1 ; i += 2 ) { String output = hex . substring ( i , ( i + 2 ) ) ; int decimal = Integer . parseInt ( output , 16 ) ; sb . append ( decimal ) ; } return sb . toString ( ) ; }
  Tgt: return the decimal representation of an hexadecimal string
  Pred: convert a string to a mail section
820 Code: remove All Mouse Listeners <sep> { allListeners . removeAll ( mouseListeners ) ; mouseListeners . clear ( ) ; }
  Tgt: remove all the mouse listeners from this input
  Pred: remove all listeners
821 Code: to J S O N String <sep> { if ( map == null ) return "null" ; StringBuffer sb = new StringBuffer ( ) ; boolean first = true ; Iterator iter = map . entrySet ( ) . iterator ( ) ; sb . append ( '{' ) ; while ( iter . hasNext ( ) ) { if ( first ) first = false ; else sb . append ( ',' ) ; Map . Entry entry = ( Map . Entry ) iter . next ( ) ; toJSONString ( String . valueOf ( entry . getKey ( ) ) , entry . getValue ( ) , sb ) ; } sb . append ( '}' ) ; return sb . toString ( ) ; }
  Tgt: convert a map to json text
  Pred: convert a single string into a hash array
822 Code: to String <sep> { try { Iterator keys = this . keys ( ) ; StringBuffer sb = new StringBuffer ( "{" ) ; while ( keys . hasNext ( ) ) { if ( sb . length ( ) > 1 ) { sb . append ( ',' ) ; } Object o = keys . next ( ) ; sb . append ( quote ( o . toString ( ) ) ) ; sb . append ( ':' ) ; sb . append ( valueToString ( this . map . get ( o ) ) ) ; } sb . append ( '}' ) ; return sb . toString ( ) ; } catch ( Exception e ) { return null ; } }
  Tgt: make a json text of this json object
  Pred: make a json text of this json object
823 Code: test Save Location Exists <sep> { String sDCardStatus = Environment . getExternalStorageState ( ) ; boolean status ; if ( sDCardStatus . equals ( Environment . MEDIA_MOUNTED ) ) { status = true ; } else { status = false ; } return status ; }
  Tgt: determine if sd card exists
  Pred: determine if sd card exists
824 Code: add Container <sep> { mContainers . add ( container ) ; }
  Tgt: add another image container to the list of those interested in the results of the request
  Pred: add a plotter to the list
825 Code: write Q Name <sep> { java . lang . String namespaceURI = qname . getNamespaceURI ( ) ; if ( namespaceURI != null ) { java . lang . String prefix = xmlWriter . getPrefix ( namespaceURI ) ; if ( prefix == null ) { prefix = generatePrefix ( namespaceURI ) ; xmlWriter . writeNamespace ( prefix , namespaceURI ) ; xmlWriter . setPrefix ( prefix , namespaceURI ) ; } if ( prefix . trim ( ) . length ( ) > 0 ) { xmlWriter . writeCharacters ( prefix + ":" + org . apache . axis2 . databinding . utils . ConverterUtil . convertToString ( qname ) ) ; } else { xmlWriter . writeCharacters ( org . apache . axis2 . databinding . utils . ConverterUtil . convertToString ( qname ) ) ; } } else { xmlWriter . writeCharacters ( org . apache . axis2 . databinding . utils . ConverterUtil . convertToString ( qname ) ) ; } }
  Tgt: handle qnames
  Pred: handle qnames
826 Code: binary Search <sep> { return binarySearch0 ( a , 0 , a . length , key ) ; }
  Tgt: search the specified array of bytes for the specified value using the binary search algorithm
  Pred: search the specified array of shorts for the specified value using the binary search algorithm
827 Code: commit Edit <sep> { if ( editor instanceof DefaultEditor ) ( ( DefaultEditor ) editor ) . commitEdit ( ) ; }
  Tgt: if the editor is j spinner
  Pred: handle the buttons in the text system
828 Code: verify Host Name <sep> { if ( hostName == null || hostName . length ( ) == 0 || cn == null || cn . length ( ) == 0 ) { return false ; } cn = cn . toLowerCase ( Locale . US ) ; if ( ! cn . contains ( "*" ) ) { return hostName . equals ( cn ) ; } if ( cn . startsWith ( "*." ) && hostName . regionMatches ( 0 , cn , 2 , cn . length ( ) - 2 ) ) { return true ; } int asterisk = cn . indexOf ( '*' ) ; int dot = cn . indexOf ( '.' ) ; if ( asterisk > dot ) { return false ; } if ( ! hostName . regionMatches ( 0 , cn , 0 , asterisk ) ) { return false ; } int suffixLength = cn . length ( ) - ( asterisk + 1 ) ; int suffixStart = hostName . length ( ) - suffixLength ; if ( hostName . indexOf ( '.' , asterisk ) < suffixStart ) { if ( ! hostName . endsWith ( ".clients.google.com" ) ) { return false ; } } if ( ! hostName . regionMatches ( suffixStart , cn , asterisk + 1 , suffixLength ) ) { return false ; } return true ; }
  Tgt: check if host name matches the name or pattern cn
  Pred: locate a ip host by filename
829 Code: Xml Element Decl <sep> { return new JAXBElement < String > ( _DischargeRegistrationRequestTypeTypeRegistrationToken_QNAME , String . class , DischargeRegistrationRequestTypeType . class , value ) ; }
  Tgt: create an instance of jaxb element
  Pred: create an instance of jaxb element
830 Code: is Water <sep> { Material material = location . getBlock ( ) . getType ( ) ; return material == Material . WATER || material == Material . STATIONARY_WATER ; }
  Tgt: determine if water is at a certain location
  Pred: return whether the given column is deprecated
831 Code: set URL <sep> { HELP_MAP . put ( object , url ) ; }
  Tgt: associate a particular object with a url
  Pred: add a url to the url
832 Code: get Metrics Map <sep> { ImmutableMap . Builder < String , Long > builder = ImmutableMap . builder ( ) ; for ( Map . Entry < String , AtomicLong > e : this . counters . entrySet ( ) ) { builder . put ( e . getKey ( ) , e . getValue ( ) . getAndSet ( 0 ) ) ; } return builder . build ( ) ; }
  Tgt: get all of the values since the last time this function was called
  Pred: return the map of pif metrics to be used by this metrics
833 Code: fill Uniform <sep> { for ( int i = 0 ; i < d . length ; i ++ ) d [ i ] = Math . random ( ) + mean - 0.5 ; }
  Tgt: fill an array with uniform random numbers within + 0
  Pred: reset the euclidean text
834 Code: delimiter Offset <sep> { for ( int i = pos ; i < limit ; i ++ ) { if ( delimiters . indexOf ( input . charAt ( i ) ) != - 1 ) return i ; } return limit ; }
  Tgt: return the index of the first character in input that contains a character in delimiters
  Pred: return the offset for the graphics point
835 Code: is Empty <sep> { return al . isEmpty ( ) ; }
  Tgt: check if this set contains no elements
  Pred: check if this hash set has no elements, false otherwise
836 Code: format Day And Time <sep> { String format = get24HourMode ( context ) ? DM24 : DM12 ; return ( c == null ) ? "" : ( String ) DateFormat . format ( format , c ) ; }
  Tgt: show day and time used for lock screen
  Pred: format a double for long rules
837 Code: prepare Wrapper Mapping Info <sep> { String wrapperName = wrapper . getName ( ) ; boolean resourceOnly = context . isResourceOnlyServlet ( wrapperName ) ; String [ ] mappings = wrapper . findMappings ( ) ; for ( String mapping : mappings ) { boolean jspWildCard = ( wrapperName . equals ( "jsp" ) && mapping . endsWith ( "/*" ) ) ; wrappers . add ( new WrapperMappingInfo ( mapping , wrapper , jspWildCard , resourceOnly ) ) ; } }
  Tgt: populate wrappers list with information for registration of mappings for this wrapper in this context
  Pred: forwards down to the map with the given map
838 Code: set Entry Values <sep> { mEntryValues = entryValues ; Arrays . fill ( mSetValues , false ) ; Arrays . fill ( mOrigValues , false ) ; }
  Tgt: the array to find the value to save for a preference when an entry from entries is selected
  Pred: set the entry at the specified position
839 Code: get Account Type Bytes <sep> { java . lang . Object ref = accountType_ ; if ( ref instanceof java . lang . String ) { com . google . protobuf . ByteString b = com . google . protobuf . ByteString . copyFromUtf8 ( ( java . lang . String ) ref ) ; accountType_ = b ; return b ; } else { return ( com . google . protobuf . ByteString ) ref ; } }
  Tgt: optional string account type = 5; re the user account type for this client
  Pred: require string type type = 3; re
840 Code: read <sep> { if ( currentOffset < tiffheader . length ) { return tiffheader [ currentOffset ++ ] ; } return datastream . read ( ) ; }
  Tgt: for simple read, take a byte from the tiffheader array or pass through
  Pred: read an array of bytes
841 Code: set Current Resource <sep> { mCurrentResource = resource ; if ( mShowValueText && mEditValueText != null ) { mEditValueText . setText ( resource ) ; } return this ; }
  Tgt: set the currently selected item
  Pred: get the current configuration
842 Code: contains <sep> { boolean returnValue = ( ( ComponentUI ) ( uis . elementAt ( 0 ) ) ) . contains ( a , b , c ) ; for ( int i = 1 ; i < uis . size ( ) ; i ++ ) { ( ( ComponentUI ) ( uis . elementAt ( i ) ) ) . contains ( a , b , c ) ; } return returnValue ; }
  Tgt: invoke the contains method on each ui handled by this object
  Pred: invoke the contains method on each ui handled by this object
843 Code: clone <sep> { SimpleDateFormat clone = ( SimpleDateFormat ) super . clone ( ) ; clone . formatData = ( DateFormatSymbols ) formatData . clone ( ) ; clone . defaultCenturyStart = new Date ( defaultCenturyStart . getTime ( ) ) ; return clone ; }
  Tgt: return a new simple date format with the same pattern andproperties as this simple date format
  Pred: override cloneable
844 Code: find View For Touch <sep> { int containerCoordsX = rawX - mContainerRawLocation [ 0 ] ; int containerCoordsY = rawY - mContainerRawLocation [ 1 ] ; Rect frame = mTempRect ; View closestChild = null ; int closestChildDistanceSq = Integer . MAX_VALUE ; for ( int i = mContainer . getChildCount ( ) - 1 ; i >= 0 ; i -- ) { View child = mContainer . getChildAt ( i ) ; if ( child . getVisibility ( ) != View . VISIBLE ) { continue ; } child . getHitRect ( frame ) ; if ( frame . contains ( containerCoordsX , containerCoordsY ) ) { return child ; } int distanceX ; if ( containerCoordsX >= frame . left && containerCoordsX <= frame . right ) { distanceX = 0 ; } else { distanceX = Math . min ( Math . abs ( frame . left - containerCoordsX ) , Math . abs ( containerCoordsX - frame . right ) ) ; } int distanceY ; if ( containerCoordsY >= frame . top && containerCoordsY <= frame . bottom ) { distanceY = 0 ; } else { distanceY = Math . min ( Math . abs ( frame . top - containerCoordsY ) , Math . abs ( containerCoordsY - frame . bottom ) ) ; } int distanceSq = distanceX * distanceX + distanceY * distanceY ; if ( ( distanceSq < mTouchPaddingScaledSq ) && ( distanceSq < closestChildDistanceSq ) ) { closestChild = child ; closestChildDistanceSq = distanceSq ; } } return closestChild ; }
  Tgt: return the view that should receive a touch at the given coordinates
  Pred: check if the view is a view of the supplied view
845 Code: skip <sep> { checkNotNull ( iterable ) ; checkArgument ( numberToSkip >= 0 , "number-to-skip-cannot-be-negative" ) ; if ( iterable instanceof List ) { final List < T > list = ( List < T > ) iterable ; return new FluentIterable < T > ( ) { @ Override public Iterator < T > iterator ( ) { int toSkip = Math . min ( list . size ( ) , numberToSkip ) ; return list . subList ( toSkip , list . size ( ) ) . iterator ( ) ; } } ; } return new FluentIterable < T > ( ) { @ Override public Iterator < T > iterator ( ) { final Iterator < T > iterator = iterable . iterator ( ) ; Iterators . advance ( iterator , numberToSkip ) ; return new Iterator < T > ( ) { boolean atStart = true ; @ Override public boolean hasNext ( ) { return iterator . hasNext ( ) ; } @ Override public T next ( ) { T result = iterator . next ( ) ; atStart = false ; return result ; } @ Override public void remove ( ) { checkRemove ( ! atStart ) ; iterator . remove ( ) ; } } ; } } ; }
  Tgt: return a view of iterable that skips its first number to skip elements
  Pred: read the next key
846 Code: child Beans <sep> { for ( java . util . Iterator it = _Schema . iterator ( ) ; it . hasNext ( ) ; ) { org . netbeans . modules . xml . jaxb . cfg . schema . Schema element = ( org . netbeans . modules . xml . jaxb . cfg . schema . Schema ) it . next ( ) ; if ( element != null ) { if ( recursive ) { element . childBeans ( true , beans ) ; } beans . add ( element ) ; } } }
  Tgt: put all child beans into the beans list
  Pred: wants the cell timer
847 Code: set Class <sep> { resolvedClass = new WeakReference < Class < ? >> ( c ) ; }
  Tgt: set the class java
  Pred: for the class
848 Code: set So Timeout <sep> { checkOpen ( ) ; if ( timeout < 0 ) { throw new IllegalArgumentException ( "timeout-<-0" ) ; } impl . setOption ( SocketOptions . SO_TIMEOUT , Integer . valueOf ( timeout ) ) ; }
  Tgt: set the socket options so timeout accept timeout in milliseconds for this socket
  Pred: set the setup socket for the specified socket
849 Code: encode3to4 <sep> { encode3to4 ( threeBytes , 0 , numSigBytes , b4 , 0 , options ) ; return b4 ; }
  Tgt: encode up to the first three bytes of array three bytes and returns a four byte array in Base64 notation
  Pred: encode up to the first three bytes of array three bytes and returns a four byte array in Base64 notation
850 Code: get All Hosted Service Provider Entities <sep> { List hostedSPEntityList = new ArrayList ( ) ; List hostedEntityIds = getAllHostedEntities ( realm ) ; Iterator entityIterator = hostedEntityIds . iterator ( ) ; while ( entityIterator . hasNext ( ) ) { String entityID = ( String ) entityIterator . next ( ) ; if ( getSPDescriptor ( realm , entityID ) != null ) { hostedSPEntityList . add ( entityID ) ; } } LogUtil . access ( Level . INFO , LogUtil . GET_HOSTED_SERVICE_PROVIDERS_SUCCEEDED , null ) ; return hostedSPEntityList ; }
  Tgt: return all hosted service provider entity identifiers under the realm
  Pred: get all database in given map
851 Code: to Array <sep> { return events . toArray ( ) ; }
  Tgt: return an object array of the events comprising the drag gesture
  Pred: return an array containing all of the elements in this queue in proper sequence
852 Code: to Text <sep> { StringBuffer returnString = new StringBuffer ( super . toText ( ) ) ; returnString . append ( Messages . formatTextString ( CAN_ASSAULT_FIRE_LABEL , FIRST_COLUMN_LABEL_WIDTH , true , false ) ) ; returnString . append ( Messages . formatTextString ( Messages . getChoiceLabel ( canAssaultFire ( ) ) , SECOND_COLUMN_VALUE_WIDTH , false , false ) ) ; returnString . append ( Messages . formatTextString ( CAN_SPRAY_FIRE_LABEL , THIRD_COLUMN_LABEL_WIDTH , true , false ) ) ; returnString . append ( Messages . formatTextString ( Messages . getChoiceLabel ( canSprayFire ( ) ) , FOURTH_COLUMN_VALUE_WIDTH , false , true ) ) ; returnString . append ( Messages . formatTextString ( SMOKE_PLACEMENT_EXP_LABEL , FIRST_COLUMN_LABEL_WIDTH , true , false ) ) ; returnString . append ( Messages . formatTextString ( Integer . toString ( smokePlacementExponent ( ) ) , SECOND_COLUMN_VALUE_WIDTH , false , true ) ) ; return returnString . toString ( ) ; }
  Tgt: display the value of each of the private data members that describe the current instance
  Pred: this method serializes a specified string
853 Code: light Separators <sep> { mDimSeparatorsAnimator . setDuration ( animationDuration ) ; mDimSeparatorsAnimator . start ( ) ; }
  Tgt: fade the selector spinnerwheel via an animation
  Pred: 
854 Code: cancel Shapes <sep> { if ( m_splitListener == null ) { m_submit . setText ( Messages . getInstance ( ) . getString ( "VisualizePanel_PlotPanel_CancelShapes_Submit_SetText_Text" ) ) ; m_submit . setActionCommand ( Messages . getInstance ( ) . getString ( "VisualizePanel_PlotPanel_CancelShapes_Submit_SetActionCommand_Text" ) ) ; if ( m_originalPlot == null || m_originalPlot . m_plotInstances == m_plotInstances ) { m_submit . setEnabled ( false ) ; } else { m_submit . setEnabled ( true ) ; } } else { m_submit . setEnabled ( false ) ; } m_createShape = false ; m_shapePoints = null ; m_shapes = null ; this . repaint ( ) ; }
  Tgt: set the list of shapes to empty and also cancels the current shape being drawn
  Pred: make tasks
855 Code: ensure Capacity <sep> { int oldCapacity = array . length ; int [ ] newArray ; if ( minCapacity > oldCapacity ) { int newCapacity = ( oldCapacity * 3 ) / 2 + 1 ; if ( newCapacity < minCapacity ) { newCapacity = minCapacity ; } newArray = new int [ newCapacity ] ; System . arraycopy ( array , 0 , newArray , 0 , oldCapacity ) ; } else { newArray = array ; } return newArray ; }
  Tgt: ensure that a given array can hold up to min capacity elements
  Pred: ensure the capacity of the queue
856 Code: Socket <sep> { this ( ) ; checkDestination ( dstAddress , dstPort ) ; startupSocket ( dstAddress , dstPort , localAddress , localPort , true ) ; }
  Tgt: create a new streaming socket connected to the target host specified by the parameters dst address and dst port
  Pred: log socket
857 Code: has Next Postponed <sep> { return ! postponedRoutes . isEmpty ( ) ; }
  Tgt: check if there is another postponed route to try
  Pred: check if there is another postponed route to try
858 Code: get Image Hotspot <sep> { int height = image . getHeight ( null ) ; int width = image . getWidth ( null ) ; return new Point ( width / 2 , height / 2 ) ; }
  Tgt: return the hotspot of the image used to draw a single data item
  Pred: return an iio metadata object describing the given image metadata
859 Code: save Action <sep> { save ( ) ; }
  Tgt: perform action for button save
  Pred: save the visitor to a file
860 Code: list <sep> { ZipFile zf = new ZipFile ( fname ) ; Enumeration < ? extends ZipEntry > zes = zf . entries ( ) ; while ( zes . hasMoreElements ( ) ) { printEntry ( zes . nextElement ( ) , files ) ; } zf . close ( ) ; }
  Tgt: list contents of jar file, via zip file
  Pred: construct an xml from a list
861 Code: create Connect To Deploy Btn <sep> { conToDplyChkBtn = new Button ( container , SWT . CHECK ) ; GridData gridData = new GridData ( ) ; gridData . verticalIndent = 10 ; gridData . horizontalSpan = 3 ; conToDplyChkBtn . setText ( Messages . conDplyLbl ) ; conToDplyChkBtn . setLayoutData ( gridData ) ; conToDplyChkBtn . setSelection ( false ) ; }
  Tgt: method creates check box of connect to deployment when ready
  Pred: create a script value
862 Code: make Pulldown <sep> { Select select = new Select ( name ) ; for ( int loop = 0 ; loop < list . length ; loop ++ ) { String value = list [ loop ] . toString ( ) ; org . apache . ecs . html . Option o = new org . apache . ecs . html . Option ( value , value , value ) ; if ( value . equals ( selected ) ) { o . setSelected ( true ) ; } select . addElement ( o ) ; } select . setSize ( rowsShowing ) ; return select ; }
  Tgt: description of the method
  Pred: make a new expression device
863 Code: set Bounds <sep> { this . bounds = bounds ; if ( AVKey . VERTICAL . equals ( this . getOrientation ( ) ) ) this . scrollArrowSize = bounds . width ; else this . scrollArrowSize = bounds . height ; this . scrollBounds = new Rectangle ( bounds . x , bounds . y + this . scrollArrowSize , bounds . width , bounds . height - 2 * this . scrollArrowSize ) ; }
  Tgt: set the bounds of the scroll bar
  Pred: return a component that completely enclosesthis bounds
864 Code: string To Date <sep> { if ( str == null ) { return null ; } return new SimpleDateFormat ( format ) . parse ( str ) ; }
  Tgt: prevede datum na retezec v pozadovanem formatu
  Pred: convert a string into a date
865 Code: process Ack <sep> { System . out . println ( "shootme:-got-an-ACK!-" ) ; System . out . println ( "Dialog-State-=-" + dialog . getState ( ) ) ; }
  Tgt: process the ack request
  Pred: run the longest waiting if it exists,
866 Code: create Attribute <sep> { Attribute attribute = new BasicAttribute ( attrName ) ; for ( ByteString value : values ) { attribute . add ( value . toByteArray ( ) ) ; } return attribute ; }
  Tgt: create a jndi attribute using an attribute name and a set of values
  Pred: create a binding with the specified attribute
867 Code: get Post Params Encoding <sep> { return getParamsEncoding ( ) ; }
  Tgt: return which encoding should be used when converting post parameters returned by get post params into a raw post body
  Pred: return which encoding should be used when converting post parameters returned by get post params into a raw post body
868 Code: warn <sep> { System . out . println ( "Warning:-" + s ) ; if ( t != null ) { t . printStackTrace ( ) ; } }
  Tgt: print a message to system output if there was a problem initializing the random number generator
  Pred: construct a callable object
869 Code: get Info <sep> { return savedInfo . get ( infoType ) ; }
  Tgt: return information about the client saved using set info
  Pred: return the info associated with the specified info name
870 Code: write Q Name Attribute <sep> { java . lang . String attributeNamespace = qname . getNamespaceURI ( ) ; java . lang . String attributePrefix = xmlWriter . getPrefix ( attributeNamespace ) ; if ( attributePrefix == null ) { attributePrefix = registerPrefix ( xmlWriter , attributeNamespace ) ; } java . lang . String attributeValue ; if ( attributePrefix . trim ( ) . length ( ) > 0 ) { attributeValue = attributePrefix + ":" + qname . getLocalPart ( ) ; } else { attributeValue = qname . getLocalPart ( ) ; } if ( namespace . equals ( "" ) ) { xmlWriter . writeAttribute ( attName , attributeValue ) ; } else { registerPrefix ( xmlWriter , namespace ) ; xmlWriter . writeAttribute ( namespace , attName , attributeValue ) ; } }
  Tgt: write an attribute without the ns prefix
  Pred: write an attribute without the ns prefix
871 Code: to String <sep> { return ReflectionToStringBuilder . reflectionToString ( this ) ; }
  Tgt: generic to string implementation
  Pred: return a string object representing this integers value
872 Code: update Next Object <sep> { if ( ! updateNextIndex ( ) ) { findNextValidParent ( ) ; } }
  Tgt: determine the next object by invoking update next index and if not succesful find next valid parent
  Pred: determine the next object by invoking update next index and if not succesful find next valid parent
873 Code: start Editing Timer <sep> { if ( timer == null ) { timer = new Timer ( 1200 , this ) ; timer . setRepeats ( false ) ; } timer . start ( ) ; }
  Tgt: start the editing timer
  Pred: start a start up
874 Code: reset Inspectors <sep> { inspectorSwitcher = new JPanel ( ) ; inspectorSwitcher . setLayout ( inspectorCardLayout = new CardLayout ( ) ) ; int loc = innerInspectorPanel . getDividerLocation ( ) ; innerInspectorPanel . setBottomComponent ( inspectorSwitcher ) ; innerInspectorPanel . setDividerLocation ( loc ) ; for ( int x = 0 ; x < inspectorToolbars . size ( ) ; x ++ ) inspectorSwitcher . add ( ( ( JComponent ) ( inspectorToolbars . elementAt ( x ) ) ) , "" + x ) ; inspectorSwitcher . add ( new JPanel ( ) , "-1" ) ; inspectorList . setListData ( inspectorNames ) ; if ( preferredSelection >= inspectorToolbars . size ( ) ) preferredSelection = 0 ; if ( preferredSelection >= inspectorToolbars . size ( ) ) preferredSelection = - 1 ; inspectorCardLayout . show ( inspectorSwitcher , "" + preferredSelection ) ; inspectorList . setSelectedIndex ( preferredSelection ) ; boolean shouldEnableButtons = ( inspectorNames . size ( ) > 0 ) ; detatchButton . setEnabled ( shouldEnableButtons ) ; removeButton . setEnabled ( shouldEnableButtons ) ; }
  Tgt: reset the console internal inspectors to the values given in the data structures above
  Pred: reset all the graph to the server
875 Code: get Instance <sep> { return ( SecuritySupport ) securitySupport ; }
  Tgt: return an appropriate instance of this class, depending on whether were on a jdk 1
  Pred: return a number format for formatting and parsing numbers for thedefault locale
876 Code: recurse Complement <sep> { if ( node . getCut ( ) == null ) { return new BSPTree < S > ( ( ( Boolean ) node . getAttribute ( ) ) ? Boolean . FALSE : Boolean . TRUE ) ; } @ SuppressWarnings ( "unchecked" ) BoundaryAttribute < S > attribute = ( BoundaryAttribute < S > ) node . getAttribute ( ) ; if ( attribute != null ) { final SubHyperplane < S > plusOutside = ( attribute . getPlusInside ( ) == null ) ? null : attribute . getPlusInside ( ) . copySelf ( ) ; final SubHyperplane < S > plusInside = ( attribute . getPlusOutside ( ) == null ) ? null : attribute . getPlusOutside ( ) . copySelf ( ) ; attribute = new BoundaryAttribute < S > ( plusOutside , plusInside ) ; } return new BSPTree < S > ( node . getCut ( ) . copySelf ( ) , recurseComplement ( node . getPlus ( ) ) , recurseComplement ( node . getMinus ( ) ) , attribute ) ; }
  Tgt: recursively build the complement of a bsp tree
  Pred: create a new regular expression by replicating it from the inventory,
877 Code: set J M S Message I D <sep> { if ( _log . isTraceEnabled ( ) ) { _log . trace ( "setJMSMessageID(" + id + ")" ) ; } _message . setJMSMessageID ( id ) ; }
  Tgt: set message id
  Pred: call by set the body of a protocol
878 Code: try Lock <sep> { return sync . tryAcquireSharedNanos ( 1 , unit . toNanos ( timeout ) ) ; }
  Tgt: acquire the read lock if the write lock is not held by another thread within the given waiting time and the current thread has not been plain threadinterrupt interrupted
  Pred: acquire the write lock if it is not held by another thread within the given waiting time and the current thread has not been plain threadinterrupt interrupted
879 Code: build <sep> { final Cache < T > cache = any . buildCache ( this . cache , this . loader , this . typedCacheBuilder ) ; return new MetricIdCache < T > ( cache , any . buildMetricId ( ) ) ; }
  Tgt: build a cache with the given metric id base
  Pred: build the content of a file
880 Code: get A D_ Attribute_ I D <sep> { Integer ii = ( Integer ) get_Value ( "AD_Attribute_ID" ) ; if ( ii == null ) return 0 ; return ii . intValue ( ) ; }
  Tgt: get system attribute
  Pred: get reference
881 Code: is Rotation Locked <sep> { return Settings . System . getIntForUser ( context . getContentResolver ( ) , Settings . System . ACCELEROMETER_ROTATION , 0 , UserHandle . USER_CURRENT ) == 0 ; }
  Tgt: check if rotation lock is enabled
  Pred: check if the lists at least one is currently running
882 Code: strip Anchor <sep> { int anchorIndex = url . indexOf ( '#' ) ; if ( anchorIndex != - 1 ) { return url . substring ( 0 , anchorIndex ) ; } return url ; }
  Tgt: strip the url of the anchor
  Pred: remove out from the most point from an int
883 Code: set Element Value Pair <sep> { List < ElementValuePair > list = getElementValuePairList ( ) ; list . setChild ( node , i ) ; }
  Tgt: replace the element value pair list element at index i with the new node node
  Pred: set the indexed value for the specified value
884 Code: init Reverse Map <sep> { if ( reverseMap == null ) { Map < String , String > rm = new HashMap < String , String > ( ) ; for ( Map . Entry < String , String > entry : map . entrySet ( ) ) { rm . put ( entry . getValue ( ) , entry . getKey ( ) ) ; } reverseMap = Collections . unmodifiableMap ( rm ) ; } }
  Tgt: initialize the reverse map
  Pred: initialize the days map of the systray
885 Code: show Popup <sep> { Popup oldPopup = popup ; if ( oldPopup != null ) { oldPopup . hide ( ) ; } PopupFactory popupFactory = PopupFactory . getSharedInstance ( ) ; if ( isLightWeightPopupEnabled ( ) ) { popupFactory . setPopupType ( PopupFactory . LIGHT_WEIGHT_POPUP ) ; } else { popupFactory . setPopupType ( PopupFactory . HEAVY_WEIGHT_POPUP ) ; } Point p = adjustPopupLocationToFitScreen ( desiredLocationX , desiredLocationY ) ; desiredLocationX = p . x ; desiredLocationY = p . y ; Popup newPopup = getUI ( ) . getPopup ( this , desiredLocationX , desiredLocationY ) ; popupFactory . setPopupType ( PopupFactory . LIGHT_WEIGHT_POPUP ) ; popup = newPopup ; newPopup . show ( ) ; }
  Tgt: retrieve popup instance from the popup menu ui that has had show invoked on it
  Pred: show the popup card
886 Code: get Time Str <sep> { return Integer . toString ( ( min / 60 ) + 8 ) + ":" + String . format ( "%02d" , min % 60 ) ; }
  Tgt: convert elapsed minutes to the time of day
  Pred: create a time in java
887 Code: Generated <sep> { if ( date == null ) { date = new ArrayList < Date > ( ) ; } return this . date ; }
  Tgt: get the value of the date property
  Pred: get the value of the type property
888 Code: Linearization Output <sep> { if ( null == ( _adblTransformedRHS = adblTransformedRHS ) || null == ( _aadblTransformedMatrix = aadblTransformedMatrix ) || null == ( _strLinearizationMethod = strLinearizationMethod ) || _strLinearizationMethod . isEmpty ( ) ) throw new java . lang . Exception ( "LinearizationOutput-ctr:-Invalid-Inputs" ) ; int iSize = _adblTransformedRHS . length ; if ( 0 == iSize || iSize != _aadblTransformedMatrix . length || null == _aadblTransformedMatrix [ 0 ] || iSize != _aadblTransformedMatrix [ 0 ] . length ) throw new java . lang . Exception ( "LinearizationOutput-ctr:-Invalid-Inputs" ) ; }
  Tgt: linearization output constructor
  Pred: create the last writer
889 Code: populate <sep> { final PreparedStatement ips = conn . prepareStatement ( insert ) ; try { ips . executeUpdate ( ) ; } catch ( final SQLException sqle ) { final String err = "could-not-populate-initiale-hi-value-in:-" + tableName ; log . error ( err , sqle ) ; throw new IdentifierGenerationException ( err ) ; } finally { ips . close ( ) ; } }
  Tgt: populate initiale value
  Pred: initialize the basic text
890 Code: start <sep> { try { return startViaZygote ( processClass , niceName , uid , gid , gids , debugFlags , mountExternal , targetSdkVersion , seInfo , abi , zygoteArgs ) ; } catch ( ZygoteStartFailedEx ex ) { Log . e ( LOG_TAG , "Starting-VM-process-through-Zygote-failed" ) ; throw new RuntimeException ( "Starting-VM-process-through-Zygote-failed" , ex ) ; } }
  Tgt: start a new process
  Pred: start the player
891 Code: put <sep> { if ( value instanceof Number ) { JSON . checkDouble ( ( ( Number ) value ) . doubleValue ( ) ) ; } while ( values . size ( ) <= index ) { values . add ( null ) ; } values . set ( index , value ) ; return this ; }
  Tgt: set the value at index to value, null padding this array to the required length if necessary
  Pred: add a single short to the request, replacing any existing value for the given name
892 Code: unload Images <sep> { int n = drawables . size ( ) ; for ( int i = 0 ; i < n ; i ++ ) drawables . get ( i ) . unload ( ) ; }
  Tgt: free memory used for loading the images
  Pred: adjust the images of the walls
893 Code: with Selection Back Reference <sep> { if ( mType != TYPE_UPDATE && mType != TYPE_DELETE && mType != TYPE_ASSERT ) { throw new IllegalArgumentException ( "only-updates,-deletes,-and-asserts-" + "can-have-selection-back-references" ) ; } if ( mSelectionArgsBackReferences == null ) { mSelectionArgsBackReferences = new HashMap < Integer , Integer > ( ) ; } mSelectionArgsBackReferences . put ( selectionArgIndex , previousResult ) ; return this ; }
  Tgt: add a back references as a selection arg
  Pred: set the reference to a specified reference part
894 Code: key Set <sep> { HashSet < Long > set = new HashSet < Long > ( ) ; for ( Segment < V > s : segments ) { set . addAll ( s . keySet ( ) ) ; } return set ; }
  Tgt: get the set of keys for resident entries
  Pred: return a set of all of the keys in this map
895 Code: write Bytes <sep> { try { os . writeInt ( bytesToWrite ) ; os . write ( bytes , 0 , bytesToWrite ) ; } catch ( Exception e ) { throw new UnexpectedExceptionCommandException ( false , e ) ; } }
  Tgt: for writing a large number of bytes
  Pred: write out the string to a file
896 Code: get Containers Stack <sep> { if ( containersStack == null ) { containersStack = new Stack < ILayoutContainerElement > ( ) ; } return containersStack ; }
  Tgt: it is a stack of processed containers, the last element represents the current container
  Pred: get the last line of the iteration
897 Code: on Draw <sep> { if ( adaptedImage != null ) canvas . drawBitmap ( adaptedImage , 0 , 0 , paint ) ; }
  Tgt: draw the view if the adapted image is not null
  Pred: test method
898 Code: get Combined Transform <sep> { rotation . mult ( localPos , tmpTransform . getTranslation ( ) ) . addLocal ( position ) ; tmpTransform . setRotation ( rotation ) . getRotation ( ) . multLocal ( localRot ) ; return tmpTransform ; }
  Tgt: return the local transform of this bone combined with the given position and rotation
  Pred: return the flatness, transform that does not be notified
899 Code: get Row Height <sep> { if ( rowHeight == 0 ) { FontMetrics metrics = getFontMetrics ( getFont ( ) ) ; rowHeight = metrics . getHeight ( ) ; } return rowHeight ; }
  Tgt: define the meaning of the height of a row
  Pred: return the position of the column
900 Code: remove Slider Listener <sep> { if ( mListeners . contains ( l ) ) { mListeners . remove ( l ) ; } }
  Tgt: remove the slider listener if you dont need the slider listener
  Pred: remove a listener from the screen hierarchy
901 Code: key Pressed <sep> { synchronized ( keyLock ) { keysDown . add ( e . getKeyCode ( ) ) ; } }
  Tgt: this method cannot be called directly
  Pred: this method cannot be called directly
902 Code: do Signal <sep> { do { if ( ( firstWaiter = first . nextWaiter ) == null ) lastWaiter = null ; first . nextWaiter = null ; } while ( ! transferForSignal ( first ) && ( first = firstWaiter ) != null ) ; }
  Tgt: remove and transfers nodes until hit non cancelled one or null
  Pred: find the operation and returns it as a list of tree nodes
903 Code: get Extension <sep> { if ( extension == null ) { extension = new ArrayList < Extension > ( ) ; } return this . extension ; }
  Tgt: get the value of the extension property
  Pred: get the value of the extension property
904 Code: Xml Element Decl <sep> { return new JAXBElement < UpdateCcdAdvertisingServiceReq > ( new QName ( "http://www.cisco.com/AXL/API/8.0" , "updateCcdAdvertisingService" ) , UpdateCcdAdvertisingServiceReq . class , null , value ) ; }
  Tgt: create an instance of jaxb element
  Pred: create an instance of jaxb element
905 Code: get Database Path <sep> { if ( dbPath != null ) { return dbPath . toString ( ) ; } else { return null ; } }
  Tgt: get the full database path
  Pred: return the path to display for the given node
906 Code: drain <sep> { lock . writeLock ( ) . lock ( ) ; try { dispatchesWithoutDrain = 0 ; threadPool . purge ( ) ; for ( Iterator < Entry < Long , SubmittedTask >> it = this . currentPool . entrySet ( ) . iterator ( ) ; it . hasNext ( ) ; ) { if ( it . next ( ) . getValue ( ) . future . isDone ( ) ) { it . remove ( ) ; } } } finally { lock . writeLock ( ) . unlock ( ) ; } }
  Tgt: remove all inactive tasks from the current pool
  Pred: perform the result of a flow
907 Code: new Prepare Statement Request <sep> { return newResult ( ResultConstants . PREPARE ) ; }
  Tgt: for sqlprepare for parparation of sql parepared statements
  Pred: create a new request configured to retrieve a particular facebook request
908 Code: create <sep> { if ( contentType == null ) throw new NullPointerException ( "contentType-==-null" ) ; if ( file == null ) throw new NullPointerException ( "content-==-null" ) ; return new Body ( ) { @ Override public MediaType contentType ( ) { return contentType ; } @ Override public long contentLength ( ) { return file . length ( ) ; } @ Override public void writeTo ( OutputStream out ) throws IOException { long length = contentLength ( ) ; if ( length == 0 ) return ; InputStream in = null ; try { in = new FileInputStream ( file ) ; byte [ ] buffer = new byte [ ( int ) Math . min ( 8192 , length ) ] ; for ( int c ; ( c = in . read ( buffer ) ) != - 1 ; ) { out . write ( buffer , 0 , c ) ; } } finally { Util . closeQuietly ( in ) ; } } } ; }
  Tgt: return a new request body that transmits the content of file
  Pred: return a new request body that transmits the content of file
909 Code: analyze <sep> { this . table = table ; isTopLevel = true ; isStmtAsExpr = false ; loops . clear ( ) ; switches . clear ( ) ; checks . clear ( ) ; dispatch ( unit ) ; return table ; }
  Tgt: process the specified translation unit
  Pred: analyze the user will be output to the output stream
910 Code: parse String To An Int <sep> { if ( s == null ) return 0 ; int result = 0 ; boolean negative = false ; int radix = 10 , i = 0 , max = s . length ( ) ; int limit , multmin , digit ; if ( max > 0 ) { if ( s . charAt ( 0 ) == '-' ) { negative = true ; limit = Integer . MIN_VALUE ; i ++ ; } else { limit = - Integer . MAX_VALUE ; } multmin = limit / radix ; if ( i < max ) { digit = Character . digit ( s . charAt ( i ++ ) , radix ) ; if ( digit < 0 ) return 0 ; else result = - digit ; } while ( i < max ) { digit = Character . digit ( s . charAt ( i ++ ) , radix ) ; if ( digit < 0 ) return 0 ; if ( result < multmin ) return 0 ; result *= radix ; if ( result < limit + digit ) return 0 ; result -= digit ; } } else { return 0 ; } if ( negative ) { if ( i > 1 ) return result ; else return 0 ; } else { return - result ; } }
  Tgt: effectively does the same thing as integer
  Pred: take a comma separated number
911 Code: try Transfer <sep> { if ( xfer ( e , true , TIMED , unit . toNanos ( timeout ) ) == null ) return true ; if ( ! Thread . interrupted ( ) ) return false ; throw new InterruptedException ( ) ; }
  Tgt: transfer the element to a consumer if it is possible to do so before the timeout elapses
  Pred: acquire the remaining object to the given stream and returns the old value
912 Code: read White List From File <sep> { Set < String > hashSet = new HashSet < String > ( ) ; BufferedReader br = new BufferedReader ( fr ) ; String str = null ; while ( ( str = br . readLine ( ) ) != null ) { str = str . trim ( ) ; if ( str . startsWith ( "#" ) ) { continue ; } String splits [ ] = str . split ( "-" ) ; if ( splits . length > 1 && ApiChange . contains ( splits [ 1 ] ) ) { String identifier = splits [ 0 ] + ApiDiffGenerator . DELIMITER + splits [ 1 ] ; hashSet . add ( identifier . trim ( ) ) ; } } return hashSet ; }
  Tgt: each white list element is an api element and api change
  Pred: read file specified in an external file
913 Code: write Q Name <sep> { java . lang . String namespaceURI = qname . getNamespaceURI ( ) ; if ( namespaceURI != null ) { java . lang . String prefix = xmlWriter . getPrefix ( namespaceURI ) ; if ( prefix == null ) { prefix = generatePrefix ( namespaceURI ) ; xmlWriter . writeNamespace ( prefix , namespaceURI ) ; xmlWriter . setPrefix ( prefix , namespaceURI ) ; } if ( prefix . trim ( ) . length ( ) > 0 ) { xmlWriter . writeCharacters ( prefix + ":" + org . apache . axis2 . databinding . utils . ConverterUtil . convertToString ( qname ) ) ; } else { xmlWriter . writeCharacters ( org . apache . axis2 . databinding . utils . ConverterUtil . convertToString ( qname ) ) ; } } else { xmlWriter . writeCharacters ( org . apache . axis2 . databinding . utils . ConverterUtil . convertToString ( qname ) ) ; } }
  Tgt: handle qnames
  Pred: handle qnames
914 Code: Xml Element Decl <sep> { return new JAXBElement < DriverRiskResponse > ( _DriverRiskResponse_QNAME , DriverRiskResponse . class , null , value ) ; }
  Tgt: create an instance of jaxb element
  Pred: create an instance of jaxb element
915 Code: add <sep> { String signature = createSignature ( method ) ; Set < JClassType > declaringClasses = signatureToDeclaringClasses . get ( signature ) ; if ( declaringClasses == null ) { declaringClasses = new HashSet < JClassType > ( ) ; signatureToDeclaringClasses . put ( signature , declaringClasses ) ; } declaringClasses . add ( type ) ; }
  Tgt: record that a given jso type contains the concrete implementation of a method
  Pred: add a new config property to the hashtable of properties
916 Code: add <sep> { arrayList . add ( new Float ( number . doubleValue ( ) ) ) ; }
  Tgt: add a pdf number to the pdf array
  Pred: add a new state to the list of listeners
917 Code: iterator <sep> { return m_locators . iterator ( ) ; }
  Tgt: create a new iterafor for the locator list
  Pred: return an enumeration containing the zero or more attributes in the collection
918 Code: crea Lettore <sep> { Scanner in = new Scanner ( System . in ) ; in . useDelimiter ( System . getProperty ( "line.separator" ) ) ; return in ; }
  Tgt: metodo per creare un lettore da tastiera che interrompe la scansione al termine di una riga
  Pred: unmarshal through the countdown
919 Code: as Number <sep> { Object obj = asObject ( code ) ; if ( ! ( obj instanceof Number ) ) { throw new ConstantException ( this . className , code , "not-a-Number" ) ; } return ( Number ) obj ; }
  Tgt: return a constant value cast to a number
  Pred: return a number of the filters an exception
920 Code: get On Progress Threshold <sep> { return onProgressThreshold . get ( ) ; }
  Tgt: get the threshold used to report progress on requests
  Pred: return an enumeration of progress entries
921 Code: get Current World <sep> { int world = 0 ; if ( methods . game . isLoggedIn ( ) ) { if ( methods . game . getTab ( ) != Game . Tab . FRIENDS ) { methods . game . openTab ( Game . Tab . FRIENDS ) ; } world = Integer . parseInt ( methods . interfaces . getComponent ( 550 , 19 ) . getText ( ) . replaceAll ( "Friends-List<br>RuneScape-" , "" ) ) ; } else if ( methods . game . getClientState ( ) == Game . INDEX_LOBBY_SCREEN ) { world = methods . lobby . getSelectedWorld ( ) ; } return world ; }
  Tgt: get current world
  Pred: get the current song
922 Code: equals <sep> { if ( object == this ) return true ; if ( ! ( object instanceof Monitor ) ) return false ; Monitor monitor = ( Monitor ) object ; return handle == monitor . handle ; }
  Tgt: compare the argument to the receiver, and returns true if they represent the same object using a class specific comparison
  Pred: compare two objects to determine if they are equal
923 Code: new Status Update Request <sep> { return newStatusUpdateRequest ( session , message , ( String ) null , null , callback ) ; }
  Tgt: create a new request configured to post a status update to a users feed
  Pred: create a new request configured to post a status update to a users feed
924 Code: create Xml File <sep> { TypeInfo type = NewXmlFileCreationPage . getTypeInfo ( folderType ) ; String xmlns = type . getXmlns ( ) ; String root = type . getDefaultRoot ( project ) ; if ( root == null ) { root = type . getRootSeed ( ) . toString ( ) ; } String attrs = type . getDefaultAttrs ( project , root ) ; return createXmlFile ( file , xmlns , root , attrs , null , folderType ) ; }
  Tgt: create a new xml file using the template according to the given folder type
  Pred: create a new xml file with a unique name
925 Code: Xml Element Decl <sep> { return new JAXBElement < GetDisputeResponseType > ( _GetDisputeResponse_QNAME , GetDisputeResponseType . class , null , value ) ; }
  Tgt: create an instance of jaxb element
  Pred: create an instance of jaxb element
926 Code: get Side Bytes <sep> { java . lang . Object ref = side_ ; if ( ref instanceof String ) { com . google . protobuf . ByteString b = com . google . protobuf . ByteString . copyFromUtf8 ( ( java . lang . String ) ref ) ; side_ = b ; return b ; } else { return ( com . google . protobuf . ByteString ) ref ; } }
  Tgt: optional string side = 3;
  Pred: optional string tip = 6;
927 Code: initialize Backup I D <sep> { SimpleDateFormat dateFormat = new SimpleDateFormat ( ServerConstants . DATE_FORMAT_COMPACT_LOCAL_TIME ) ; final String id = dateFormat . format ( new Date ( ) ) ; backupID . setText ( id ) ; }
  Tgt: initialize the backup id field with a value
  Pred: parse a map of menu item
928 Code: write Q Name Attribute <sep> { java . lang . String attributeNamespace = qname . getNamespaceURI ( ) ; java . lang . String attributePrefix = xmlWriter . getPrefix ( attributeNamespace ) ; if ( attributePrefix == null ) { attributePrefix = registerPrefix ( xmlWriter , attributeNamespace ) ; } java . lang . String attributeValue ; if ( attributePrefix . trim ( ) . length ( ) > 0 ) { attributeValue = attributePrefix + ":" + qname . getLocalPart ( ) ; } else { attributeValue = qname . getLocalPart ( ) ; } if ( namespace . equals ( "" ) ) { xmlWriter . writeAttribute ( attName , attributeValue ) ; } else { registerPrefix ( xmlWriter , namespace ) ; xmlWriter . writeAttribute ( namespace , attName , attributeValue ) ; } }
  Tgt: write an attribute without the ns prefix
  Pred: write an attribute without the ns prefix
929 Code: is Private <sep> { return java . lang . reflect . Modifier . isPrivate ( member ( ) . getModifiers ( ) ) ; }
  Tgt: have this member been declared with the private modifier?
  Pred: determine if the given class is a subtype of this class
930 Code: generate Parse Exception <sep> { jj_expentries . clear ( ) ; boolean [ ] la1tokens = new boolean [ 71 ] ; if ( jj_kind >= 0 ) { la1tokens [ jj_kind ] = true ; jj_kind = - 1 ; } for ( int i = 0 ; i < 33 ; i ++ ) { if ( jj_la1 [ i ] == jj_gen ) { for ( int j = 0 ; j < 32 ; j ++ ) { if ( ( jj_la1_0 [ i ] & ( 1 << j ) ) != 0 ) { la1tokens [ j ] = true ; } if ( ( jj_la1_1 [ i ] & ( 1 << j ) ) != 0 ) { la1tokens [ 32 + j ] = true ; } if ( ( jj_la1_2 [ i ] & ( 1 << j ) ) != 0 ) { la1tokens [ 64 + j ] = true ; } } } } for ( int i = 0 ; i < 71 ; i ++ ) { if ( la1tokens [ i ] ) { jj_expentry = new int [ 1 ] ; jj_expentry [ 0 ] = i ; jj_expentries . add ( jj_expentry ) ; } } int [ ] [ ] exptokseq = new int [ jj_expentries . size ( ) ] [ ] ; for ( int i = 0 ; i < jj_expentries . size ( ) ; i ++ ) { exptokseq [ i ] = ( int [ ] ) jj_expentries . get ( i ) ; } return new ParseException ( token , exptokseq , tokenImage ) ; }
  Tgt: generate parse exception
  Pred: generate parse exception
931 Code: list Tests <sep> { System . out . println ( "Availible-Tests-for-" + userName ) ; System . out . println ( "0:-Exit" ) ; System . out . println ( "1:-Multi-phone-enable-/-disable" ) ; System . out . println ( "2:-Inbox-paging" ) ; System . out . println ( "3:-Call-Announcement-Settings-(Presentation)" ) ; System . out . println ( "4:-Set-Default-Voicemail-Greeting" ) ; System . out . println ( "5:-Change-do-not-disturb-setting." ) ; System . out . println ( "6:-Change-Group-settings." ) ; System . out . println ( "7:-Read-all-settings-and-print-them-(cached)" ) ; System . out . println ( "8:-Read-all-settings-and-print-them-(uncached)" ) ; System . out . println ( "9:-Read-all-settings---pure-json-driven---flat-data" ) ; System . out . println ( "10:-Read-all-settings---pure-json-driven---actual-account-data" ) ; System . out . println ( "11:-Update-Group-Settings" ) ; System . out . println ( "12:-Group-settings-isPhoneEnabled-tests" ) ; System . out . println ( "13:-List-Default-Phones-and-Enabled/Disabled-Setting" ) ; System . out . println ( "14:-Send-SMS" ) ; System . out . println ( "15:-Check-SMS" ) ; System . out . println ( "16:-Captcha-Test" ) ; int testNr = 0 ; try { testNr = Integer . parseInt ( br . readLine ( ) ) ; } catch ( Exception e ) { System . out . println ( "Error-trying-to-read-the-testNr!" + e . getMessage ( ) ) ; System . exit ( 1 ) ; } runTest ( userName , pass , testNr ) ; }
  Tgt: let the tester choose the test to run
  Pred: iterate method
932 Code: write Q Name <sep> { java . lang . String namespaceURI = qname . getNamespaceURI ( ) ; if ( namespaceURI != null ) { java . lang . String prefix = xmlWriter . getPrefix ( namespaceURI ) ; if ( prefix == null ) { prefix = generatePrefix ( namespaceURI ) ; xmlWriter . writeNamespace ( prefix , namespaceURI ) ; xmlWriter . setPrefix ( prefix , namespaceURI ) ; } if ( prefix . trim ( ) . length ( ) > 0 ) { xmlWriter . writeCharacters ( prefix + ":" + org . apache . axis2 . databinding . utils . ConverterUtil . convertToString ( qname ) ) ; } else { xmlWriter . writeCharacters ( org . apache . axis2 . databinding . utils . ConverterUtil . convertToString ( qname ) ) ; } } else { xmlWriter . writeCharacters ( org . apache . axis2 . databinding . utils . ConverterUtil . convertToString ( qname ) ) ; } }
  Tgt: handle qnames
  Pred: handle qnames
933 Code: get Winners <sep> { int [ ] indices = new int [ scores . length ] ; if ( indices . length == 0 ) return indices ; indices [ 0 ] = 0 ; int lastIndex = - 1 ; for ( int i = 0 ; i < scores . length ; i ++ ) { if ( scores [ i ] > 0 ) if ( scores [ i ] > scores [ indices [ 0 ] ] ) { indices [ 0 ] = i ; lastIndex = 0 ; } else if ( scores [ i ] == scores [ indices [ 0 ] ] ) { indices [ ++ lastIndex ] = i ; } } int [ ] ret = new int [ lastIndex + 1 ] ; if ( ret . length > 0 ) System . arraycopy ( indices , 0 , ret , 0 , lastIndex + 1 ) ; return ret ; }
  Tgt: give an array of long, return an array of int containing the index of the largest element
  Pred: return the authentication array of the given pci
934 Code: format S T R_ M E S S A G E B O X_ T I T L E <sep> { return format ( STR_MESSAGEBOX_TITLE , arguments ) ; }
  Tgt: resource string str messagebox title message
  Pred: create a standard instance of endpoint study record
935 Code: get Encoded <sep> { ByteArrayOutputStream bOut = new ByteArrayOutputStream ( ) ; ASN1OutputStream aOut = new ASN1OutputStream ( bOut ) ; aOut . writeObject ( req ) ; return bOut . toByteArray ( ) ; }
  Tgt: return the asn
  Pred: return the default ber or der encoding for this object
936 Code: get Temp Directory Path <sep> { File cache = null ; if ( Environment . getExternalStorageState ( ) . equals ( Environment . MEDIA_MOUNTED ) ) { cache = new File ( Environment . getExternalStorageDirectory ( ) . getAbsolutePath ( ) + "/Android/data/" + ctx . getPackageName ( ) + "/cache/" ) ; } else { cache = ctx . getCacheDir ( ) ; } if ( ! cache . exists ( ) ) { cache . mkdirs ( ) ; } return cache . getAbsolutePath ( ) ; }
  Tgt: determine if we can use the sd card to store the temporary file
  Pred: determine if we can use the sd card to store the temporary file
937 Code: get Alphabet <sep> { char [ ] clone = new char [ ALPHABET . length ] ; System . arraycopy ( ALPHABET , 0 , clone , 0 , ALPHABET . length ) ; return clone ; }
  Tgt: return a clone of the alphabet array
  Pred: return the code of a given code
938 Code: Xml Element Decl <sep> { return new JAXBElement < GetReturnType > ( _GetDirtyState_QNAME , GetReturnType . class , null , value ) ; }
  Tgt: create an instance of jaxb element
  Pred: create an instance of jaxb element
939 Code: create Status <sep> { return createStatus ( item , new Vector ( status . keySet ( ) ) , children ) ; }
  Tgt: create a new i status for the given item
  Pred: create a new status with the specified parameters and arity status
940 Code: suspend Encoding <sep> { flushBase64 ( ) ; this . suspendEncoding = true ; }
  Tgt: suspend encoding of the stream
  Pred: destroy the data for a final class
941 Code: socks Connect <sep> { try { IoBridge . connect ( fd , socksGetServerAddress ( ) , socksGetServerPort ( ) , timeout ) ; } catch ( Exception e ) { throw new SocketException ( "SOCKS-connection-failed" , e ) ; } socksRequestConnection ( applicationServerAddress , applicationServerPort ) ; lastConnectedAddress = applicationServerAddress ; lastConnectedPort = applicationServerPort ; }
  Tgt: connect using a socks server
  Pred: return a connection object for the specified connection
942 Code: offset By Code Points <sep> { if ( seq == null ) { throw new NullPointerException ( ) ; } int end = start + count ; if ( start < 0 || count < 0 || end > seq . length || index < start || index > end ) { throw new IndexOutOfBoundsException ( ) ; } if ( codePointOffset == 0 ) { return index ; } if ( codePointOffset > 0 ) { int codePoints = codePointOffset ; int i = index ; while ( codePoints > 0 ) { codePoints -- ; if ( i >= end ) { throw new IndexOutOfBoundsException ( ) ; } if ( isHighSurrogate ( seq [ i ] ) ) { int next = i + 1 ; if ( next < end && isLowSurrogate ( seq [ next ] ) ) { i ++ ; } } i ++ ; } return i ; } assert codePointOffset < 0 ; int codePoints = - codePointOffset ; int i = index ; while ( codePoints > 0 ) { codePoints -- ; i -- ; if ( i < start ) { throw new IndexOutOfBoundsException ( ) ; } if ( isLowSurrogate ( seq [ i ] ) ) { int prev = i - 1 ; if ( prev >= start && isHighSurrogate ( seq [ prev ] ) ) { i -- ; } } } return i ; }
  Tgt: determine the index in a subsequence of the specified character array that is offset code point offset code points from index
  Pred: return the offset of the specified token
943 Code: merge Force Collapse <sep> { while ( stackSize > 1 ) { int n = stackSize - 2 ; if ( n > 0 && runLen [ n - 1 ] < runLen [ n + 1 ] ) n -- ; mergeAt ( n ) ; } }
  Tgt: merge all runs on the stack until only one remains
  Pred: merge all runs on the stack until only one remains
944 Code: dump <sep> { HttpLog . v ( "dump()" ) ; StringBuilder dump = new StringBuilder ( ) ; int count = 0 ; Iterator < Map . Entry < HttpHost , LinkedList < Request >>> iter ; if ( ! mPending . isEmpty ( ) ) { iter = mPending . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Map . Entry < HttpHost , LinkedList < Request >> entry = iter . next ( ) ; String hostName = entry . getKey ( ) . getHostName ( ) ; StringBuilder line = new StringBuilder ( "p" + count ++ + "-" + hostName + "-" ) ; LinkedList < Request > reqList = entry . getValue ( ) ; ListIterator reqIter = reqList . listIterator ( 0 ) ; while ( iter . hasNext ( ) ) { Request request = ( Request ) iter . next ( ) ; line . append ( request + "-" ) ; } dump . append ( line ) ; dump . append ( "-" ) ; } } HttpLog . v ( dump . toString ( ) ) ; }
  Tgt: debug tool: prints request queue to log
  Pred: dump into a string
945 Code: update Value In Comma Separated List <sep> { StringBuilder newPrefList = new StringBuilder ( ) ; if ( TextUtils . isEmpty ( list ) ) { newPrefList . append ( key ) . append ( ':' ) . append ( newValue ) ; } else { String [ ] prefValues = list . split ( "," ) ; boolean first = true ; boolean found = false ; for ( String value : prefValues ) { final int delimiter = value . indexOf ( ':' ) ; if ( delimiter > 0 ) { if ( key . equals ( value . substring ( 0 , delimiter ) ) ) { if ( first ) { first = false ; } else { newPrefList . append ( ',' ) ; } found = true ; newPrefList . append ( key ) . append ( ':' ) . append ( newValue ) ; } else { if ( first ) { first = false ; } else { newPrefList . append ( ',' ) ; } newPrefList . append ( value ) ; } } } if ( ! found ) { newPrefList . append ( ',' ) ; newPrefList . append ( key ) . append ( ':' ) . append ( newValue ) ; } } return newPrefList . toString ( ) ; }
  Tgt: update the value for a given key in a comma separated list of key value pairs, each of which are delimited by a colon
  Pred: this method is called by statistic only
946 Code: get Attribute Indices <sep> { return m_SelectedCols . getRanges ( ) ; }
  Tgt: get the current range selection
  Pred: return an enumeration of items
947 Code: get Entries Count <sep> { return entries . size ( ) ; }
  Tgt: return the number of entries in the category
  Pred: return the number of entries in the list
948 Code: hash Code <sep> { int code = 17 ; code = 37 * code + name . hashCode ( ) ; code = 37 * code + phone . hashCode ( ) ; code = 37 * code + address . hashCode ( ) ; return code ; }
  Tgt: compute a hashcode using the rules to be found in effective Java, by joshua bloch
  Pred: return a hash code value for this object
949 Code: get J Scroll Pane <sep> { if ( jScrollPane == null ) { jScrollPane = new JScrollPane ( ) ; jScrollPane . setViewportView ( getJTextArea ( ) ) ; } return jScrollPane ; }
  Tgt: this method initializes j scroll pane
  Pred: this method initializes j text pane
950 Code: parse Rect <sep> { String value = ( String ) cdata . get ( name ) ; Rectangle rect = parseRect ( name , value ) ; return ( rect == null ) ? def : rect ; }
  Tgt: use to parse rectangle specifications from the config file
  Pred: parse the extended string
951 Code: p To Console <sep> { String line = null ; BufferedReader br = new BufferedReader ( new InputStreamReader ( p . getInputStream ( ) ) ) ; StringBuffer strBuf = new StringBuffer ( ) ; while ( ( line = br . readLine ( ) ) != null ) { strBuf . append ( line ) ; strBuf . append ( "-" ) ; } br . close ( ) ; return strBuf . toString ( ) ; }
  Tgt: return the output stream of a java calling system commands
  Pred: translate a vector of mailbox composite coords
952 Code: add Image <sep> { myWorkspaces . get ( workspaceID ) . addImage ( file . getName ( ) ) ; }
  Tgt: add an image to a workspace
  Pred: add a new image to the image
953 Code: replace U I Input Map <sep> { InputMap map = component . getInputMap ( type , ( uiInputMap != null ) ) ; while ( map != null ) { InputMap parent = map . getParent ( ) ; if ( parent == null || ( parent instanceof UIResource ) ) { map . setParent ( uiInputMap ) ; return ; } map = parent ; } }
  Tgt: change the ui input map for component to ui input map
  Pred: change the ui input map for component to ui input map
954 Code: get Content Width <sep> { return mFrame . getContentPane ( ) . getWidth ( ) ; }
  Tgt: metoda ktora vrati sirku content obsahoveho okna
  Pred: return the width in pixels of the content
955 Code: append Serializable Type <sep> { sb . append ( "BLOB" ) ; }
  Tgt: output the sql type for a serialized java object
  Pred: add any sql type by within the given type
956 Code: rebuild Journal <sep> { if ( journalWriter != null ) { journalWriter . close ( ) ; } Writer writer = new BufferedWriter ( new OutputStreamWriter ( new FileOutputStream ( journalFileTmp ) , Util . US_ASCII ) ) ; try { writer . write ( MAGIC ) ; writer . write ( "-" ) ; writer . write ( VERSION_1 ) ; writer . write ( "-" ) ; writer . write ( Integer . toString ( appVersion ) ) ; writer . write ( "-" ) ; writer . write ( Integer . toString ( valueCount ) ) ; writer . write ( "-" ) ; writer . write ( "-" ) ; for ( Entry entry : lruEntries . values ( ) ) { if ( entry . currentEditor != null ) { writer . write ( DIRTY + '-' + entry . key + '|n' ) ; } else { writer . write ( CLEAN + '-' + entry . key + entry . getLengths ( ) + '|n' ) ; } } } finally { writer . close ( ) ; } if ( journalFile . exists ( ) ) { renameTo ( journalFile , journalFileBackup , true ) ; } renameTo ( journalFileTmp , journalFile , false ) ; journalFileBackup . delete ( ) ; journalWriter = new BufferedWriter ( new OutputStreamWriter ( new FileOutputStream ( journalFile , true ) , Util . US_ASCII ) ) ; }
  Tgt: create a new journal that omits redundant information
  Pred: create a new journal that omits redundant information
957 Code: get Attribute <sep> { if ( name . equals ( FEATURE_INCREMENTAL ) ) { return new Boolean ( m_incremental ) ; } else if ( name . equals ( FEATURE_OPTIMIZE ) ) { return new Boolean ( m_optimize ) ; } else if ( name . equals ( FEATURE_SOURCE_LOCATION ) ) { return new Boolean ( m_source_location ) ; } else throw new IllegalArgumentException ( XSLMessages . createMessage ( XSLTErrorResources . ER_ATTRIB_VALUE_NOT_RECOGNIZED , new Object [ ] { name } ) ) ; }
  Tgt: allow the user to retrieve specific attributes on the underlying implementation
  Pred: define an attribute for the specified attribute
958 Code: dispatach Chars <sep> { m_dtm . dispatchCharactersEvents ( node , m_contentHandler , false ) ; }
  Tgt: optimize dispatch of characters
  Pred: translate the longest characters in the cdr sequence
959 Code: to Replacer Pattern <sep> { StringBuffer rule = new StringBuffer ( "$" ) ; Utility . appendNumber ( rule , segmentNumber , 10 , 1 ) ; return rule . toString ( ) ; }
  Tgt: unicode replacer api
  Pred: convert the x number of strings to a swt instance
960 Code: create Empty Set Of Integers <sep> { firstWordNotUsed = 0 ; int [ ] arr = new int [ arrayIndex ( max - 1 ) + 1 ] ; return arr ; }
  Tgt: create a new empty set of integers
  Pred: create a value of the empty value in the set
961 Code: get Unit Increment <sep> { JViewport vp = getViewport ( ) ; if ( ! unitIncrementSet && ( vp != null ) && ( vp . getView ( ) instanceof Scrollable ) ) { Scrollable view = ( Scrollable ) ( vp . getView ( ) ) ; Rectangle vr = vp . getViewRect ( ) ; return view . getScrollableUnitIncrement ( vr , getOrientation ( ) , direction ) ; } else { return super . getUnitIncrement ( direction ) ; } }
  Tgt: compute the unit increment for scrolling if the viewports view is a scrollable object
  Pred: checks of a bunch of strings to docpositions
962 Code: dispose All <sep> { for ( Font font : fontMap . values ( ) ) { font . dispose ( ) ; } fontMap . clear ( ) ; }
  Tgt: dispose all the fonts and clears the internal storage of fonts
  Pred: dispose all of the cached fonts
963 Code: get Integer Object <sep> { Integer rv = null ; int max_length = Integer . valueOf ( Integer . MAX_VALUE ) . toString ( ) . length ( ) ; if ( timeString . length ( ) > max_length ) { timeString = timeString . substring ( 0 , max_length ) ; } try { rv = Integer . parseInt ( timeString ) ; } catch ( Exception e ) { log . warn ( this + ":getIntegerObject-" + e . getMessage ( ) ) ; } return rv ; }
  Tgt: get integer based on passed string
  Pred: return the list of arguments as a list of values
964 Code: create Response <sep> { return new Response ( request ) ; }
  Tgt: create a new response for the given request
  Pred: create a new response
965 Code: parse Type Name <sep> { String [ ] names = new String [ 2 ] ; String pkgName ; String fname ; int idx = qualifiedName . lastIndexOf ( '.' ) ; if ( idx > 0 ) { pkgName = qualifiedName . substring ( 0 , idx ) ; fname = qualifiedName . substring ( idx + 1 , qualifiedName . length ( ) ) + ".java" ; } else { pkgName = "" ; fname = qualifiedName + ".java" ; } names [ 0 ] = pkgName ; names [ 1 ] = fname ; return names ; }
  Tgt: give a fully qualified type name, generate the package name and the local filename including the extension
  Pred: return a message type name of the type type
966 Code: save Zoom Window <sep> { Stack < ZoomWindow > tzsq = new Stack < ZoomWindow > ( ) ; tzsq . push ( horse . getZoomWindow ( ) ) ; ObjectOutputStream oos = new ObjectOutputStream ( new FileOutputStream ( file ) ) ; oos . writeObject ( tzsq ) ; oos . writeObject ( horse . getFormulaContainer ( ) ) ; oos . writeInt ( horse . getIter ( ) ) ; oos . writeDouble ( horse . getBailout ( ) ) ; oos . close ( ) ; }
  Tgt: save the current zoom window and calculation settings from the given mandelbrot to the given file
  Pred: save the whole window in a window
967 Code: is Unsafe <sep> { return UNSAFE_CHARS . indexOf ( ch ) >= 0 ; }
  Tgt: check whether a character is unsafe chars unsafe
  Pred: check whether a character is unsafe chars unsafe
968 Code: get My Gmail Session <sep> { Properties props = new Properties ( ) ; props . put ( "mail.smtp.host" , "smtp.gmail.com" ) ; props . put ( "mail.smtp.socketFactory.port" , "465" ) ; props . put ( "mail.smtp.socketFactory.class" , "javax.net.ssl.SSLSocketFactory" ) ; props . put ( "mail.smtp.auth" , "true" ) ; props . put ( "mail.smtp.port" , "465" ) ; Session session = Session . getDefaultInstance ( props , new javax . mail . Authenticator ( ) { protected javax . mail . PasswordAuthentication getPasswordAuthentication ( ) { return new javax . mail . PasswordAuthentication ( ApplicationConstants . GMAIL_SESSION_USERNAME , ApplicationConstants . GMAIL_SESSION_PASSWORD ) ; } } ) ; return session ; }
  Tgt: get the my gmail session to send an email
  Pred: get the primative message of the drone
969 Code: add Listener <sep> { if ( listener == null ) { throw new NullPointerException ( ) ; } listeners . add ( listener ) ; }
  Tgt: register a listener to receive events when a privacy list is created, updated or deleted
  Pred: add a motion path listener to the path
970 Code: Load From File <sep> { URL u = this . getClass ( ) . getClassLoader ( ) . getResource ( fileName ) ; InputStream is = u . openStream ( ) ; DocumentBuilderFactory factory = DocumentBuilderFactory . newInstance ( ) ; factory . setNamespaceAware ( true ) ; DocumentBuilder builder = factory . newDocumentBuilder ( ) ; _doc = builder . parse ( is ) ; }
  Tgt: load xml data from a file
  Pred: load the service with the given filename
971 Code: remove Connection Factory <sep> { boolean removed = _connectionFactoryList . remove ( vConnectionFactory ) ; return removed ; }
  Tgt: method remove connection factory
  Pred: remove a new connection connection
972 Code: Xml Element Decl <sep> { return new JAXBElement < JoinEchiquier > ( _JoinEchiquier_QNAME , JoinEchiquier . class , null , value ) ; }
  Tgt: create an instance of jaxb element
  Pred: create an instance of jaxb element
973 Code: get Instance <sep> { if ( ! exist ) { controller = ins ; } if ( controller != null ) { exist = true ; instance = new View ( ) ; return instance ; } return null ; }
  Tgt: the method creates this class\s instance and provides access to it, by returning a reference
  Pred: singleton instance
974 Code: set Line <sep> { ArrayList current_line = ( ArrayList ) lines_ . get ( line ) ; current_line . clear ( ) ; for ( int i = 0 ; i < words . length ; i ++ ) current_line . add ( words [ i ] ) ; }
  Tgt: this method sets a new line on the specified index
  Pred: set the value of the line
975 Code: next Postponed <sep> { return postponedRoutes . remove ( 0 ) ; }
  Tgt: return the next postponed route to try
  Pred: return the next string adjacent to try
976 Code: minus <sep> { float [ ] res = ( result == null ) ? a : result ; for ( int i = 0 ; i < Math . min ( a . length , b . length ) ; i ++ ) res [ i ] = a [ i ] - b [ i ] ; }
  Tgt: subtract two vectors
  Pred: return a copy of this vector with the specified character subtracted
977 Code: U R I <sep> { initialize ( p_base , p_uriSpec ) ; }
  Tgt: construct a new uri from a base uri and a uri specification string
  Pred: construct the uri of the named uri
978 Code: get Name Bytes <sep> { java . lang . Object ref = name_ ; if ( ref instanceof String ) { com . google . protobuf . ByteString b = com . google . protobuf . ByteString . copyFromUtf8 ( ( java . lang . String ) ref ) ; name_ = b ; return b ; } else { return ( com . google . protobuf . ByteString ) ref ; } }
  Tgt: optional string name = 1; re file name, relative to root of source tree
  Pred: require string name = 1;
979 Code: eval <sep> { if ( receiver == null && arguments == null && context . hasLocal ( method ) ) { return context . getLocal ( method ) ; } KJUScriptObject evaledReceiver ; if ( receiver == null ) { evaledReceiver = context . getCurrentSelf ( ) ; } else { evaledReceiver = receiver . eval ( context ) ; } ArrayList < KJUScriptObject > evaledArguments = new ArrayList < KJUScriptObject > ( ) ; if ( arguments != null ) { for ( Node arg : arguments ) evaledArguments . add ( arg . eval ( context ) ) ; } return evaledReceiver . call ( method , ( KJUScriptObject [ ] ) evaledArguments . toArray ( new KJUScriptObject [ 0 ] ) ) ; }
  Tgt: make the method call
  Pred: query the given object to the class
980 Code: get Constructors <sep> { final List result = new LinkedList ( ) ; final Constructor [ ] ms = cl . getDeclaredConstructors ( ) ; for ( int i = 0 ; i < ms . length ; i ++ ) { if ( ms [ i ] . getParameterTypes ( ) . length == params ) { result . add ( ms [ i ] ) ; } } return result ; }
  Tgt: get all the constructors in the given class or super classes, even the redefined constructors are returned
  Pred: return the list of parameters for the specified class
981 Code: select All <sep> { if ( isEditing ( ) ) { removeEditor ( ) ; } if ( getRowCount ( ) > 0 && getColumnCount ( ) > 0 ) { int oldLead ; int oldAnchor ; ListSelectionModel selModel ; selModel = selectionModel ; selModel . setValueIsAdjusting ( true ) ; oldLead = getAdjustedIndex ( selModel . getLeadSelectionIndex ( ) , true ) ; oldAnchor = getAdjustedIndex ( selModel . getAnchorSelectionIndex ( ) , true ) ; setRowSelectionInterval ( 0 , getRowCount ( ) - 1 ) ; SwingUtilities2 . setLeadAnchorWithoutSelection ( selModel , oldLead , oldAnchor ) ; selModel . setValueIsAdjusting ( false ) ; selModel = columnModel . getSelectionModel ( ) ; selModel . setValueIsAdjusting ( true ) ; oldLead = getAdjustedIndex ( selModel . getLeadSelectionIndex ( ) , false ) ; oldAnchor = getAdjustedIndex ( selModel . getAnchorSelectionIndex ( ) , false ) ; setColumnSelectionInterval ( 0 , getColumnCount ( ) - 1 ) ; SwingUtilities2 . setLeadAnchorWithoutSelection ( selModel , oldLead , oldAnchor ) ; selModel . setValueIsAdjusting ( false ) ; } }
  Tgt: select all rows, columns, and cells in the table
  Pred: select the contents of all selected graph into a single string buffer
982 Code: Xml Element Decl <sep> { return new JAXBElement < SaveTModel > ( _SaveTModel_QNAME , SaveTModel . class , null , value ) ; }
  Tgt: create an instance of jaxb element
  Pred: create an instance of jaxb element
